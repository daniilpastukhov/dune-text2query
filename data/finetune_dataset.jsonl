{"prompt": "This query returns the number of transactions made for the Set Protocol Sandbox for each day between May 1st and September 1st.", "completion": " -- select date(block_time), sum(_quantity/power(10,18))\n-- from setprotocol.\"RebalancingSetToken_call_mint\" as set\n-- join ethereum.\"transactions\" as eth \n-- ON (eth.hash = set.tx_hash)\n-- group by 1 \n\n-- power(10,18)\n-- divisor to get to ETH from gwei\n\nSELECT DATE(block_time), COUNT(*)\n  FROM setprotocol.\"RebalancingSetToken_call_mint\" AS setp\n       INNER JOIN ethereum.\"transactions\" AS eth\n       ON (eth.hash = setp.tx_hash)\n WHERE DATE(block_time) >= DATE('2019-05-01')\n   AND DATE(block_time) <= DATE('2019-09-01') \n GROUP BY 1"}
{"prompt": "This query returns the total amount of each token that has been minted and redeemed by a specific user. It also returns the net amount of each token that the user has minted or redeemed.", "completion": " WITH mint AS\n  (SELECT CASE\n              WHEN contract_address = '\\x6c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e' THEN 'BAT'\n              WHEN contract_address = '\\xf5dce57282a584d2746faf1593d3121fcac444dc' THEN 'DAI'\n              WHEN contract_address = '\\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'ETH'\n              WHEN contract_address = '\\x158079ee67fce2f58472a96584a73c7ab9ac95c1' THEN 'REP'\n              WHEN contract_address = '\\x39aa39c021dfbae8fac545936693ac917d5e7563' THEN 'USDC'\n              WHEN contract_address = '\\xc11b1268c1a384e55c48c2391d8d480264a3a7f4' THEN 'WBTC'\n              WHEN contract_address = '\\xb3319f5d18bc0d84dd1b4825dcde5d5f7266d407' THEN 'ZRX'\n          END AS symbol, \"mintAmount\" AS sum_mint_amount, \"mintTokens\" AS sum_mint_token, minter\n  FROM compound_v2.\"cEther_evt_Mint\"\n  WHERE minter = '\\x10aab4B0EF76AA2AC9b5909e671517a1171B050E'),\n\nredeem AS (SELECT\n    CASE\n          WHEN contract_address = '\\x6c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e' THEN 'BAT'\n          WHEN contract_address = '\\xf5dce57282a584d2746faf1593d3121fcac444dc' THEN 'DAI'\n          WHEN contract_address = '\\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'ETH'\n          WHEN contract_address = '\\x158079ee67fce2f58472a96584a73c7ab9ac95c1' THEN 'REP'\n          WHEN contract_address = '\\x39aa39c021dfbae8fac545936693ac917d5e7563' THEN 'USDC'\n          WHEN contract_address = '\\xc11b1268c1a384e55c48c2391d8d480264a3a7f4' THEN 'WBTC'\n          WHEN contract_address = '\\xb3319f5d18bc0d84dd1b4825dcde5d5f7266d407' THEN 'ZRX'\n      END AS symbol,\n     \"redeemTokens\" AS sum_redeem_token,\n     \"redeemAmount\" AS sum_redeem_amount,\n     redeemer\nFROM compound_v2.\"cEther_evt_Redeem\"\nWHERE redeemer = '\\x10aab4B0EF76AA2AC9b5909e671517a1171B050E'\n)\n\nSELECT \n    mint.symbol,\n    mint.sum_mint_amount,\n    mint.sum_mint_token,\n    redeem.sum_redeem_token,\n    redeem.sum_redeem_amount,\n    mint.sum_mint_amount - COALESCE(redeem.sum_redeem_amount, 0) AS amount,\n    mint.sum_mint_token - COALESCE(redeem.sum_redeem_token, 0) AS token,\n    redeem.redeemer AS address\nFROM mint\nLEFT JOIN redeem\nON mint.minter = redeem.redeemer\nORDER BY amount DESC"}
{"prompt": "This query returns the number of rows in the \"SaiTub_call_bite\" table in the \"maker\" database.", "completion": " SELECT COUNT('call_tx_hash') FROM maker.\"SaiTub_call_bite\";"}
{"prompt": "This SQL query returns the total amount of tokens supplied by each provider on the y.curve.fi platform, in terms of 1/18th of the total token supply.", "completion": " select provider, sum(token_supply/1e18) from curvefi.\"y_swap_evt_AddLiquidity\" group by provider;"}
{"prompt": "This query returns the number of distinct users who deposited into Pool 3 in the last 10 weeks, ordered from most recent to least recent.", "completion": " SELECT \ndate_trunc('week', block_time) week,\ncount(distinct \"sender\") \"distinct_users\"\nFROM pooltogether_v2.\"Pool3_evt_Deposited\" s\nLEFT JOIN ethereum.\"transactions\" tx ON s.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This query calculates the total USD value of all AirSwap trades made in the past 12 weeks, grouped by week.", "completion": " WITH per_token AS\n  (SELECT price.symbol,\n          date_trunc('week', tx.block_time) AS TIME,\n          SUM(\"takerAmount\" /10^decimals * price.price) AS total_usd_value\n   FROM airswap.\"Exchange_evt_Filled\" filled\n   INNER JOIN\n     (SELECT hash, block_time\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '12 weeks'\n        AND block_time < date_trunc('week', NOW())) tx ON filled.evt_tx_hash = tx.hash\n   INNER JOIN prices.usd price ON date_trunc('minute', tx.block_time) = price.minute\n   INNER JOIN erc20.tokens erc ON erc.contract_address = price.contract_address\n   WHERE \"takerToken\" = price.contract_address\n   GROUP BY 1,\n            2)\nSELECT TIME,\n       SUM(total_usd_value) AS volume\nFROM per_token\nGROUP BY 1;"}
{"prompt": "The SQL query returns the number of distinct stakers and the cumulative number of distinct stakers for each day over a 14 day period.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\ncount(distinct \"_from\") as stakers,\nsum(count(distinct \"_from\")) over (order by date_trunc('day', block_time)) as cumulative_distinct_stakers\nFROM zeroex.\"ZRXToken_evt_Transfer\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE \"_to\" = '\\xBa7f8b5fB1b19c1211c5d49550fcD149177A5Eaf' and p.symbol = 'ZRX'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 14\n"}
{"prompt": "This SQL query calculates the total amount of sales for Decentraland LAND in USD for each month. The query starts by selecting the month and summing the total price of all orders in that month. It then joins the prices table in order to convert the total price to USD. Finally, it groups the results by month and orders them from earliest to latest.", "completion": " SELECT \ndate_trunc('month', evt_block_time) AS MONTH,\nsum((\"orders\".\"totalPrice\") / 1e18 * p.price) as \"usd\"\nFROM decentraland.\"Marketplace_evt_OrderSuccessful\" as orders\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', evt_block_time) WHERE symbol = 'MANA'\nGroup by 1\nORDER BY 1\n\n\n-- (SELECT price from prices.usd where symbol = 'MANA' order by minute desc limit 1)"}
{"prompt": "This SQL query returns the average global volume and global transactions over the past 7 days for all NFT marketplaces.", "completion": " SELECT \n    *,\n    avg(global_volume) OVER (ORDER BY time_unit ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) AS global_volume_ma,\n    avg(global_txs) OVER (ORDER BY time_unit ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) AS global_txs_ma\nFROM dune_user_generated.zxsasha_nft_market\n\nlimit 1000"}
{"prompt": "This query returns the average price of ZRX tokens and the total amount of ZRX tokens staked per hour for the past 110 hours.", "completion": " SELECT\ndate_trunc('hour', block_time) as hour,\nAVG(p.price) as ZRX_price,\nsum(\"_value\"/1e18*p.price) as ZRX_staked FROM zeroex.\"ZRXToken_evt_Transfer\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE \"_to\" = '\\xBa7f8b5fB1b19c1211c5d49550fcD149177A5Eaf' and p.symbol = 'ZRX'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 110"}
{"prompt": "This query returns the number of unique borrowers for each week for the MakerDAO (SCD) protocol.", "completion": " SELECT \ndate_trunc('week', tx.block_time) AS week, \ncount(distinct \"wad\") AS borrowers\nFROM maker.\"SAI_call_mint\" m\nLEFT JOIN ethereum.transactions tx ON tx.hash = m.call_tx_hash\nWHERE m.call_success = 'true'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 100"}
{"prompt": "This query returns the total number of trades on DEX.AG for each day, ordered by the date.", "completion": " SELECT date_trunc('day', block_time) AS Date,\n        COUNT(*) AS \"Total trades\"\nFROM dexag.\"DexTrading_evt_Trade\" trade\nLEFT JOIN ethereum.transactions tx\nON trade.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query will select all data from the \"KittyCore_evt_Transfer\" table where the \"to\" field is equal to the value \"0x66268791B55e1F5fA585D990326519F101407257\".", "completion": " SELECT * FROM cryptokitties.\"KittyCore_evt_Transfer\"\nWHERE cryptokitties.\"KittyCore_evt_Transfer\".to = '\\x66268791B55e1F5fA585D990326519F101407257'"}
{"prompt": "This SQL query returns the date and amount of Erasure Bay rewards paid out for each day.", "completion": " SELECT f.block_time AS date,\n       sum(dai_reward) OVER (\n                             ORDER BY f.block_time ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS rewards\nFROM erasure_bay.\"view_finalize\" f\nINNER JOIN erasure_bay.\"view_request_data\" r ON f.contract_address = r.contract_address"}
{"prompt": "This SQL query returns the number of times a relay was added to the gas station network, grouped by week.", "completion": " SELECT date_trunc('week', block_time), COUNT(*)\nFROM gasstationnetwork.\"RelayHub_evt_RelayAdded\" r\nLEFT JOIN ethereum.transactions tx on r.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns a list of all Monolith contracts sorted by the amount of ETH stored in each contract. The query returns the rank of each contract (sorted by ETH amount), the address of the contract, and the amount of ETH stored in the contract.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x95BEBe7bfc6aCc186C13D055D0Aacc2DE5f81502','\\xb24d47364163f909e64cf2cf7788d22c51cea851', '\\x85bb8a852c29d8f100cb97ecdf4589086d1be2dd') -- Monolith deployers\n\t    and type = 'create'\n),\nperaddress as (\n    SELECT address, sum(amount) / 1e18 as amount\n    FROM (\n        SELECT \"from\" AS address, -value AS amount\n         FROM ethereum.traces\n         WHERE \"from\" IN (SELECT address FROM wallets)\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    UNION ALL\n        SELECT \"to\" AS address, value AS amount\n         FROM ethereum.traces\n         WHERE \"to\" IN (SELECT address FROM wallets )\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    ) t\n    group by 1\n)\nselect ROW_NUMBER() OVER(ORDER BY amount desc) AS n, concat('https://etherscan.io/address/0',right(text(address),41)) as safe_address, amount as eth_amount\nfrom peraddress\norder by amount desc"}
{"prompt": "This query returns the number of new and old users for the 1inch project for each month.", "completion": " SELECT\n    ssq.time, \n    new_users as new,\n    (unique_users - new_users) as old\nFROM (\n    SELECT\n        sq.time, \n        count(*) as new_users\n    FROM (\n        SELECT\n            tx_from as user,\n            MIN(date_trunc('month', oi.block_time)) as time\n        FROM dex.trades oi WHERE project = '1inch'\n        GROUP BY 1\n        ORDER BY 1\n    ) sq\n    GROUP BY 1\n) ssq\nLEFT JOIN (\n    SELECT\n        date_trunc('month', oi.block_time) AS time,\n        COUNT(DISTINCT tx_from) as unique_users\n    FROM dex.trades oi WHERE project = '1inch'\n    GROUP BY 1\n    ORDER BY 1\n) t2 ON t2.time = ssq.time\nORDER BY 1 DESC\n"}
{"prompt": "This SQL query returns data on the top 20 liquidators by revenue for the Compound v2 protocol on the Ethereum blockchain. It includes data on the amount of collateral liquidated in USD, as well as the price of ETH in USD.", "completion": " WITH liquidations AS\n(\nSELECT\ndate_trunc('day', block_time) as day,\n\"liquidator\", sum(\"seizeTokens\"/1e18*0.05*p.price) as collateral_liquidated_usd FROM compound_v2.\"cEther_evt_LiquidateBorrow\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE \"symbol\" = 'ETH'\nGROUP BY 1,2\nORDER BY 1 desc\nLIMIT 5000\n)\n\nSELECT \"liquidator\", sum(\"collateral_liquidated_usd\") as revenue FROM liquidations\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 20\n\n\nSELECT * FROM prices.usd\nWHERE \"symbol\" = 'ETH'\nLIMIT 10\n\nSELECT * FROM compound_v2.\"cEther_evt_LiquidateBorrow\"\nLIMIT 10"}
{"prompt": "SELECT all columns \nFROM the table called MoneyMarket_call_liquidateBorrow", "completion": " SELECT *\nFROM compoundv1.\"MoneyMarket_call_liquidateBorrow\""}
{"prompt": "This SQL query returns the date, block time, and other information for 10 Ethereum transactions that were completed on 11/06/19.", "completion": " SELECT date_trunc('day', et.block_time), *\nFROM chainlink.\"Aggregator_evt_ChainlinkFulfilled\" cf,\n     ethereum.transactions et\nWHERE et.hash = cf.evt_tx_hash \nAND date_trunc = '11/06/19 00:00'\nLIMIT 10\n\n\n"}
{"prompt": "How many unique addresses deployed contracts in 2019?", "completion": " SELECT count(distinct \"from\")\nFROM ethereum.traces t\nWHERE block_time >= '2019-01-01'\nAND type='create'\nAND tx_success = true\n"}
{"prompt": "This query returns the live Fair price, based on the state of the contract and the settings for the contract. If the contract is in state 0 or 3, the price is half of the initial goal price multiplied by the buy slope. If the contract is in any other state, the price is the total supply of Fair, plus the burned supply, multiplied by the buy slope.", "completion": " WITH statecheck AS\n  (SELECT CASE\n              WHEN EXISTS\n                     (SELECT \"_newState\"\n                      FROM fairmint.\"DAT_evt_StateChange\"\n                      ORDER BY \"_newState\" DESC\n                      LIMIT 1) THEN 1\n              ELSE 0\n          END AS state),\n     settings AS\n  (SELECT \"_initGoal\"/1e18 AS initGoal,\n          \"_buySlopeNum\"*1e30/\"_buySlopeDen\" AS \"buySlope\"\n   FROM fairmint.\"DAT_call_initialize\"\n   WHERE call_success=TRUE\n     AND contract_address = '\\x{{ contract_address }}'),\n     burnedFair AS\n  (SELECT SUM(\"value\") amt\n   FROM fairmint.\"DAT_evt_Transfer\"\n   WHERE contract_address = '\\x{{ contract_address }}'\n     AND \"to\" = '\\x0000000000000000000000000000000000000000'),\n     mintedFair AS\n  (SELECT SUM(\"value\") amt\n   FROM fairmint.\"DAT_evt_Transfer\"\n   WHERE contract_address = '\\x{{ contract_address }}'\n     AND \"from\" = '\\x0000000000000000000000000000000000000000'),\n     soldFair AS\n  (SELECT sum(\"_fairValue\") amt\n   FROM fairmint.\"DAT_evt_Sell\"\n   WHERE contract_address = '\\x{{ contract_address }}'),\n     supply AS\n  (SELECT (mintedFair.amt - burnedFair.amt)/1e18 AS total_supply,\n          soldFair.amt/1e18 AS fair_sold,\n          (burnedFair.amt - soldFair.amt)/1e18 AS burned_supply\n   FROM mintedFair,\n        burnedFair,\n        soldFair)\nSELECT CASE\n           WHEN state = 0\n                OR state = 3 THEN settings.initGoal * settings.\"buySlope\" / 2\n           ELSE (supply.total_supply + supply.burned_supply) * settings.\"buySlope\"\n       END AS liveFairPrice\nFROM statecheck,\n     settings,\n     supply"}
{"prompt": "Get the transaction hash from the KyberTrade table, and join it with the FeeBurner_evt_AssignBurnFees table. Limit the results to 100.", "completion": " SELECT tx_hash\nFROM kyber.\"Network_evt_KyberTrade\" trade\nINNER JOIN kyber.\"FeeBurner_evt_AssignBurnFees\" burn\nON trade.tx_hash\nWINDOW w AS (PARTITION BY tx_hash ORDER BY index)\nLIMIT 100;\n"}
{"prompt": "This query returns the total number of Safe transactions made in a given week.", "completion": " select date_trunc('week', et.\"block_time\") AS \"week\", count(et.tx_hash) as safe_transactions\nfrom ethereum.traces et\njoin gnosis_safe.view_safes s \n    on s.address = et.\"from\"\nwhere et.success = True \n    and substring(et.\"input\" for 4) = '\\x6a761202' -- execTransction method of v0.1.0, v1.0.0, v1.1.0, v1.1.1, v1.2.0, v1.3.0\n    AND et.call_type = 'delegatecall'\n\tAND et.to in (  -- mastercopies\n\t    '\\x8942595A2dC5181Df0465AF0D7be08c8f23C93af', -- 0.1.0\n\t    '\\xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A', -- 1.0.0\n\t    '\\xaE32496491b53841efb51829d6f886387708F99B', -- 1.1.0\n\t    '\\x34CfAC646f301356fAa8B21e94227e3583Fe3F5F', -- 1.1.1\n\t    '\\x6851d6fdfafd08c0295c392436245e5bc78b0185', -- 1.2.0\n\t    '\\xd9db270c1b5e3bd161e8c8503c55ceabee709552'  -- 1.3.0\n\t)\ngroup by 1\n"}
{"prompt": "This SQL query returns the total ETH stored in Dapper contracts.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\xa78bbf97033e534c54b0a4fa62aa77b652ae4097', '\\xab76c6d00c603a7615d5459132c1745eb1fb4f6c') -- Dapper  WalletFactories \n\tand type = 'create'\n),\nperaddress as (\n    SELECT address, sum(amount) / 1e18 as amount\n    FROM (\n        SELECT \"from\" AS address, -value AS amount\n         FROM ethereum.traces\n         join wallets\n         \ton \"from\" = wallets.address and creation_block_number <= block_number\n         WHERE -- \"from\" IN (SELECT address FROM wallets)\n         tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n         and block_number >= 7249926 -- blocknumber of first dapper contract\n    UNION ALL\n        SELECT \"to\" AS address, value AS amount\n         FROM ethereum.traces\n         join wallets\n         \ton \"to\" = wallets.address and creation_block_number <= block_number\n         WHERE --\"to\" IN (SELECT address FROM wallets )\n         tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n         and block_number >= 7249926 -- blocknumber of first dapper contract\n    ) t\n    group by 1\n)\nselect sum(amount)\nfrom peraddress"}
{"prompt": "The SQL query will return a list of all liquidations that have occurred, with information on the block time, the from and to addresses, the block number, the block hash, the gas price, and the amount of PETH and WETH involved in the liquidation.", "completion": " -- WITH all_liq_txns AS\n--     (SELECT\n--         tx.block_time\n--         , tx.from\n--         , tx.to\n--         , tx.block_number\n--         , tx.block_hash\n--         , tx.gas_price\n--         , s.*\n--     FROM maker.\"SaiTub_call_bite\" s\n--     LEFT JOIN ethereum.\"transactions\" tx on s.call_tx_hash = tx.hash\n--     WHERE call_success = true)\n-- ,\nWITH all_bites AS\n    (SELECT\n        tx.block_time\n        , tx.from\n        , tx.to\n        , tx.block_number\n        , tx.block_hash\n        , tx.gas_price\n        , s.*\n    FROM maker.\"SaiTub_call_bite\" s\n    LEFT JOIN ethereum.\"transactions\" tx on s.call_tx_hash = tx.hash\n    WHERE call_success = true)\n,\nall_bust_txns AS\n    (SELECT\n        tx.block_time\n        , tx.from\n        , tx.to\n        , tx.block_number\n        , tx.block_hash\n        , tx.gas_price\n        , s.*\n    FROM maker.\"SaiTap_call_bust\" s\n    LEFT JOIN ethereum.\"transactions\" tx on s.call_tx_hash = tx.hash\n    WHERE call_success = true)\n, \nliqs_with_peth_transfers AS (\n    SELECT\n        liqs.*\n        , peth.src as peth_src\n        , peth.dst as peth_dst\n        , peth.wad / (10^18) as peth_amount\n    FROM all_bust_txns busts\n    LEFT JOIN maker.\"PETH_evt_Transfer\" peth\n    ON peth.evt_tx_hash = liqs.call_tx_hash\n    AND peth.dst = liqs.to\n),\nliqs_with_peth_weth_transfers AS (\n    SELECT\n        liqs.*\n        , weth.src as weth_src\n        , weth.dst as weth_dst\n        , weth.wad / (10^18) as weth_amount\n    FROM liqs_with_peth_transfers liqs\n    LEFT JOIN zeroex.\"WETH9_evt_Transfer\" weth\n    ON weth.evt_tx_hash = liqs.call_tx_hash\n    AND weth.dst = liqs.to\n)\nSELECT *\nFROM liqs_with_peth_weth_transfers\nORDER BY block_time DESC\nLIMIT 50\n"}
{"prompt": "This SQL query returns a list of all the HEX transfers from the \"Origin\" address to stakers, including the transaction hash, the address the HEX was transferred to, and the amount of HEX transferred.", "completion": " SELECT distinct t.tx_hash,\n       substring(t.\"input\"::bytea\n                 FROM 5\n                 FOR 32) AS transfer_to,\n       bytea2numeric(substring(t.\"input\"::bytea\n                               FROM 37\n                               FOR 32))/1e8 AS transfer_amount\nFROM ethereum.traces t\nWHERE t.\"to\" = '\\x2b591e99afe9f32eaa6214f7b7629768c40eeb39' /* HEX Contract Address */\n  AND substring(t.\"input\"::bytea\n                FROM 0\n                FOR 5) = '\\xa9059cbb' /* transfer() call method */\n  AND t.\"from\" = '\\x9a6a414d6f3497c05e3b1de90520765fa1e07c03' /* HEX Origin Address */\n  AND t.block_number >= 9041184\n  AND tx_success = TRUE\nORDER BY transfer_to ASC"}
{"prompt": "This query returns the total number of USDC users over time.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', block_time) AS date,\n                \"from\" AS account\n         FROM ethereum.\"transactions\"\n         WHERE \"to\" = '\\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'\n           AND success = 'true'\n         UNION SELECT date_trunc('day', block_time) AS date,\n                      \"from\" AS account\n         FROM ethereum.\"transactions\"\n         WHERE \"to\" = '\\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'\n           AND success = 'true') AS table1\n      GROUP BY account) AS table2\n   GROUP BY date\n   ORDER BY date) AS table3"}
{"prompt": "This query returns the total amount of ETH stored in Gnosis Safe contracts, broken down by week.", "completion": " -- TODO: change dbt_jeff_safe_ethereum.eth_transfers --> safe_ethereum.eth_transfers after 22.08.2022\n\nwith per_week as (\n    select date_trunc('week', block_time) as week, sum(amount_raw) as amount_raw\n    from dbt_jeff_safe_ethereum.eth_transfers\n    group by 1\n),\n\naccumulated as (\n    select week, sum(amount_raw) over (order by week asc rows between unbounded preceding and current row) as eth_balance_raw \n    from per_week\n)\n\nselect week, eth_balance_raw / 1e18 as eth_balance\nfrom accumulated"}
{"prompt": "This query returns the average SuperRare sale price per week.", "completion": " WITH volume AS\n  (SELECT date_trunc('week', evt_block_time) AS week,\n          sum(_amount / 1e18) AS volume\n   FROM\n     (SELECT evt_block_time,\n             _amount\n      FROM superrare.\"SuperRareMarketAuction_evt_Sold\"\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRare_evt_Sold\"\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRareMarketAuction_evt_AcceptBid\"\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRare_evt_AcceptBid\") a\n   INNER JOIN prices.\"layer1_usd_eth\" p ON date_trunc('minute', evt_block_time) = p.minute\n   GROUP BY 1),\n     amount AS\n  (SELECT date_trunc('week', evt_block_time) AS week,\n          count(date_trunc('week', evt_block_time)) AS amount\n   FROM\n     (SELECT evt_block_time,\n             _amount\n      FROM superrare.\"SuperRareMarketAuction_evt_Sold\"\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRare_evt_Sold\"\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRareMarketAuction_evt_AcceptBid\"\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRare_evt_AcceptBid\") a\n   INNER JOIN prices.\"layer1_usd_eth\" p ON date_trunc('minute', evt_block_time) = p.minute\n   GROUP BY 1)\nSELECT v.week,\n       v.volume / a.amount AS avg_price\nFROM volume v\nINNER JOIN amount a ON v.week = a.week\nORDER BY 1"}
{"prompt": "This SQL query returns the accumulated amount of Numeraire (NMR) tokens destroyed over time. The data is grouped by day, and the query orders the results by day.", "completion": " WITH destroy as (\nSELECT \n\ndate_trunc('day', tx.block_time) as day,\nSUM(\"totalAmountStaked\" / 1e18) as destroyed \n\nFROM numerai.\"NumeraireBackend_evt_StakeDestroyed\" d\nINNER JOIN numerai.\"NumeraireBackend_evt_Staked\" s ON s.\"tournamentID\" = d.\"tournamentID\" \nAND d.\"stakerAddress\" = s.staker\nINNER JOIN ethereum.transactions tx ON d.tx_hash = tx.hash\nGROUP BY day\nORDER BY day\n)\n\nSELECT day,\n       sum(destroyed) OVER (ORDER BY day)\nFROM destroy\nORDER BY day;"}
{"prompt": "This SQL query returns the number of trades that do not involve the BNT token.", "completion": " WITH non_bnt_trades AS (\n(SELECT evt_tx_hash, \"_return\" AS amount FROM bancor.\"BancorConverter_evt_Conversion\"\n        WHERE \"_toToken\" != '\\x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c')\n      UNION ALL\n        (SELECT evt_tx_hash, \"_amount\" AS amount FROM bancor.\"BancorConverter_evt_Conversion\"\n            WHERE \"_fromToken\" != '\\x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c')\n)\n\nSELECT COUNT(*) FROM non_bnt_trades\n            \n"}
{"prompt": "This SQL query calculates the total amount of WBTC that has been minted and burned each week, in order to determine the net amount of WBTC that is outstanding.", "completion": " WITH cum_wbtc_minted AS\n(\nSELECT \ndate_trunc('week', block_time) as week,\nsum(sum(\"amount\"/1e8)) OVER (ORDER BY date_trunc('week', block_time)) as cum_mint FROM wrappedbtc.\"WBTC_evt_Mint\" m\nLEFT JOIN ethereum.\"transactions\" tx on m.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50),\n\ncum_wbtc_burned AS \n(\nSELECT \ndate_trunc('week', block_time) as week,\nsum(sum(b.\"value\"/1e8)) OVER (ORDER BY date_trunc('week', block_time)) as cum_burned FROM wrappedbtc.\"WBTC_evt_Burn\" b\nLEFT JOIN ethereum.\"transactions\" tx on b.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50\n)\n\nSELECT cum_wbtc_minted.\"week\", sum(\"cum_mint\")-sum(\"cum_burned\") as wbtc_outstanding\nFROM cum_wbtc_minted\nLEFT JOIN cum_wbtc_burned ON cum_wbtc_minted.week = cum_wbtc_burned.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50\n"}
{"prompt": "This SQL query returns the number of active Authereum users for each month.", "completion": " WITH wallets AS\n  (SELECT address\n   FROM ethereum.traces\n   WHERE \"from\" IN ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8',\n                    '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea',\n                    '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046')\n     AND TYPE = 'create')\nSELECT date_trunc('month', et.\"block_time\") AS MONTH,\n       count(DISTINCT wallets.address) AS address\nFROM ethereum.traces et\nINNER JOIN wallets ON wallets.address = et.\"from\"\nWHERE et.\"to\" IN ('\\x237EDCDd43349227ef511581Cc834962ECf23076',\n                  '\\x20af9e54a3670ef6a601bca1f1ec22b1f93cbe23',\n                  '\\x2e1723d1dfa2947f0d08d5c5d214b71def4f951f',\n                  '\\x79fee076b1bcd4054dff0b4364c26899492198dc',\n                  '\\x211deb5c0a28a213fcf5976ac22c70ff96b9004c',\n                  '\\x185c46c8d3ef5155f3678e69c827db7a2116a6cd',\n                  '\\xd8cab604bdd8cbb7c3eb0c26f7dc3abffb005a92',\n                  '\\xae1710e83211decb356f031a9346a24ef55055e0')\n  AND call_type = 'delegatecall'\n  AND tx_success = TRUE\n  AND error IS NULL\n  AND substring(\"input\"\n                FOR 4) IN ('\\x26aa4655',\n                           '\\xd5553b88')\nGROUP BY MONTH\nORDER BY MONTH"}
{"prompt": "This query returns the edition number and amount (in ETH) for all bids that were accepted by artists, as well as the edition number and price (in ETH) for all digital assets that were purchased.", "completion": " SELECT \"_editionNumber\",\n       \"_amount\" / 1e18\nFROM knownorigin.\"ArtistAcceptingBidsV2_evt_BidAccepted\"\nUNION ALL\nSELECT \"_editionNumber\",\n       \"_priceInWei\" / 1e18\nFROM knownorigin.\"KnownOriginDigitalAssetV2_evt_Purchase\""}
{"prompt": "This query returns the number of transactions sent to the LivepeerBondingManager contract, grouped by day. The data returned starts from block number 850000.", "completion": " /**\n * Get the txCount sent to LivepeerBondingManager, grouped by day\n */ WITH addresses(addr) AS (\n                             VALUES ('\\x9c10672cee058fd658103d90872fe431bb6c0afa'))\nSELECT count(transactions) AS transactionsCount,\n       date_trunc('day', block_time) AS \"day\"\nFROM ethereum.transactions\nWHERE \"to\" IN\n    (SELECT addr::bytea\n     FROM addresses)\n  AND block_number >= 850000\nGROUP BY \"day\"\nORDER BY DAY"}
{"prompt": "This SQL query calculates the total volume of Ethereum traded in US dollars for each month.", "completion": " select date_trunc('month', block_time) as date,\n        sum(usd_amount) as volume\nfrom hashflow.trades\nwhere fill_status is true\ngroup by 1 \n"}
{"prompt": "This query returns a list of all Dutch X auctions that have started, along with the sell token, buy token, amount being sold, and the start time of the auction.", "completion": " SELECT sell.\"auctionIndex\",\n        sell.\"sellToken\",\n       sell.\"buyToken\",\n       sell.\"amount\" / 1e18 as sellAmount,\n       to_timestamp(\"auctionStart\") AS auctionStart\nFROM gnosis.\"DutchExchange_evt_AuctionStartScheduled\" START\nINNER JOIN gnosis.\"DutchExchange_evt_NewSellOrder\" sell\non start.\"auctionIndex\" = sell.\"auctionIndex\"\nORDER BY auctionstart"}
{"prompt": "This query returns the number of ETH holders that locked their ETH on a given day.", "completion": " SELECT date, sum(count(_locker)) OVER (ORDER BY date)\nFROM (\n    SELECT DISTINCT ON (_locker) date_trunc('day', tx.block_time) as date, _locker\n    FROM dxdao.\"DxLockEth4Rep_evt_Lock\" e\n    LEFT JOIN ethereum.transactions tx\n    ON e.tx_hash = tx.hash \n    ORDER BY _locker, date asc\n) AS subq\nGROUP BY date;"}
{"prompt": "This SQL query returns the sender, block number, hash, and block time for all transactions where the \"from\" address is in the addresses table and the \"to\" address is not in the given address. The results are ordered by block number, with the most recent transactions appearing first.", "completion": " WITH addresses(addr) AS (\n                         VALUES ('\\xc477a6881863ba0518ec598906c6ca28e3ba9895',\n                                 '\\x05475a982140d70026662270d51e1dadf85d87b1'))\nSELECT b.\"from\" AS sender,\n       b.block_number,\n       b.hash,\n       b.block_time\nFROM\n  (SELECT block_number,\n          \"from\",\n          hash,\n          block_time\n   FROM ethereum.transactions\n   WHERE \"from\" IN\n       (SELECT addr::bytea\n        FROM addresses)\n     AND \"to\" NOT IN ('\\x69670b0c1b100739812415dd474804bb32b3aeca')\n   ORDER BY block_number ASC) AS b\nORDER BY b.block_number DESC"}
{"prompt": "This SQL query returns the USD value of inflows for REN tokens by week. The value is calculated by summing the amount of tokens divided by the decimals (8 for BTC, 18 for Dai) and multiplying by the price of the token in USD.", "completion": " WITH  t_in AS (\nSELECT \nCASE WHEN src = '\\x88c64a7d2ecc882d558dd16abc1537515a78bb7d' THEN 'BTC' \nELSE 'DAI'\nEND AS \"token\",\nCASE WHEN src = '\\x88c64a7d2ecc882d558dd16abc1537515a78bb7d' THEN '8'::numeric \nELSE '18'::numeric \nEND AS \"decimals\",\namount,\nevt_tx_hash\nFROM renproject.\"DEXAdapter_evt_LogTransferIn\" \n)\n\nSELECT date_trunc('week', tx.block_time) AS week, symbol, SUM(amount/(10^decimals)*p.price) AS usd_value\nFROM t_in\nLEFT JOIN ethereum.transactions tx ON tx.hash = t_in.evt_tx_hash\nLEFT JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time) AND p.symbol = t_in.token\nGROUP BY 1, 2\nORDER BY 1;"}
{"prompt": "This SQL query returns a table with the following columns: \n- date_trunc (minute, block_time): the time when the block was created, truncated to the nearest minute\n- eth_paid_for_tx: the amount of ETH paid for the transaction\n- price: the price of ETH in USD\n- eth_paid_for_tx * price as usd_paid_for_tr: the amount of USD paid for the transaction\n- sum (eth_paid_for_tx * price) over (order by date_trunc (minute, block_time)): the cumulative USD amount paid for all transactions\n- sum (eth_paid_for_tx) over (order by date_trunc (minute, block_time)): the cumulative ETH amount paid for all transactions\n- hash: the hash of the transaction", "completion": " with all_txns as \n(\nselect \n    block_time,\n    success,\n    value,\n    gas_price/10^9 as gas_price,\n    gas_used,\n    (gas_price * gas_used)/10^18 eth_paid_for_tx,\n    hash\nfrom ethereum.transactions\nwhere \"from\" in ('\\x455f7017F5c08fE13D421B3a9ca6D95455AC08dB','\\xEb866Dd164620F4c8FB0414380b94575AD4eA2B9','\\xd3B00d3efDbaa26D586A20b23509cE6455D983fE')\n)\n\nselect \n    date_trunc('minute',block_time),\n    eth_paid_for_tx,\n    price,\n    eth_paid_for_tx * price as usd_paid_for_tr,\n    sum(eth_paid_for_tx * price) over (order by date_trunc('minute',block_time)) as usd_paid_for_tr_cumu,\n    sum(eth_paid_for_tx) over (order by date_trunc('minute',block_time)) as eth_paid_for_tr_cumu,\n    hash\nfrom all_txns\n\nleft join (\n    select minute, price\n    from prices.usd\n    where symbol = 'WETH'\n    ) as prices\n    on date_trunc('minute',block_time) = minute\n    order by date_trunc DESC\n\n\n"}
{"prompt": "This SQL query returns the most popular Ethereum lending contracts.", "completion": " WITH addresses AS\n  (SELECT DISTINCT address AS addr\n   FROM ethereum.traces\n   WHERE \"from\"='\\x86d3e06FAbC091D036Ad0747bF60054B86A808b2'\n     AND \"type\"='create'\n)\nSELECT contract_address,\n       count(*)\nFROM ethereum.logs\nWHERE contract_address IN\n    (SELECT addr\n     FROM addresses)\nGROUP BY 1\nORDER BY 2 DESC;"}
{"prompt": "This query returns the total amount of WBTC borrowed from the Compound contract on each day, ordered by date.", "completion": " SELECT \ndate_trunc('day', tx.block_time) as date,\nsum(\"borrowAmount\" / 1e8)\nFROM compound_v2.\"cErc20_evt_Borrow\" b LEFT JOIN ethereum.transactions tx\nON b.evt_tx_hash = tx.hash\nWHERE contract_address = '\\xc11b1268c1a384e55c48c2391d8d480264a3a7f4'\nGROUP BY 1\nORDER BY 1;\n"}
{"prompt": "This SQL query returns the date and time rounded to the nearest hour, along with a count of how many times the 'WETH' symbol occurred in the prices database during that hour. The query is sorted in descending order by hour, and only returns the top 100 results.", "completion": " SELECT date_trunc('hour', minute), COUNT(*) FROM prices.\"usd\"\nWHERE symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 100"}
{"prompt": "This SQL query returns the number of trades made on the 0x v2.1 and v3 exchanges each week, starting from 12/1/19.", "completion": " WITH v3 AS\n(\nSELECT\ndate_trunc('week', evt_block_time) as week,\ncount('makerAddress') as v3_trades \nFROM zeroex_v3.\"Exchange_evt_Fill\" \nGROUP BY 1\nORDER BY 1 desc\n),\n\nv21 AS\n(\nSELECT\ndate_trunc('week', evt_block_time) as week,\ncount('makerAddress') as v21_trades \nFROM zeroex_v2.\"Exchange2.1_evt_Fill\"\nGROUP BY 1\nORDER BY 1 desc\n) \n\nSELECT \nv21.week, \nsum(\"v21_trades\") as v21_trades,\nsum(\"v3_trades\") as v3_trades\nFROM v21\nFULL OUTER JOIN v3 ON v21.week = v3.week\nWHERE v21.week > '12/1/19'\nGROUP BY 1\nORDER BY 1 desc\n\n\n"}
{"prompt": "This query returns the USD value of total ETH stored in Argent contracts.", "completion": " WITH wallets AS (\n    select substring(topic2 from 13 for 20) as \"address\", block_time as creation_time\n\tfrom ethereum.logs el\n\twhere (\n\t    topic1 = '\\x5b03bfed1c14a02bdeceb5fa582eb1a5765fc0bc64ca0e6af4c20afc9487f081' -- WalletCreated event\n\t\tand contract_address = '\\x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020'  -- Argent Factory\n\t) OR (\n\t\ttopic1 = '\\xca0b7dde26052d34217ef1a0cee48085a07ca32da0a918609937a307d496bbf5' -- WalletCreated event with Guardian\n\t\tand contract_address = '\\x40C84310Ef15B0c0E5c69d25138e0E16e8000fE9'  -- Argent Factory new\n\t)\n)\nSELECT (sum(amount) / 1e18) * (SELECT price FROM prices.usd WHERE symbol = 'ETH' ORDER BY minute desc LIMIT 1) as usd_value\nFROM (\n    SELECT \"from\" AS address, -value AS amount\n     FROM ethereum.traces et\n     join wallets w\n        on et.\"from\" = w.address\n     AND success = TRUE\n     AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\nUNION ALL\n    SELECT \"to\" AS address, value AS amount\n     FROM ethereum.traces et\n     join wallets w \n        on et.\"to\" = w.address\n     AND success = TRUE\n     AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n) t"}
{"prompt": "This SQL query returns the total amount of SAI minted and burned each day since 2019-11-18.", "completion": " WITH mint AS\n(\nSELECT date_trunc('day', tx.block_time) AS day, SUM(wad/1e18) AS mint\nFROM maker.\"SAI_evt_Mint\" m\nLEFT JOIN ethereum.transactions tx ON tx.hash = m.evt_tx_hash\nWHERE tx.block_time > '2019-11-18 16:00:00'\nGROUP BY 1\n),\n\nburn AS (\nSELECT date_trunc('day', tx.block_time) AS day, -SUM(wad/1e18) AS burn\nFROM maker.\"SAI_evt_Burn\" m\nLEFT JOIN ethereum.transactions tx ON tx.hash = m.evt_tx_hash\nWHERE tx.block_time > '2019-11-18 16:00:00'\nGROUP BY 1\n)\n\nSELECT mint.day, mint, burn, mint + burn AS \"Net minted\" FROM mint\nLEFT JOIN burn ON mint.day = burn.day;"}
{"prompt": "This SQL query returns the total USD volume for Kyber trades made in the past 52 weeks.", "completion": " WITH txs AS (\n    SELECT hash, date_trunc('minute', block_time) as minute, date_trunc('week', block_time ) as week\n    FROM ethereum.transactions\n    WHERE block_time > date_trunc('week', now()) - interval '52 weeks'\n    AND block_time < date_trunc('week', now())\n), price AS (\n   SELECT * FROM prices.usd\n   WHERE minute > date_trunc('week', now()) - interval '52 weeks'\n   AND minute < date_trunc('week', now())\n   AND symbol = 'ETH'),\n kyber_fee_mapping AS (\n    SELECT evt_tx_hash,\n        evt_index,\n        \"ethWeiValue\" /1e18 AS value,\n        (SELECT count(*)\n         FROM kyber.\"FeeBurner_evt_AssignBurnFees\"\n         WHERE evt_tx_hash = trade.evt_tx_hash\n         AND evt_index < trade.evt_index) AS burnFees\n    FROM kyber.\"Network_evt_KyberTrade\" trade\n), kyber_intermediate_volume AS (\n    SELECT evt_tx_hash, (value * (burnFees - lag(burnFees, '1', '0') OVER (PARTITION BY evt_tx_hash ORDER BY evt_index))) AS ethvolume\n    FROM kyber_fee_mapping f\n    ORDER BY evt_tx_hash\n), kyber_volume AS (\n    SELECT evt_tx_hash, SUM(ethvolume) as sumeth\n    FROM kyber_intermediate_volume\n    GROUP BY 1\n), kyber AS (\n    SELECT week, SUM(sumeth * p.price) AS usd_volume\n    FROM txs \n    INNER JOIN kyber_volume ON kyber_volume.evt_tx_hash = txs.hash\n    INNER JOIN price p ON txs.minute = p.minute\n    WHERE p.symbol = 'ETH'\n    GROUP BY 1)\nSELECT week,\n       usd_volume\nFROM kyber"}
{"prompt": "Get all records from the \"BasicTournament_evt_WizardElimination\" table where the \"wizardId\" is greater than 4234 and less than 5975, ordered by the \"block_number\" field in descending order.", "completion": " select * from chzwzrds.\"BasicTournament_evt_WizardElimination\" AS evts\ninner join ethereum.\"transactions\" as txs\non txs.hash = evts.evt_tx_hash\nwhere \"wizardId\" > 4234 AND \"wizardId\" < 5975\norder by block_number desc"}
{"prompt": "This SQL query returns the total number of tokens sold for each day, broken down by the type of token sold.", "completion": " select day, sum(y) as y, sum(usdt) as usdt, sum(compound) as compound from (\nselect date_trunc('day', block_time) AS day, sum(tokens_sold/(case \nwhen sold_id = 0 then 1e18\nwhen sold_id = 1 then 1e6\nwhen sold_id = 2 then 1e6\nwhen sold_id = 3 then 1e18\nend)) y, 0 as usdt, 0 as compound from curvefi.\"y_swap_evt_TokenExchangeUnderlying\" as cst\nLEFT JOIN ethereum.\"transactions\" tx ON cst.evt_tx_hash = tx.hash\ngroup by 1\nunion\nselect date_trunc('day', block_time) AS day, 0 as y, sum(tokens_sold/(case \nwhen sold_id = 0 then 1e18\nwhen sold_id = 1 then 1e6\nwhen sold_id = 2 then 1e6\nend)) as usdt, 0 as compound  from curvefi.\"usdt_swap_evt_TokenExchangeUnderlying\" as cst\nLEFT JOIN ethereum.\"transactions\" tx ON cst.evt_tx_hash = tx.hash\ngroup by 1\nunion\nselect date_trunc('day', block_time) AS day, 0 as y, 0 as usdt, sum(tokens_sold/(case \nwhen sold_id = 0 then 1e18\nwhen sold_id = 1 then 1e6\nend)) as compound from curvefi.\"compound_v2_evt_TokenExchangeUnderlying\" as cst\nLEFT JOIN ethereum.\"transactions\" tx ON cst.evt_tx_hash = tx.hash\ngroup by 1) a group by 1"}
{"prompt": "This SQL query returns the price of NXM in ETH for each day since May 23, 2019. The price is calculated by dividing the value of NXM transfers by the value of ETH transfers on the same day.", "completion": " WITH freq AS\n  (SELECT evt_tx_hash,\n          count(*)\n   FROM erc20.\"ERC20_evt_Transfer\"\n   WHERE contract_address = '\\xd7c49cee7e9188cca6ad8ff264c1da2e69d4cf3b'\n   GROUP BY 1)\nSELECT tx.block_time AS date,\n       (tx.value / 1e18) / (erc.value / 1e18) AS price\nFROM erc20.\"ERC20_evt_Transfer\" erc\nINNER JOIN freq f ON erc.evt_tx_hash = f.evt_tx_hash\nAND f.count = 1\nINNER JOIN ethereum.\"transactions\" tx ON erc.evt_tx_hash = tx.hash\nAND tx.block_time >= '2019-05-23'\nAND tx.value != 0\nWHERE erc.contract_address = '\\xd7c49cee7e9188cca6ad8ff264c1da2e69d4cf3b'\n  AND (erc.\"from\" = '\\x0000000000000000000000000000000000000000'\n       OR erc.\"to\" = '\\x0000000000000000000000000000000000000000')\n  AND erc.value != 0"}
{"prompt": "This SQL query returns the number of contract deployments per month, as well as the total gas used for those deployments, over the past year. The gas usage figures are based on the average ETH price during each minute of the deployment process.", "completion": " SELECT date_trunc('month', block_time),\ncount(*),\nSUM(gas_used * (\n            SELECT AVG(p.price)\n            FROM prices.\"usd\" p\n            WHERE p.symbol = 'ETH'\n            AND p.minute = date_trunc('minute', t.block_time)\n            LIMIT 1\n        )*0.000000001)\nFROM ethereum.traces t\nWHERE block_time >= now()::date - interval '1 year'\nAND block_time < date_trunc('month', NOW())\nAND type='create'\nAND tx_success = true\nGROUP BY 1;"}
{"prompt": "This query counts the number of unique wallets that have made a 'delegatecall' type of transaction to one of the specified addresses, where the transaction was successful and there was no error. The results are grouped by day.", "completion": " WITH wallets AS\n  (SELECT address\n   FROM ethereum.traces\n   WHERE \"from\" IN ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8',\n                    '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea',\n                    '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046')\n     AND TYPE = 'create')\nSELECT date_trunc('day', et.\"block_time\") AS DAY,\n       count(DISTINCT wallets.address) AS address\nFROM ethereum.traces et\nINNER JOIN wallets ON wallets.address = et.\"from\"\nWHERE et.\"to\" IN ('\\x237EDCDd43349227ef511581Cc834962ECf23076',\n                  '\\x20af9e54a3670ef6a601bca1f1ec22b1f93cbe23',\n                  '\\x2e1723d1dfa2947f0d08d5c5d214b71def4f951f',\n                  '\\x79fee076b1bcd4054dff0b4364c26899492198dc',\n                  '\\x211deb5c0a28a213fcf5976ac22c70ff96b9004c',\n                  '\\x185c46c8d3ef5155f3678e69c827db7a2116a6cd',\n                  '\\xd8cab604bdd8cbb7c3eb0c26f7dc3abffb005a92',\n                  '\\xae1710e83211decb356f031a9346a24ef55055e0')\n  AND call_type = 'delegatecall'\n  AND tx_success = TRUE\n  AND error IS NULL\n  AND substring(\"input\"\n                FOR 4) IN ('\\x26aa4655',\n                           '\\xd5553b88')\nGROUP BY DAY\nORDER BY DAY"}
{"prompt": "This SQL query returns the total amount of DAI minted per day, from 2019-11-18 16:00:00 onwards, where the minting transaction was successful.", "completion": " SELECT date_trunc('day', tx.block_time), SUM(wad/1e18)\nFROM makermcd.\"DAI_call_mint\" m\nLEFT JOIN ethereum.transactions tx ON tx.hash = m.call_tx_hash\nWHERE date_trunc('minute', tx.block_time) > '2019-11-18 16:00:00'\nAND m.call_success = 'true'\nGROUP BY 1;"}
{"prompt": "This query selects the date and number of distinct stakers for each week from the NumeraireBackend_evt_Staked and ethereum.transactions tables.", "completion": " SELECT date_trunc('week', tx.block_time) AS date,\n       count(DISTINCT staker)\nFROM numerai.\"NumeraireBackend_evt_Staked\" s\nINNER JOIN ethereum.transactions tx\nON s.tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query sorts all Authereum contracts by the amount of ETH they have stored.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8', '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea', '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046') -- Authereum Wallet Factorys\n\t    and type = 'create'\n),\nperaddress as (\n    SELECT address, sum(amount) / 1e18 as amount\n    FROM (\n        SELECT \"from\" AS address, -value AS amount\n         FROM ethereum.traces\n         WHERE \"from\" IN (SELECT address FROM wallets)\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    UNION ALL\n        SELECT \"to\" AS address, value AS amount\n         FROM ethereum.traces\n         WHERE \"to\" IN (SELECT address FROM wallets )\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    ) t\n    group by 1\n)\nselect ROW_NUMBER() OVER(ORDER BY amount desc) AS n, concat('https://etherscan.io/address/0',right(text(address),41)) as address, amount as eth_amount\nfrom peraddress\norder by amount desc"}
{"prompt": "This SQL query returns the 1inch USD volume per month, as well as the predicted volume for the current month. It also returns the aggregator share, which is the 1inch volume divided by the total volume of all other aggregators.", "completion": " SELECT\n    date_trunc('month', block_time) AS time,\n    SUM(CASE WHEN project = '1inch' and tx_to = exchange_contract_address THEN usd_amount ELSE 0 END) as own_volume,\n    SUM(CASE WHEN project = '1inch' and tx_to <> exchange_contract_address THEN usd_amount ELSE 0 END) as ext_volume,\n    SUM(case when project = '1inch' then usd_amount else 0 end) as volume,\n    (CASE\n        WHEN date_trunc('month', block_time)::timestamp + '1 month'::interval > NOW()\n        THEN date_part('day', date_trunc('month', block_time) + interval '1 month' - date_trunc('month', block_time)) * 24 /\n            extract(epoch from (MAX(block_time)::timestamp - date_trunc('month', block_time)::timestamp)/3600) - 1\n        ELSE 0\n    END) * SUM(case when project = '1inch' then usd_amount else 0 end) as predicted,\n    sum(case when project = '1inch' then usd_amount else 0 end) -- 1inch volumes\n        / (1 + sum(case when project <> 'Matcha' and project <> 'Tokenlon' and category = 'Aggregator' then usd_amount else 0 end)) as agg_share -- Matcha volumes are doubled with 0x API, Tokenlon was not an aggregator\nFROM dex.trades --WHERE project = '1inch'\nWHERE block_time >= '2019-06-03'\nGROUP BY 1\nORDER BY 1 DESC\n"}
{"prompt": "This SQL query selects all data from the \"trades_v2_beta\" table where the nft_contract_address is equal to the specified address, and orders the results by block_time in descending order.", "completion": " SELECT *\r\nFROM nft.\"trades_v2_beta\"\r\nWHERE nft_contract_address = '\\xC4b310E8E655F83f97c4034bC18f98650A06952D'\r\nORDER BY  block_time DESC"}
{"prompt": "This SQL query returns data on the weekly volume of trades, the number of users, and the number of swaps for the 1inch Limit Order Protocol project.", "completion": " select date_trunc('week', block_time) as time,\n    sum(volume) as volume,\n    sum(volume_rfq) as volume_rfq,\n    sum(volume_erfq) as volume_erfq,\n    sum(volume_users) as volume_users,\n    count(distinct tx_from) as users,\n    sum(swaps) as swaps,\n    count(*) as count_tx\nfrom (select block_time, tx_hash, tx_from,\n        sum(usd_amount) as volume,\n        count(*) as swaps,\n        sum(case when version like 'RFQ%' then usd_amount end) as volume_rfq,\n        sum(case when version like 'eRFQ%' then usd_amount end) as volume_erfq,\n        sum(case when version not like '%RFQ%' then usd_amount end) as volume_users\n    from dex.trades\n    where project = '1inch Limit Order Protocol'\n    group by 1, 2, 3) t\ngroup by 1\norder by 1 desc"}
{"prompt": "This SQL query selects the symbol, date, and count of entries for each token from the coincap \"tokens/usd\" table, grouped by symbol and date. The results are ordered by symbol and date.", "completion": " select symbol, date_trunc('day', time), count(*) from coincap.\"tokens/usd\" group by 1, 2 order by 1,2;"}
{"prompt": "This SQL query returns the block time and value for certain contracts and topics.", "completion": " SELECT block_time,\n       ('x' || lpad(trim(LEADING '0'\n                         FROM substring(cast(DATA AS text), 131, 64)), 16, '0'))::bit(64)::bigint AS value\nFROM ethereum.\"logs\"\nWHERE contract_address = '\\x7e3abde9d9e80fa2d1a02c89e0eae91b233cde35'\n  AND topic1 = '\\xdf5790120e3a47a9af8b7221574bf9c40e96cf1e648723b28b93a73ba9dd68fd'\nUNION\nSELECT block_time,\n       ('x' || lpad(trim(LEADING '0'\n                         FROM substring(cast(DATA AS text), 195, 64)), 16, '0'))::bit(64)::bigint AS value\nFROM ethereum.\"logs\"\nWHERE contract_address = '\\x7e3abde9d9e80fa2d1a02c89e0eae91b233cde35'\n  AND topic1 = '\\x7657ffe1f72297f8773cec737634d73ad5d98a421b9f15dc99f3b792278d1396'\nUNION\nSELECT tx.block_time,\n       value\nFROM ethereum.\"logs\" log\nINNER JOIN ethereum.\"transactions\" tx ON log.tx_hash = tx.hash\nAND contract_address = '\\x1f0678d1238921dc99309360668b16a17098aa2a'\nAND topic1 = '\\xb14726c0e5dc36bf6c79e3c3844e55c8a762c3d9d60f645f2dd99febd663b8bc'"}
{"prompt": "This SQL query returns the percentage of total income that comes from liquidations for each day over the past 90 days.", "completion": " WITH liq_income AS \n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(art/1e18*0.1*p.price) as liq,\nsum(sum(art/1e18*0.1*p.price)) over (order by date_trunc('day', block_time)) as total_liq \nFROM makermcd.\"CAT_evt_Bite\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE p.symbol = 'SAI'\nGROUP BY 1\nORDER BY 1 desc\n),\n\ntotal_income AS \n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(wad/1e18*p.price) as total,\nsum(sum(wad/1e18*p.price)) over (order by date_trunc('day', block_time)) as all_time_total\nFROM maker.\"MKR_evt_Transfer\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE m.dst = '\\x69076e44a9C70a67D5b79d95795Aba299083c275' AND p.symbol = 'MKR'\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT\ntotal_income.day as day,\nsum(liq/total*100) as liq_percent_daily,\nsum(total_liq/all_time_total*100) as liq_percent_alltime\nFROM total_income\nFULL OUTER JOIN liq_income l ON total_income.day = l.day\nWHERE total_income.day > '11/18/19'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 90"}
{"prompt": "This query returns the day, transaction hash, and number of owners for all Safev1.0.0_call_setup transactions where the number of owners is less than 3 or greater than 4, ordered by day descending.", "completion": " SELECT block_time::date as day, safe.call_tx_hash, array_length(_owners, 1) as ownernumber\nFROM gnosis_safe.\"Safev1.0.0_call_setup\" safe\nINNER JOIN ethereum.transactions tx ON safe.call_tx_hash = tx.hash\nWHERE array_length(_owners, 1) < 3 or array_length(_owners, 1) > 4\norder by day desc\nLIMIT 1000"}
{"prompt": "This is a SQL query that calculates the total fees paid by takers on the 0x protocol over the past 30 days, broken down by day. The fees are calculated in US dollars, using the price of Ethereum at the time of the transaction.", "completion": " WITH v3_fees AS\n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(\"gas_price\"/1e18*120000*p.price) as v3_fees_paid \nFROM ethereum.\"transactions\"\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE \"to\" = '\\x61935cbdd02287b511119ddb11aeb42f1593b7ef' and p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 30\n),\n\nv2_fees AS\n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(\"gas_price\"/1e18*120000*p.price) as v2_fees_paid \nFROM ethereum.\"transactions\"\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE \"to\" = '\\x4f833a24e1f95d70f028921e27040ca56e09ab0b' and p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 30\n), \n\nv21_fees AS \n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(\"gas_price\"/1e18*120000*p.price) as v21_fees_paid \nFROM ethereum.\"transactions\"\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE \"to\" = '\\x080bf510fcbf18b91105470639e9561022937712' and p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 30\n) \n\nSELECT \nv3_fees.day as day, \nsum('v3_fees_paid')+sum('v2_fees_paid')+sum('v21_fees_paid') as fees\nFROM v3_fees\nLEFT JOIN v2_fees ON v3_fees.day = v2_fees.day\nLEFT JOIN v21_fees ON v3_fees.day = v21_fees.day\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 30\n"}
{"prompt": "This SQL query returns the number of unique Merkle Miner transactions that took place during Livepeer's initial distribution period. It also returns the total number of transactions and the day on which they occurred.", "completion": " /* Get the number of unique Merkle Miner transactions during Livepeer's initial distribution */\n\nSELECT COUNT(tx.\"from\"), COUNT(distinct tx.\"from\"), DATE_TRUNC('day', tx.\"block_time\") AS day\nfrom ethereum.transactions tx\nwhere tx.\"to\" = '\\x8e306b005773bee6ba6a6e8972bc79d766cc15c8'\n   and block_time >= '2018-07-15'\n   AND block_time <= '2018-10-3'\n \n\ngroup by day\n\n/*  and substring(data,1,4) = '\\x188f9b5b' */\n\n/*  and substring(data,1,4) = '\\x188f9b5b' */"}
{"prompt": "This SQL query returns the number of liquidations that occurred on the Compound v2 platform in the past 50 weeks, grouped by week.", "completion": " SELECT\ndate_trunc('week', block_time) week,\ncount(\"call_tx_hash\") as liquidations\nFROM compound_v2.\"cEther_call_liquidateBorrow\" s\nLEFT JOIN ethereum.\"transactions\" tx on s.call_tx_hash = tx.hash\nWHERE call_success = true\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50\n"}
{"prompt": "The SQL query below returns the total number of distinct DAI senders.", "completion": " SELECT \n\nCOUNT(DISTINCT src) AS senders\n             \n      FROM makermcd.\"DAI_evt_Transfer\" t\n      "}
{"prompt": "This query returns the total Kyber USD volume for each day over the past year. It does this by first getting all transactions from the Ethereum blockchain from the past year. It then gets the price of ETH for each minute in that same time period. Next, it gets the Kyber fee data for each trade. It then calculates the Kyber USD volume for each day by summing up the ETH volume for each trade and multiplying it by the ETH price for that day.", "completion": " -- Forked from Query https://explore.duneanalytics.com/queries/592/source#1087\n\nWITH txs AS (\n    SELECT hash, date_trunc('minute', block_time) as minute, date_trunc('day', block_time ) as day\n    FROM ethereum.transactions\n    WHERE block_time > date_trunc('day', now()) - interval '365 days'\n    AND block_time < date_trunc('day', now())\n), price AS (\n   SELECT * FROM prices.usd\n   WHERE minute > date_trunc('day', now()) - interval '365 days'\n   AND minute < date_trunc('day', now())\n   AND symbol = 'ETH'),\n kyber_fee_mapping AS (\n    SELECT evt_tx_hash,\n        evt_index,\n        \"ethWeiValue\" /1e18 AS value,\n        (SELECT count(*)\n         FROM kyber.\"FeeBurner_evt_AssignBurnFees\"\n         WHERE evt_tx_hash = trade.evt_tx_hash\n         AND evt_index < trade.evt_index) AS burnFees\n    FROM kyber.\"Network_evt_KyberTrade\" trade\n), kyber_intermediate_volume AS (\n    SELECT evt_tx_hash, (value * (burnFees - lag(burnFees, '1', '0') OVER (PARTITION BY evt_tx_hash ORDER BY evt_index))) AS ethvolume\n    FROM kyber_fee_mapping f\n    ORDER BY evt_tx_hash\n), kyber_volume AS (\n    SELECT evt_tx_hash, SUM(ethvolume) as sumeth\n    FROM kyber_intermediate_volume\n    GROUP BY 1\n), kyber AS (\n    SELECT day, SUM(sumeth * p.price) AS kyber_usd_volume\n    FROM txs \n    INNER JOIN kyber_volume ON kyber_volume.evt_tx_hash = txs.hash\n    INNER JOIN price p ON txs.minute = p.minute\n    WHERE p.symbol = 'ETH'\n    GROUP BY 1)\nSELECT day,\n       usd_volume\nFROM kyber"}
{"prompt": "This query returns the number of distinct transactions made by the CDP Saver to the MCD each week, where the transaction has a negative dink value (indicating that value was removed from the CDP).", "completion": " WITH defi_saver_mcd_txns AS (\n    SELECT\n        tx.*\n    FROM\n        ethereum.transactions tx\n    WHERE tx.to = '\\xdf0852e681f16ce1a03e9cae5b2c7f26f719d971'\n),\ndefi_saver_mcd_frobs AS (\n    SELECT\n        saver_txns.*\n        , frobs.*\n        , CASE WHEN frobs.call_tx_hash IS NOT NULL THEN true ELSE false END as has_vat_frob\n    FROM\n        defi_saver_mcd_txns saver_txns\n    LEFT JOIN makermcd.\"VAT_call_frob\" frobs\n    ON saver_txns.hash = frobs.call_tx_hash\n)\n\nSELECT\n    date_trunc('week', block_time) as week\n    , COUNT(DISTINCT hash)\nFROM defi_saver_scp_manager_frobs\nWHERE has_vat_frob = true\nAND dink < 0\nGROUP BY 1"}
{"prompt": "This SQL query returns the total amount of liquidity added to the compound.curve.fi platform on a daily basis. The data is grouped by day, and the maximum value for each day is returned.", "completion": " select date_trunc('day', block_time) AS day, max((token_supply/1e18)) from curvefi.\"compound_v2_evt_AddLiquidity\" csa\nLEFT JOIN ethereum.\"transactions\" tx ON csa.evt_tx_hash = tx.hash group by 1"}
{"prompt": "This query returns the total number of successful Uniswap exchanges.", "completion": " SELECT COUNT(call_success) as \"Total Uniswap Exchanges\"\nFROM uniswap.\"Factory_call_createExchange\"\nWHERE call_success = TRUE"}
{"prompt": "This SQL query selects the value '1' if there exists a row in the table 'DAT_evt_StateChange' for the given contract address where the value of '_newState' is the highest value, and '0' otherwise.", "completion": " SELECT CASE\n           WHEN EXISTS\n                  (SELECT \"_newState\"\n                   FROM fairmint.\"DAT_evt_StateChange\"\n                   WHERE contract_address = '\\x{{ contract_address }}'\n                   ORDER BY \"_newState\" DESC\n                   LIMIT 1) THEN 1\n           ELSE 0\n       END AS state"}
{"prompt": "This SQL query returns the date, sender, and amount of Pool3_evt_SponsorshipDeposited events from the pooltogether_v2 table, grouped by day and sender. It also returns the sum of all amounts for each day.", "completion": " SELECT\ndate_trunc('day', block_time),\nsender, amount/1e18 FROM pooltogether_v2.\"Pool3_evt_SponsorshipDeposited\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1,2,3 \nORDER BY 1 desc\nLIMIT 10\n\nSELECT\nsum(amount/1e18) FROM pooltogether_v2.\"Pool3_evt_SponsorshipDeposited\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1,2,3 \nORDER BY 1 desc\nLIMIT 10\n\nSELECT * FROM pooltogether_v2.\"Pool3_evt_Withdrawn\"\nWHERE \"sender\" = 'b7896fce748396ecfc240f5a0d3cc92ca42d7d84' \nOR 'a5c3a513645a9a00cb561fed40438e9dfe0d6a69'\nOR 'f5276a7166cfda0d68b257e27c7c8bb2e5852e91'\nOR 'x98ea2d8438f70ce876c2db26fc494cfed10b4cd7'\nLIMIT 10\n\nSELECT\ndate_trunc('day', block_time) as day,\nsum(e.\"value\"/1e18)\nFROM erc20.\"ERC20_evt_Transfer\" e\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nWHERE e.\"to\" != '0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643'\nGROUP BY 1 \nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This query returns the block time, gas price, gas used, transaction hash, and number of requests for each transaction in the loopring_transactions table.", "completion": " WITH loopring_transactions AS(\nSELECT call_tx_hash as tx_hash, b.\"blockSize\" as num_requests\nFROM loopring.\"ExchangeV3_call_commitBlock\" b\nUNION ALL\nSELECT call_tx_hash as tx_hash, 0 as num_requests\nFROM loopring.\"ExchangeV3_call_verifyBlocks\"\n)\nSELECT tx.block_time AS \"block_time\",\n       tx.gas_price AS \"gas_price\",\n       (SELECT r.gas_used FROM ethereum.receipts r WHERE r.tx_hash = b.tx_hash LIMIT 1) AS \"gas_used\",\n       b.tx_hash AS \"tx_hash\",\n       b.num_requests AS \"num_requests\"\nFROM loopring_transactions b\nLEFT JOIN ethereum.transactions tx ON tx.hash = b.tx_hash;\n"}
{"prompt": "The query returns the sum of the amounts in the pool3_evt_sponsorshipdeposited table, limited to 10.", "completion": " SELECT sum(amount/1e18) FROM pooltogether_v2.\"Pool3_evt_SponsorshipDeposited\"\nLIMIT 10"}
{"prompt": "This query returns a list of the top 100 MKR holders who have locked their MKR using the DSChief contract, along with the relevant transaction information.", "completion": " select e.from, l.call_tx_hash, l.contract_address, l.wad/1e18 as mkr from maker.\"DSChief_call_lock\" as l, ethereum.\"transactions\" as e\nwhere l.call_tx_hash = e.hash and\n      l.call_success = true\norder by mkr desc\nlimit 100"}
{"prompt": "This SQL query is for finding the balance of DAI in the Uniswap protocol. The query looks at the 'Exchange_evt_AddLiquidity' and 'Exchange_evt_RemoveLiquidity' events to calculate the total amount of DAI added or removed from the protocol each day. It then uses a 'LEFT JOIN' to match up each day from the 'dai_add' table with the corresponding day from the 'dai_rem' table. Finally, it calculates the balance of DAI for each day by subtracting the total amount of DAI removed from the total amount of DAI added.", "completion": " WITH dai_add AS (\n    SELECT date_trunc('day', tx.block_time) as date_dai,\n           s.symbol as market,\n           SUM(eth_amount/1e18) as sum_add_liq,\n           SUM(SUM(eth_amount/1e18)) OVER(ORDER BY date_trunc('day', tx.block_time) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as running_sum_add_liq\n    FROM uniswap.\"Exchange_evt_AddLiquidity\" AS add_liq\n    INNER JOIN ethereum.transactions tx ON add_liq.tx_hash = tx.hash\n    INNER JOIN uniswap.\"Factory_evt_NewExchange\" f ON add_liq.address = f.exchange\n    INNER JOIN coincap.\"symbols\" s ON f.token = s.asset\n    GROUP BY 1, 2\n    HAVING s.symbol = 'DAI'\n    ORDER BY 1 DESC),\n    \n\ndai_rem AS (\n    SELECT date_trunc('day', tx.block_time) as date_dai,\n           s.symbol as market,\n           SUM(eth_amount / 1e18) as sum_rem_liq,\n           SUM(SUM(eth_amount/1e18)) OVER(ORDER BY date_trunc('day', tx.block_time) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as running_sum_rem_liq\n    FROM uniswap.\"Exchange_evt_RemoveLiquidity\" AS rem_liq\n    INNER JOIN ethereum.transactions tx ON rem_liq.tx_hash = tx.hash\n    INNER JOIN uniswap.\"Factory_evt_NewExchange\" f ON rem_liq.address = f.exchange\n    INNER JOIN coincap.\"symbols\" s ON f.token = s.asset\n    GROUP BY 1, 2\n    HAVING s.symbol = 'DAI'\n    ORDER BY 1 DESC)\n\n\n--SELECT   \n/*final_t AS (\nSELECT date_dai,\n       market,\n       sum_add_liq, running_sum_add_liq,\n       sum_rem_liq, running_sum_rem_liq\nFROM dai_add\nLEFT JOIN dai_rem ON dai_add.date_dai = dai_rem.date_dai )*/\n\nSELECT date_dai, dai_add.market,\n       sum_add_liq, running_sum_add_liq,\n       sum_rem_liq, running_sum_rem_liq,\n       running_sum_add_liq - running_sum_rem_liq AS balance\nFROM dai_add\nLEFT JOIN dai_rem USING(date_dai)\n\n\n"}
{"prompt": "This SQL query returns the following information:\n\n- The \"from\" field of the transaction\n- The block time of the transaction\n- The block number of the transaction\n- The \"spell\" field of the DSChief_call_lift table\n- The \"call_success\" field of the DSChief_call_lift table\n- The \"call_tx_hash\" field of the DSChief_call_lift table", "completion": " select t.from, t.block_time, t.block_number, l.whom as spell, l.call_success, l.call_tx_hash from maker.\"DSChief_call_lift\" as l, ethereum.\"transactions\" as t\nwhere l.call_tx_hash = t.hash"}
{"prompt": "This SQL query returns the makerToken and the sum of the makerAmount in ETH for all Exchange_evt_Filled events.", "completion": " SELECT \"makerToken\", SUM(\"makerAmount\"/1e18) FROM airswap.\"Exchange_evt_Filled\" GROUP BY 1"}
{"prompt": "This SQL query retrieves data on the number of liquidations that have occurred on the Compound v2 platform, as well as the amount of collateral that has been liquidated, over the course of the past 100 days. The data is grouped by day, in descending order, with the most recent days appearing first.", "completion": " WITH collateral_liquidated AS\n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(\"seizeTokens\"/1e13*p.price) as collateral_liquidated_usd FROM compound_v2.\"cErc20_evt_LiquidateBorrow\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 100\n),\n\nliquidations AS\n(\nSELECT\ndate_trunc('day', block_time) as day,\ncount(\"call_tx_hash\") as liquidations\nFROM compound_v2.\"cEther_call_liquidateBorrow\" s\nLEFT JOIN ethereum.\"transactions\" tx on s.call_tx_hash = tx.hash\nWHERE call_success = true\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 100\n)\n\nSELECT collateral_liquidated.\"day\", sum(\"collateral_liquidated_usd\") as collateral_liquidated_usd, sum(\"liquidations\") number_of_liquidations\nFROM collateral_liquidated\nLEFT JOIN  liquidations ON collateral_liquidated.day = liquidations.day\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 100"}
{"prompt": "This query returns the date, amount, and number of transactions for each day. Transactions are grouped by value and date. Only transactions with a value greater than 0 are included. The results are ordered by date.", "completion": " SELECT \n    date_trunc('day', tx.block_time) as date, \n    tx.value / 1e18 as amount, \n    count(*) as count\nFROM tornado_cash.\"eth_evt_Deposit\" e\nLEFT JOIN ethereum.transactions tx ON tx.hash = e.evt_tx_hash\n-- WHERE tx.value > 0\nGROUP BY tx.value, date\nORDER BY date;"}
{"prompt": "This query returns the total revenue for MKR over time in USD. It includes both the burns from MCD and SCD.", "completion": " WITH MCD as\n(\nSELECT\ndate_trunc('day', block_time) as day,\navg(p.price) as MKR_price,\nsum(e.value/1e18*p.price) AS \"MCD_burn\"\nFROM erc20.\"ERC20_evt_Transfer\" e\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE e.\"to\" = '\\xdfE0fb1bE2a52CDBf8FB962D5701d7fd0902db9f'\nand p.symbol = 'MKR'\nGROUP BY 1 \nORDER BY 1 desc\n),\n\nSCD as \n(\nSELECT\ndate_trunc('day', block_time) AS day,\nsum(wad/1e18*p.price) as \"SCD_burns\" ----SCD burn----\nFROM maker.\"MKR_evt_Transfer\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE m.dst = '\\x69076e44a9C70a67D5b79d95795Aba299083c275' \nAND p.symbol = 'MKR'\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT SCD.day,\nsum(coalesce(\"MCD_burn\",0)+\"SCD_burns\") as MKR_rev,\nsum(sum(coalesce(\"MCD_burn\",0)+\"SCD_burns\")) over (order by SCD.day) as all_time_MKR_rev,\navg(p.price) as MKR_price\nFROM SCD\nFULL OUTER JOIN MCD ON SCD.day = MCD.day\nINNER JOIN prices.usd p ON p.minute = SCD.day\nWHERE p.symbol = 'MKR'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 400"}
{"prompt": "This SQL query returns the sum of all unbonded Livepeer tokens per week, based on the block time of each transaction.", "completion": " SELECT\ndate_trunc('week', tx.block_time),\nSUM(\"amount\"/1e18) AS unbonded\nFROM livepeer.\"BondingManager_evt_Unbond\" s --Replace with relevant event\nLEFT JOIN ethereum.transactions tx ON tx.hash = s.evt_tx_hash\nGROUP BY 1;"}
{"prompt": "This query returns the number of Loopring blocks that have been verified.", "completion": " SELECT COUNT(*)\nFROM loopring.\"DEXBetaV1_evt_BlockVerified\" b"}
{"prompt": "This query will return the number of cryptokitties births.", "completion": " SELECT COUNT(*) FROM cryptokitties.\"KittyCore_evt_Birth\""}
{"prompt": "This SQL query returns the top 10 players by entry in the DAI Pool.", "completion": " SELECT\ndistinct(sender) as player, sum(amount/1e18) as entry\nFROM pooltogether.\"MCDAwarePool_evt_Deposited\"\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 10\n"}
{"prompt": "This SQL query returns the balance of Dai for a given address. The balance is calculated by subtracting the amount of Dai sent from the amount of Dai received.", "completion": " WITH outbound AS\n  (SELECT \"src\",\n          SUM(wad/1e18) amt\n   FROM maker.\"SAI_evt_Transfer\"\n   WHERE src = '\\xE1149BA1477d81dE13af598efFf1DaeA364f452a'\n   GROUP BY 1\n   ),\n     inbound AS\n  (SELECT \"dst\",\n          SUM(wad/1e18) amt\n   FROM maker.\"SAI_evt_Transfer\"\n   WHERE \"dst\" = '\\xE1149BA1477d81dE13af598efFf1DaeA364f452a'\n   GROUP BY 1)\nSELECT inbound.\"dst\",\n       CASE\n           WHEN outbound.amt IS NULL THEN inbound.amt\n           ELSE inbound.amt - outbound.amt\n       END AS balance\nFROM inbound\nLEFT JOIN outbound ON outbound.\"src\" = inbound.\"dst\"\nORDER BY balance DESC;"}
{"prompt": "This query retrieves the total volume of Dai deposited in the past 7 days, grouped by day. The volume is calculated by multiplying the amount of Dai deposited by the price of Dai in USDT.", "completion": " SELECT date_trunc('days', tx.block_time) AS Date,\n      SUM(amount/1e18*p.price) AS volume\nFROM (\n     select call_tx_hash,amount,asset_address from (\n\t\tselect \n\t\t  cast(subactions->>'actionType' as integer) as action_type,\n\t\t  substring((subactions->'encodedParams')::text, 28, 40) as asset_address,\n\t\t  hex2numeric(substring((subactions->'encodedParams')::text, 68, 64)) as amount,\n\t\t  call_tx_hash\n\t\t from (select  jsonb_array_elements(actions) as subactions, call_tx_hash from hydroprotocol.\"Margin_call_batch\") a ) b where b.action_type = 5 and asset_address = '6b175474e89094c44da98b954eedeac495271d0f'\n    ) deposits\nINNER JOIN\n     (SELECT hash,\n             block_time\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '7 days'\n        AND block_time < date_trunc('day', NOW())) tx ON deposits.call_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'USDT'\nGROUP BY 1\nORDER by 1"}
{"prompt": "This query returns data about trades that have occurred on the Gnosis Protocol BatchExchange, including information about the tokens traded, the amounts traded, the price of the trade, the trader involved, and a link to the transaction on Etherscan.", "completion": " SELECT\n    solution.\"batchId\",\n    transactions.\"block_time\", \n    trades.\"orderId\",\n    sell_token.\"symbol\" as \"sellToken\",\n    buy_token.\"symbol\" as \"buyToken\",\n    sell_token.\"token\" as \"sellTokenAddress\",\n    buy_token.\"token\" as \"buyTokenAddress\",\n    \"executedSellAmount\"/10^(sell_token.\"decimals\") as \"sellAmount\",\n    \"executedBuyAmount\"/10^(buy_token.\"decimals\") as \"buyAmount\",\n    ((\"executedBuyAmount\"/10^(buy_token.\"decimals\"))/(\"executedSellAmount\"/10^(sell_token.\"decimals\"))) as Price,\n    CONCAT('0x', ENCODE(trades.\"owner\", 'hex')) as trader,\n    CONCAT('https://etherscan.io/tx/','0x', ENCODE(trades.\"evt_tx_hash\", 'hex')) as Solution_tx_Link\nFROM gnosis_protocol.\"BatchExchange_evt_Trade\" trades\nJOIN gnosis_protocol.\"view_tokens\" buy_token\n    ON trades.\"buyToken\" = buy_token.\"token_id\"\nJOIN gnosis_protocol.\"view_tokens\" sell_token\n    ON trades.\"sellToken\" = sell_token.\"token_id\"\nJOIN ethereum.\"transactions\" transactions\n    ON transactions.hash = trades.evt_tx_hash\n    AND transactions.success = true\nJOIN gnosis_protocol.\"BatchExchange_call_submitSolution\" solution\n    ON solution.call_tx_hash=transactions.hash\n--JOIN gnosis_protocol.\"BatchExchange_evt_OrderPlacement\" orders\n--    ON orders.index=trades.\"orderId\"\n--    AND orders.owner=trades.owner\nWHERE \n    0=0\n    -- AND trades.\"buyToken\" = 15\n    AND buy_token.\"symbol\" = 'SNX'\n    -- \nORDER BY \"block_time\" desc;"}
{"prompt": "This query returns the number of transactions made by a specific Ethereum address, per week.", "completion": " with alltransactions\nAS (\n\nSELECT \n    block_time, \n    success, \n    gas_price/10^9 AS gas_prices, \n    gas_used,\n    (gas_price*gas_used)/10^18 AS eth_paid_for_tx,\n    hash\nFROM ethereum.transactions\nWHERE \"from\" = CONCAT('\\x', substring('{{1. Eth Address}}' from 3))::bytea\nAND block_time >= '{{2. Start Date}}'\nAND block_time < '{{3. End Date}}')\n\nSELECT\n    date_trunc('week', block_time),\n    COUNT(block_time) as \"# of Transactions per Week\"\nFROM alltransactions \nGROUP BY 1"}
{"prompt": "What is the sum of all USD amounts for all trades where the fill status is true?", "completion": " select sum(usd_amount)\nfrom hashflow.trades\nwhere fill_status is true\n"}
{"prompt": "This SQL query returns the total amount of ETH stored in Gnosis Safe contracts over time. The query first looks at all the delegate calls made to the master copy of the contracts (the \"Safe\" address) and then looks at all the ETH transfers made to and from those addresses. Finally, it sums up the ETH balance for each week.", "completion": " with safes as (\n    select distinct\n    \tet.from as address\n    from ethereum.traces et \n    where et.tx_success = True\n        AND left(text(et.\"input\"),10) in ('\\x0ec78d9e', '\\xa97ab18a', '\\xb63e800d') -- setup methods of v0.1.0, v1.0.0, v1.1.0\n        AND et.call_type = 'delegatecall' -- the delegate call to the master copy is the Safe address\n        AND et.to in ('\\x8942595A2dC5181Df0465AF0D7be08c8f23C93af', '\\xb6029ea3b2c51d09a50b53ca8012feeb05bda35a', '\\xaE32496491b53841efb51829d6f886387708F99B') -- mastercopy address v0.1.0, v1.0.0, v1.1.0       \n),\nperweek AS (\nSELECT \"week\", Sum(amount) as amount\nFROM (\n    SELECT date_trunc('week', \"block_time\") AS \"week\", \"from\" AS address, -value AS amount\n     FROM ethereum.traces\n     WHERE \"from\" IN (SELECT address FROM safes)\n     AND tx_success = TRUE\n     AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\nUNION ALL\n    SELECT date_trunc('week', \"block_time\") AS \"week\", \"to\" AS address, value AS amount\n     FROM ethereum.traces\n     WHERE \"to\" IN (SELECT address FROM safes )\n     AND tx_success = TRUE\n     AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n) t\nGROUP BY 1\nORDER BY 1 asc\n\n)\nSELECT \"week\",  sum(amount/1e18) over (order by \"week\" asc rows between unbounded preceding and current row) as eth_balance FROM perweek"}
{"prompt": "This SQL query returns the total emission and transaction fees for each month.", "completion": " -- EXPLAIN ANALYZE\n-- SELECT\n--     date_trunc('month', r.block_time) as time,\n--     SUM(CASE WHEN t.\"block_number\" < 7280000 THEN 3e18 ELSE 2e18 END) as emission,\n--     SUM(r.gas_used * t.gas_price) as comission\n-- FROM ethereum.\"transactions\" t\n-- LEFT JOIN ethereum.\"receipts\" r ON t.hash = r.tx_hash\n-- --WHERE t.block_time > '2019-09-01' --'1970-01-01'\n-- GROUP BY 1\n-- ORDER BY 1 DESC\n\n--EXPLAIN ANALYZE\nSELECT\n    date_trunc('month', b.time) as time,\n    SUM(CASE WHEN b.\"number\" < 7280000 THEN 3e18 ELSE 2e18 END)/1e18 as emission,\n    SUM(r.gas_used * t.gas_price) as tx_fee\nFROM ethereum.\"blocks\" b\nLEFT JOIN ethereum.\"transactions\" t ON t.block_number = b.number\nLEFT JOIN ethereum.\"receipts\" r ON r.block_number = b.\"number\" AND r.tx_hash = t.hash \nGROUP BY 1\nORDER BY 1 DESC\n\n-- SELECT\n--     b.time as time,\n--     SUM(CASE WHEN b.\"number\" < 7280000 THEN 3e18 ELSE 2e18 END) as emission,\n--     (\n--         SELECT SUM(r.gas_used * t.gas_price) FROM ethereum.\"transactions\" t\n--         LEFT JOIN ethereum.\"receipts\" r ON t.hash = r.tx_hash\n--         WHERE date_trunc('month', t.block_time) = b.time\n--     ) as comission\n-- FROM (SELECT DISTINCT date_trunc('month', bb.time) as time, \"number\" FROM ethereum.blocks bb ORDER BY 1 DESC) b\n-- WHERE b.time > '2019-09-01' --'1970-01-01'\n\n-- GROUP BY 1\n-- ORDER BY 1 DESC\n\n"}
{"prompt": "This query returns the number of unique Wyvern Registry v2 Proxy contracts created each day, cumulative.", "completion": " SELECT tx.date, SUM(COUNT(DISTINCT tx.hash)) OVER (\n                            ORDER BY tx.date ROWS unbounded preceding) AS COUNT\nFROM\n  (SELECT date_trunc('day', block_time) AS date,\n          \"hash\",\n          \"to\",\n          \"data\",\n          \"success\"\n   FROM ethereum.\"transactions\") AS tx\nWHERE tx.\"to\" = '\\xa5409ec958C83C3f309868babACA7c86DCB077c1'\n  AND tx.\"data\" = '\\xddd81f82'\n  AND tx.\"success\" = TRUE\nGROUP BY date\nORDER BY date DESC;"}
{"prompt": "This SQL query returns the number of Erasure Agreements that have been registered.", "completion": " SELECT COUNT(d.\"contract_address\") AS num_agreements\nFROM numerai.\"Erasure_Agreements_evt_InstanceRegistered\" d"}
{"prompt": "This SQL query returns a list of all Argent wallet addresses, along with the block number on which they were created.", "completion": " /* the addresses of all Argent based wallets */\nSELECT DISTINCT substring(tr.input::bytea\n                          FROM 17\n                          FOR 32) AS addr,\n                tr.block_number as created_on_block_number\nFROM ethereum.transactions tx\nLEFT JOIN ethereum.traces tr ON tx.\"hash\" = tr.tx_hash\nWHERE tx.\"to\" = '\\x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020' -- Argent wallet creator\n  AND substring(tx.\"data\"::bytea\n                FROM 0\n                FOR 5) = '\\xaff18575' -- createWallet() method\n\n  AND substring(tr.\"input\"::bytea\n                FROM 0\n                FOR 5) = '\\x19ab453c' -- init() method\nORDER BY tr.block_number ASC"}
{"prompt": "This SQL query returns the average price and total volume of NFTs minted in a given month. The query ignore NFTs from Uniswap and Ethereum Name Service, and also ignore transactions with a value of 0.", "completion": " -- ignore uniswap NFTs\nWITH\n  contracts_to_ignore AS (\n    SELECT\n      DISTINCT address as address\n    FROM\n      ethereum.contracts\n    WHERE\n      INITCAP(namespace) = 'Uniswap_v3'\n      OR INITCAP(namespace) = 'Ethereumnameservice'\n      OR address IN ('\\x687f506a6c55497e59819d9b36a3cf39c32bbc97', '\\xc36442b4a4522e871399cd717abdd847ab11fe88', '\\x58a3c68e2d3aaf316239c003779f71acb870ee47', '\\x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85')\n  ) --mint events\n,\n  mints AS (\n    SELECT\n      evt_tx_hash,\n      contract_address\n    FROM\n      erc721.\"ERC721_evt_Transfer\" erc\n    WHERE\n      erc.\"from\" = '\\x0000000000000000000000000000000000000000'\n      AND erc.\"to\" <> '\\x0000000000000000000000000000000000000000'\n      AND contract_address NOT IN (\n        SELECT\n          address\n        FROM\n          contracts_to_ignore\n      )\n      AND contract_address NOT IN ('\\x687f506a6c55497e59819d9b36a3cf39c32bbc97', '\\xc36442b4a4522e871399cd717abdd847ab11fe88', '\\x58a3c68e2d3aaf316239c003779f71acb870ee47', '\\x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85')\n      AND erc.evt_block_time >= TIMESTAMP '2022-8-01 00:00:00'\n      AND erc.evt_block_time < TIMESTAMP '2022-9-01 00:00:00'\n  ) -- need to deduplicate mint transactions\n,\n  mint_txns AS (\n    SELECT\n      MIN(t.block_time) as block_time,\n      evt_tx_hash,\n      AVG(t.value / 1e18) AS total_spent,\n      contract_address\n    FROM\n      ethereum.transactions t\n      INNER JOIN mints ON t.hash = mints.evt_tx_hash --WHERE evt_tx_hash = '\\x7e565ca881496085f27a56edf6d247e2dc70c4e3c535fe6446a1e04d8145648d'\n    WHERE\n      t.value > 0 AND\n      t.block_time >= TIMESTAMP '2022-8-01 00:00:00' AND\n      t.block_time < TIMESTAMP '2022-9-01 00:00:00'\n    GROUP BY\n      evt_tx_hash,\n      contract_address --ORDER BY RANDOM()\n  ) --mint vol each month\n/*SELECT\n    contract_address, sum(total_spent) as ts\nFROM mint_txns\nGROUP BY contract_address\nORDER BY ts DESC*/\nSELECT\n  DATE_TRUNC('month', block_time) as timescale,\n  AVG(total_spent * 1606) as avg_mint_price,\n  SUM(total_spent * 1606) / 1E6 as total_mint_volume \nFROM\n  mint_txns\nGROUP BY\n  timescale\nORDER BY\n  timescale DESC, total_mint_volume DESC\n"}
{"prompt": "This SQL query returns a list of all numbers from 1 to 100, along with the corresponding numbers from 1 to 3.", "completion": " SELECT a.n\nfrom generate_series(1, 100) as a(n), generate_series(1, 3)"}
{"prompt": "This is a SQL query that counting the number of transactions made to a certain address, grouped by hour, in order of when the transaction was made.", "completion": " WITH jobs AS\n  (SELECT date_trunc('hour', tx.block_time) AS hour,\n          *\n   FROM ethereum.transactions tx\n   WHERE tx.\"to\" = '\\xbf07ff45f14c9ff0571b9fbdc7e2b62d29931224'\n     AND substring(DATA,1,4) = '\\x7e69671a')\nSELECT COUNT(*),\n       hour\nFROM jobs\nGROUP BY hour\nORDER BY hour"}
{"prompt": "This query returns the total number of MakerDAO users over time. It does this by first counting the number of unique users per day, and then summing these values up over time.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(evt_block_time)) AS date,\n                lad AS account\n         FROM maker.\"SaiTub_evt_LogNewCup\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(block_time)) AS date,\n                      borrower\n         FROM lending.\"borrow\"\n         WHERE project='MakerDAO'\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "This query returns borrower, borrowAmount, accountBorrows, totalBorrows, contract_address, evt_tx_hash, and evt_index from the compound_v2.cErc20_evt_Borrow, compound_v2.cEther_evt_Borrow, and compound_v2.CErc20Delegator_evt_Borrow tables.", "completion": " select\n\"borrower\", \n\"borrowAmount\"\n\"accountBorrows\",\n\"totalBorrows\",\n\"contract_address\",\n\"evt_tx_hash\",\n\"evt_index\"\nfrom compound_v2.\"cErc20_evt_Borrow\" \n\nUNION ALL\n\nselect\n\"borrower\", \n\"borrowAmount\"\n\"accountBorrows\",\n\"totalBorrows\",\n\"contract_address\",\n\"evt_tx_hash\",\n\"evt_index\"\nfrom compound_v2.\"cEther_evt_Borrow\"\n\nUNION ALL\n\nselect\n\"borrower\", \n\"borrowAmount\"\n\"accountBorrows\",\n\"totalBorrows\",\n\"contract_address\",\n\"evt_tx_hash\",\n\"evt_index\"\nfrom compound_v2.\"CErc20Delegator_evt_Borrow\""}
{"prompt": "This SQL query calculates the cumulative net minting of WBTC over a period of time. It does this by subtracting the total burned WBTC from the total minted WBTC for each week.", "completion": " WITH mint AS\n(\nSELECT\ndate_trunc('week', block_time) as week,\nsum(\"amount\"/1e8) as wbtc_minted FROM wrappedbtc.\"WBTC_evt_Mint\" m\nLEFT JOIN ethereum.\"transactions\" tx on m.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50),\n\nburn AS \n(\nSELECT\ndate_trunc('week', block_time) as week,\nsum(b.\"value\"/1e8) as wbtc_burned FROM wrappedbtc.\"WBTC_evt_Burn\" b\nLEFT JOIN ethereum.\"transactions\" tx on b.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n),\n\ncum_mint AS\n(\nSELECT mint.\"week\", sum(sum(\"wbtc_minted\")) OVER (ORDER BY mint.\"week\") as cumul_mint\nFROM mint\nGROUP BY 1 \nORDER BY 1 desc\nLIMIT 50\n),\n\ncum_burn AS \n(SELECT burn.\"week\", sum(sum(\"wbtc_burned\")) OVER (ORDER BY burn.\"week\") as cumul_burn \nFROM burn\nGROUP BY 1 \nORDER BY 1 desc\nLIMIT 50\n)\n\nSELECT cum_mint.\"week\", sum(\"cumul_mint\")-sum(\"cumul_burn\") as wbtc_outstanding\nFROM cum_mint\nLEFT JOIN cum_burn ON cum_mint.week = cum_burn.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This query returns the gas used and gas limit per day for Ethereum, starting from 1970-01-01. The gas free is calculated as the gas limit minus the gas used. The utilization is calculated as the gas used divided by the gas limit.", "completion": " SELECT\n    date_trunc('day', time) as time,\n    SUM(gas_used) as gas_used,\n    SUM(CASE WHEN time > '2018-01-01' AND gas_used = 0 THEN 0 ELSE gas_limit END) as gas_limit,\n    SUM(CASE WHEN time > '2018-01-01' AND gas_used = 0 THEN 0 ELSE gas_limit END)-SUM(gas_used) as gas_free,\n    SUM(gas_used) / SUM(CASE WHEN time > '2018-01-01' AND gas_used = 0 THEN 0 ELSE gas_limit END) as utilization\nFROM ethereum.blocks\nWHERE time > '1970-01-01'\nGROUP BY 1\nORDER BY 1 DESC\n"}
{"prompt": "This SQL query will select the date, symbol, and sum of borrowAmountUSD from the compound_view_borrow table where the block_time is within the last 8 weeks. It will group the results by date and symbol, and order them by date.", "completion": " SELECT\ndate_trunc('week', block_time),\nsymbol,\nSUM(\"borrowAmountUSD\")\nFROM dune_user_generated.\"compound_view_borrow\"\nWHERE block_time > now() - interval '8 weeks' \nGROUP BY 1,2 \nORDER BY 1;\n\n-- See data table examples:\n--SELECT * FROM dune_user_generated.\"compound_view_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_borrow\" when format is decided\n--SELECT * FROM dune_user_generated.\"compound_view_repay_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_repay_borrow\" when format is decided"}
{"prompt": "This query returns the total number of users for each day.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', block_time) AS date,\n                trader_a AS account\n         FROM dex.trades\n         WHERE project = 'IDEX'\n         UNION SELECT date_trunc('day', block_time) AS date,\n                      trader_b AS account\n         FROM dex.trades\n         WHERE project = 'IDEX') AS table1\n      GROUP BY account) AS table2\n   GROUP BY date\n   ORDER BY date) AS table3"}
{"prompt": "This query returns the number of transactions associated with a Safe Contract, where the transaction is successful, and the input to the transaction matches the 'execTransaction' method for versions 0.1.0 through 1.3.0 of the Safe Contract.", "completion": " select count(et.tx_hash) as safe_transactions\nfrom ethereum.traces et\njoin gnosis_safe.view_safes s \n    on s.address = et.\"from\"\nwhere et.success = True \n    and substring(et.\"input\" for 4) = '\\x6a761202' -- execTransction method of v0.1.0, v1.0.0, v1.1.0, v1.1.1, v1.2.0, v1.3.0\n    AND et.call_type = 'delegatecall'\n\tAND et.to in (  -- mastercopies\n\t    '\\x8942595A2dC5181Df0465AF0D7be08c8f23C93af', -- 0.1.0\n\t    '\\xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A', -- 1.0.0\n\t    '\\xaE32496491b53841efb51829d6f886387708F99B', -- 1.1.0\n\t    '\\x34CfAC646f301356fAa8B21e94227e3583Fe3F5F', -- 1.1.1\n\t    '\\x6851d6fdfafd08c0295c392436245e5bc78b0185', -- 1.2.0\n\t    '\\xd9db270c1b5e3bd161e8c8503c55ceabee709552'  -- 1.3.0\n\t) "}
{"prompt": "This query returns a list of users who have dumped SuperRare tokens on the Ethereum blockchain since August 17, 2021. The query groups users by address and name, and orders them by the number of tokens they have dumped.", "completion": " WITH airdrop AS\n  (SELECT \"from\"\n   FROM ethereum.transactions\n   WHERE \"to\" = '\\x5474b3abF3E58A2b32F329F3633406a0d2941E6F'\n     AND block_time >=' 2021-08-17'),\n     duplicates AS\n  (SELECT tx_hash\n   FROM dex.trades\n   WHERE (token_a_address = '\\xba5bde662c17e2adff1075610382b9b691296350'\n          OR token_b_address = '\\xba5bde662c17e2adff1075610382b9b691296350')\n     AND trader_a in\n       (SELECT *\n        FROM airdrop)\n   GROUP BY 1\n   HAVING count(*) > 1)\nSELECT trader_a AS address,\n       name,\n       sum(CASE\n               WHEN token_b_address = '\\xba5bde662c17e2adff1075610382b9b691296350' THEN token_b_amount_raw\n               ELSE -token_a_amount_raw\n           END / 1e18) AS tokens\nFROM dex.trades\nINNER JOIN superrare.usernames ON trader_a = address\nAND (token_a_address = '\\xba5bde662c17e2adff1075610382b9b691296350'\n     OR token_b_address = '\\xba5bde662c17e2adff1075610382b9b691296350')\nAND block_time >= '2021-08-17'\nAND trader_a in\n  (SELECT *\n   FROM airdrop)\nAND (tx_hash not in\n       (SELECT *\n        FROM duplicates)\n     OR category != 'Aggregator')\nGROUP BY 1,\n         2\nORDER BY 3 DESC"}
{"prompt": "This table shows the net new cDAI minting and DAI redemption for each day. The minting and redemption data is pulled from the compoundv2 and ethereum databases, respectively. The table is ordered by DayTime in descending order.", "completion": " -- Table of the net new cDAI minting and DAI redemption\n\n\n    WITH mintemption AS (\n        SELECT sum(\"mintAmount\" / 1e18) AS mintDAI, date_trunc('day',tx.block_time) AS DayTime\n        FROM compoundv2.\"cErc20_evt_Mint\" minting FULL OUTER JOIN ethereum.transactions tx\n        ON minting.tx_hash = tx.hash\n        WHERE minting.address = '\\xf5dce57282a584d2746faf1593d3121fcac444dc'\n        GROUP BY 2\n\n    ), redemption AS ( \n        SELECT sum(\"redeemAmount\" / 1e18) AS redeemDAI, date_trunc('day', tx.block_time) AS DayTime\n        FROM compoundv2.\"cErc20_evt_Redeem\" redeeming FULL OUTER JOIN ethereum.transactions tx\n        ON redeeming.tx_hash = tx.hash\n        WHERE redeeming.address = '\\xf5dce57282a584d2746faf1593d3121fcac444dc'\n        GROUP BY 2\n    )\n  \n    SELECT mintemption.daytime, mintemption.mintdai, redemption.redeemdai, mintemption.mintdai - redemption.redeemdai AS net\n    FROM mintemption FULL OUTER JOIN redemption\n    ON mintemption.daytime = redemption.daytime\n    ORDER BY 1 DESC\n    \n    \n    \n    \n    \n    "}
{"prompt": "This query returns the total ETH stored in Monolith contracts, accumulated weekly over time.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x95BEBe7bfc6aCc186C13D055D0Aacc2DE5f81502','\\xb24d47364163f909e64cf2cf7788d22c51cea851', '\\x85bb8a852c29d8f100cb97ecdf4589086d1be2dd') -- Monolith deployers\n\t    and type = 'create'\n),\nperweek AS (\nSELECT \"week\", Sum(amount) as amount\nFROM (\n    SELECT date_trunc('week', \"block_time\") AS \"week\", \"from\" AS address, -value AS amount\n     FROM ethereum.traces\n     WHERE \"from\" IN (SELECT address FROM wallets)\n     AND tx_success = TRUE\n     AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n     and error is null  -- to make the db use an index\nUNION ALL\n    SELECT date_trunc('week', \"block_time\") AS \"week\", \"to\" AS address, value AS amount\n     FROM ethereum.traces\n     WHERE \"to\" IN (SELECT address FROM wallets )\n     AND tx_success = TRUE\n     AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n     and error is null  -- to make the db use an index\n) t\nGROUP BY 1\nORDER BY 1 asc\n\n)\nSELECT \"week\",  sum(amount/1e18) over (order by \"week\" asc rows between unbounded preceding and current row) as eth_balance FROM perweek"}
{"prompt": "This query returns the total USD value locked in the dxDAO smart contracts, broken down by token value and ETH value.", "completion": " WITH symbols (address, symbol) AS (VALUES \n    ('\\x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6'::bytea, 'RDN'),\n    ('\\x744d70fdbe2ba4cf95131626614a1763df805b9e'::bytea, 'SNT'),\n    ('\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'::bytea, 'DAI'),\n    ('\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'::bytea, 'MKR'),\n    ('\\xd26114cd6ee289accf82350c8d8487fedb8a0c07'::bytea, 'OMG'),\n    ('\\x6810e776880c02933d47db1b9fc05908e5386b96'::bytea, 'GNO'),\n    ('\\xdd974d5c2e2928dea5f71b9825b8b646686bd200'::bytea, 'KNC'),\n    ('\\x543ff227f64aa17ea132bf9886cab5db55dcaddf'::bytea, 'GEN'),\n    ('\\x985dd3d42de1e256d09e1c10f112bccb8015ad41'::bytea, 'OCEAN'),\n    ('\\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'::bytea, 'LRC'),\n    ('\\x8f8221afbb33998d8584a2b05749ba73c37a938a'::bytea, 'REQ')\n),\netherPrice AS (\n    SELECT average AS price\n    FROM coincap.\"tokens/usd\"\n    WHERE symbol='WETH'\n    ORDER BY time DESC\n    LIMIT 1\n),\netherValue AS (\n    SELECT  _token as token,\n            s.symbol,\n           SUM((_amount / 1e18) * (_numerator/_denominator)) as amount\n    FROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\" l\n    INNER JOIN dxdao.\"DxLockWhitelisted4Rep_evt_LockToken\" lt ON l.\"_lockingId\" = lt.\"_lockingId\"\n    LEFT JOIN symbols s ON lt._token = s.address \n    GROUP BY 1,2\n),\ntotal_token_value AS (\n    SELECT SUM(amount * price) as USD\n    FROM etherValue\n    INNER JOIN etherPrice\n    ON TRUE\n),\ntotal_ether_value AS (\n    SELECT sum(_amount / 1e18 * price) AS USD \n    FROM dxdao.\"DxLockEth4Rep_evt_Lock\"\n    INNER JOIN etherPrice\n    ON TRUE\n)\nSELECT t.USD as token_usd_value, e.USD as ether_usd_value, (t.USD + e.USD) as total_usd_value\nFROM total_token_value t\nINNER JOIN total_ether_value e\nON TRUE;"}
{"prompt": "This query returns the date, the number of distinct buyers, and the total amount of ETH bought on Uniswap for each day in the past week.", "completion": " WITH tx AS (SELECT hash, block_time FROM ethereum.\"transactions\" \nWHERE block_time > now() - interval '7 days')\n\nSELECT date_trunc('day', tx.block_time),\nCOUNT(DISTINCT buyer),\nSUM(eth_bought / 1e18)\nFROM uniswap.\"Exchange_evt_EthPurchase\" p\nINNER JOIN tx\nON tx.hash = p.tx_hash\nGROUP BY 1\n;"}
{"prompt": "This SQL query returns the sum of value/1e18 for each \"to\" address in the ethereum.transactions table where the \"to\" address is also present in the ethereum.traces table with a type of \"create\" and a tx_success value of TRUE and a code value of \"\\x\".", "completion": " SELECT sum(value/1e18) AS stuck_eth, \"to\"\nFROM ethereum.transactions\nWHERE \"to\" IN\n    (SELECT address\n     FROM ethereum.traces\n     WHERE type='create'\n       AND tx_success = TRUE\n       AND code = '\\x')\n       group by \"to\""}
{"prompt": "This query gets the total number of UMA tokens minted.", "completion": " -- This query gets all UMA tokens minted.\nSELECT SUM(value/1e18) tokenCount\nFROM umaproject.\"VotingToken_call_mint\" as mints "}
{"prompt": "This SQL query returns the sum of all ETH stored in Monolith contracts. The query first selects the block time and block number for each address associated with a Monolith contract, then calculates the sum of all ETH transferred to or from each contract address.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x95BEBe7bfc6aCc186C13D055D0Aacc2DE5f81502','\\xb24d47364163f909e64cf2cf7788d22c51cea851', '\\x85bb8a852c29d8f100cb97ecdf4589086d1be2dd') -- Monolith deployers\n\t    and type = 'create'\n),\nperaddress as (\n    SELECT address, sum(amount) / 1e18 as amount\n    FROM (\n        SELECT \"from\" AS address, -value AS amount\n         FROM ethereum.traces\n         WHERE \"from\" IN (SELECT address FROM wallets)\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    UNION ALL\n        SELECT \"to\" AS address, value AS amount\n         FROM ethereum.traces\n         WHERE \"to\" IN (SELECT address FROM wallets )\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    ) t\n    group by 1\n)\nselect sum(amount)\nfrom peraddress"}
{"prompt": "This SQL query returns the total volume of Dai and USDC exchanged on the Curve.fi platform, broken down by day.", "completion": " WITH base_info as (SELECT date_trunc('day', block_time) as day, *\r\nFROM curvefi.\"compound_v2_evt_TokenExchangeUnderlying\" e \r\nINNER JOIN ethereum.transactions txs ON txs.hash = e.evt_tx_hash)\r\nSELECT \r\nbase_info.day,\r\ncoalesce(SUM(CASE bought_id\r\nWHEN 0 THEN tokens_bought/1e18 END), 0) as dai,\r\ncoalesce(SUM(CASE bought_id\r\nWHEN 1 THEN tokens_bought/1e6 END), 0) as usdc,\r\nSUM(CASE bought_id\r\nWHEN 0 THEN tokens_bought/1e18\r\nWHEN 1 THEN tokens_bought/1e6\r\nEND) as volume \r\nFROM base_info\r\nGROUP BY day\r\n"}
{"prompt": "This SQL query selects the date and sum of the amount from the TrueFiPool_evt_Joined and TrueFiPool_evt_Exited tables, Union All selects the date and amount from the TrueFarm_evt_Stake and TrueFarm_evt_Unstake tables, and finally calculates the sum of the amount over time.", "completion": " SELECT date, sum(amount) OVER (\n                               ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS amount\nFROM\n  (SELECT evt_block_time AS date,\n          deposited / 1e18 AS amount\n   FROM truefi.\"TrueFiPool_evt_Joined\"\n   UNION ALL SELECT evt_block_time AS date, -amount / 1e18 AS amount\n   FROM truefi.\"TrueFiPool_evt_Exited\"\n   UNION ALL SELECT evt_block_time AS date,\n                    \"amountStaked\" / 1e18 AS amount\n   FROM truefi.\"TrueFarm_evt_Stake\"\n   UNION ALL SELECT evt_block_time AS date, -\"amountUnstaked\" / 1e18 AS amount\n   FROM truefi.\"TrueFarm_evt_Unstake\") a"}
{"prompt": "This SQL query returns the unique contract addresses associated with the \"Synth_evt_Transfer\" event in the \"Synthetix\" table.", "completion": " SELECT  DISTINCT contract_address \nFROM synthetix.\"Synth_evt_Transfer\"\n"}
{"prompt": "This query will return the event data for the KyberNetworkCrystal Transfer event.", "completion": " _value.kyber.\"KyberNetworkCrystal_evt_Transfer\""}
{"prompt": "This SQL query selects the date, symbol, and marketcap_usd from the coincap.trading_summary table for the symbols GUSD, USDT, DAI, USDC, PAX, and TUSD.", "completion": " select date_trunc('day', time), symbol, marketcap_usd from coincap.trading_summary WHERE symbol IN ('GUSD', 'USDT', 'DAI', 'USDC', 'PAX', 'TUSD');"}
{"prompt": "This query returns the number of Argent wallets created per day/month. The data is taken from the Ethereum blockchain and the price of ETH is averaged over the course of each week.", "completion": " /* the number of argent wallets created per day/month - createWallet is called on contract 0x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020 */\nSELECT date_trunc('week', t.block_time) AS date_week,\n       sum(1),\n       p.close as avg_eth_price\nFROM ethereum.transactions t\nINNER JOIN price.\"eth/usd\" p ON t.block_number = p.block_number\nWHERE \"to\" = '\\x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020'\n  AND substring(DATA, 0, 5) = '\\xaff18575'\nGROUP BY date_trunc('week', block_time), p.close\nORDER BY date_trunc('week', block_time) ASC"}
{"prompt": "This SQL query returns the total value of trades (in the quote asset) for each day, excluding trades involving BNB. The results are ordered by date, from earliest to latest.", "completion": " SELECT date(trade_time), sum(price*quantity), quote_asset from trades group by 1, 3 having quote_asset != 'BNB' order by 1 asc "}
{"prompt": "This query returns the value, sender, recipient, hash, and block hash for the top 100 Ethereum transactions, ordered by value.", "completion": " SELECT value/1e18 AS value, \"from\", \"to\", hash, block_hash \nFROM ethereum.transactions\nORDER BY value desc\nLIMIT 100"}
{"prompt": "This query returns the total number of users of the Compound platform over time. It does this by first counting the number of unique users for each day, and then summing those values up over time.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(evt_block_time)) AS date,\n                minter AS account\n         FROM compound_v2.\"cErc20_evt_Mint\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      borrower AS account\n         FROM compound_v2.\"cErc20_evt_Borrow\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      minter AS account\n         FROM compound_v2.\"cEther_evt_Mint\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      borrower AS account\n         FROM compound_v2.\"cEther_evt_Borrow\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      account\n         FROM compound_v1.\"MoneyMarket_evt_SupplyReceived\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      account\n         FROM compound_v1.\"MoneyMarket_evt_BorrowTaken\"\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "This SQL query returns the number of unique addresses that were attested each week, along with the week number.", "completion": " SELECT date_trunc('week', tx.block_time) AS week,\n          count(DISTINCT subject)\n   FROM bloom.\"AttestationLogic_evt_TraitAttested\" a,\n        ethereum.transactions tx\n   WHERE tx.hash = a.tx_hash\n   GROUP BY week\n"}
{"prompt": "This SQL query calculates the total fees paid by users on the Ethereum network in USD. It does this by first finding all the 'Exchange_evt_Fill' events, which are related to transactions on the Ethereum network. It then joins this data with data from the 'transactions' table, which contains information about each transaction. Finally, it joins this data with data from the 'prices.usd' table, which contains price data for various assets in USD.", "completion": " SELECT\nsum(gas_price/1e18*150000*p.price) as fees_paid\nFROM zeroex_v3.\"Exchange_evt_Fill\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('day', block_time)\nWHERE p.symbol = 'WETH'\nORDER BY 1 desc\n\nSELECT\ncount(\"makerAddress\")\nFROM zeroex_v3.\"Exchange_evt_Fill\"\nLIMIT 10"}
{"prompt": "This query calculates the total amount of DAI that has been auctioned off in the DutchX exchange.", "completion": " SELECT\n\n    SUM(\"sellVolume\" / 1e18) as \"Dai Auctioned\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" \n\nWHERE \"sellToken\" = '\\x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' --dai\n;"}
{"prompt": "This query returns the total USD value of all locked ETH and tokens, as well as the value of each separately. It does this by first getting the price of ETH in USD, then getting the total value of all locked ETH and tokens, and finally adding the two together.", "completion": " WITH symbols (address, symbol) AS (VALUES \n    ('\\x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6'::bytea, 'RDN'),\n    ('\\x744d70fdbe2ba4cf95131626614a1763df805b9e'::bytea, 'SNT'),\n    ('\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'::bytea, 'DAI'),\n    ('\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'::bytea, 'MKR'),\n    ('\\xd26114cd6ee289accf82350c8d8487fedb8a0c07'::bytea, 'OMG'),\n    ('\\x6810e776880c02933d47db1b9fc05908e5386b96'::bytea, 'GNO'),\n    ('\\xdd974d5c2e2928dea5f71b9825b8b646686bd200'::bytea, 'KNC'),\n    ('\\x543ff227f64aa17ea132bf9886cab5db55dcaddf'::bytea, 'GEN'),\n    ('\\x985dd3d42de1e256d09e1c10f112bccb8015ad41'::bytea, 'OCEAN'),\n    ('\\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'::bytea, 'LRC'),\n    ('\\x8f8221afbb33998d8584a2b05749ba73c37a938a'::bytea, 'REQ')\n),\netherPrice AS (\n    SELECT price AS price\n    FROM prices.usd\n    WHERE symbol='WETH'\n    ORDER BY minute DESC\n    LIMIT 1\n),\netherValue AS (\n    SELECT  _token as token,\n            s.symbol,\n           SUM((_amount / 1e18) * (_numerator/_denominator)) as amount\n    FROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\" l\n    INNER JOIN dxdao.\"DxLockWhitelisted4Rep_evt_LockToken\" lt ON l.\"_lockingId\" = lt.\"_lockingId\"\n    LEFT JOIN symbols s ON lt._token = s.address \n    GROUP BY 1,2\n),\ntotal_token_value AS (\n    SELECT SUM(amount * price) as USD\n    FROM etherValue\n    INNER JOIN etherPrice\n    ON TRUE\n),\ntotal_ether_value AS (\n    SELECT sum(_amount / 1e18 * price) AS USD \n    FROM dxdao.\"DxLockEth4Rep_evt_Lock\"\n    INNER JOIN etherPrice\n    ON TRUE\n)\nSELECT t.USD as token_usd_value, e.USD as ether_usd_value, (t.USD + e.USD) as total_usd_value\nFROM total_token_value t\nINNER JOIN total_ether_value e\nON TRUE;"}
{"prompt": "The query returns the number of successful calls to the addToken function in the BatchExchange contract.", "completion": " SELECT\nCOUNT (\"call_success\")\nFROM gnosis_protocol.\"BatchExchange_call_addToken\"\nWHERE \"call_success\" = 'true';"}
{"prompt": "The SQL query below will return the number of successful token to token trades on Kyber Network for each week.", "completion": " SELECT DISTINCT reserve\nFROM kyber.\"FeeBurner_evt_BurnAssignedFees\"\n\n\nSELECT date_trunc('week', tx.block_time),\nCOUNT ( \"call_success\")  as \"Weekly Token to Token Trades\"\nFROM uniswap.\"Factory_call_createExchange\" u\nLEFT JOIN ethereum.transactions tx ON tx.hash = u.call_tx_hash\nWHERE \"call_success\" = TRUE\nGROUP BY 1\nORDER BY 1 ;\n\n\n"}
{"prompt": "This SQL query counts the distinct number of addresses that were involved in trades on the 0x protocol exchange in the past week.", "completion": " SELECT COUNT(DISTINCT address)\nFROM\n  (SELECT \"makerAddress\" AS address,\n          tx_hash\n   FROM zeroex.\"Exchange21_evt_Fill\"\n   UNION ALL SELECT \"takerAddress\" AS address,\n                    tx_hash\n   FROM zeroex.\"Exchange21_evt_Fill\") AS addresses\nINNER JOIN ethereum.transactions tx ON addresses.tx_hash = tx.hash\n    WHERE tx.block_time > date_trunc('week', current_date)::date - 7 \nAND tx.block_time < date_trunc('week', current_date)::date"}
{"prompt": "ThisSQL query will select the contract address, sender, receiver, and value from the erc20 \"Transfer\" table where the receiver is in a specified list of addresses. The query will then limit the results to the first 3 rows.", "completion": " SELECT \ncontract_address as erc20_address, \nsender as Zap_user,\nreceiver as Zap_address,\nvalue/1e18 as erc_amount\nFROM erc20.\"Transfer\" e\nwhere e.receiver in ('\\x52fc6455f258760705e70f70160b06619bfe0adb','\\xd17cda470bd0237fae82ef254c84d06d0e4cc02f','\\x8dfcb49766c0296e4373a0300b52c3637614db59','\\x929a10efda7099865dad8286aee8715078902d51','\\x19627796b318e27c333530ad67c464cfc37596ec','\\x1ee8c303f5ab9b36bc30b9345dec7e9a748fa693','\\x04b35ef193e2357328ae79914569721a7ffd6146','\\xebd5e23927891fbfda10487ccc9a1a1a7b9a4210','\\x20ef0c900f8e7ec3a1a89a761f0670ae9e3dd709','\\x408609f5acab253d41cb5dfce913ff367937313b','\\x8e8b9cf6d411b6c8dacc63c306f2691ed195d91d','\\x13240b97c40d7e306cedf3adc9cb057cec74c361','\\x3b122c376e472ae6ae7a4739bebf7b68e045b285','\\xd3eba712988df0f8a7e5073719a40ce4cbf60b33','\\xe3385df5b47687405a02fc24322dedb7df381852','\\xecb53d65816444dbbf6a326b8df959caeda3faf9','\\x606563f8dc27f316b77f22d14d9cd025b4f70469','\\x21091c5ea13854ab0965090dc4fc20280f1a5730','\\xe4b7b00a802834bea733f06a0a24a869f2765df7','\\x4ebee4cf5ba7de81f222fefa4e5d0c30c4968fff')\n-- Compiled list from Etherscan link here omitting the Gitcoin Grants one: https://etherscan.io/accounts/label/defizap?__cf_chl_captcha_tk__=174f2555d28b7754d207de4fb5b8afb02dd0ebfc-1580715654-0-AWQ0c9Mn3cqBneEWAV85uH5a5hNdYDgjjN07mQ0GMIe0JsNoeuj7tntfJ7QlQMFT8luHa7uj921xoExVDOL_398_HSrUhKxcLkExMF0C2j9OUVqYkioysTYSHduvQT_R3zN9qo3V58xZ8mID4yE8jx1UOapRxofHiEkRY-HRFbm6JHdWZ_cUE0j34afB3sDMaENjVMarZE-dMA6hdtDBKuF9msTrHhvV5_joi8XBb0i3y6w853z3XAdweZo2hpPCRnwiyLau_6BGcZS69D34UMKwucoPBFLrICJVBOepvq3lFKd0nFzsD2ntWXheaqWdtD8uU1ujQDlUTICZemHCq6kMylhpylMgGm5t72spsXb5nyEQSo86HLJtKY4GOIk8NdJxzYMJqA5p_ldPTnxjF2M\n\nLIMIT 3\n-- LIMIT 50"}
{"prompt": "This query returns the total USD trading volume for Uniswap over the past 24 hours, grouped by hour.", "completion": " SELECT\n    date_trunc('hour', block_time) AS hour,\n    SUM(usd_amount) AS usd_volume                                                                                \nFROM dex.\"trades\" t                                                                         \nWHERE block_time >= now() - interval '24 hours'\nAND project = 'Uniswap'\nGROUP BY 1\n; "}
{"prompt": "Get all the data from the ethereum.transactions table where the to column is equal to 0xf5dce57282a584d2746faf1593d3121fcac444dc.", "completion": " SELECT * from ethereum.transactions tx WHERE tx.to = '0xf5dce57282a584d2746faf1593d3121fcac444dc';"}
{"prompt": "SELECT SUM(\"wad\"/1e18) FROM maker.\"SAI_evt_Mint\"\nLIMIT 10;\n\nSELECT SUM(\"wad\"/1e18) FROM maker.\"SAI_evt_Burn\"\nLIMIT 10;\n\nSELECT SUM(m.\"wad\"/1e18), SUM(b.\"wad\"/1e18)\nFROM maker.\"SAI_evt_Mint\" as m\nJOIN maker.\"SAI_evt_Burn\" as b\nON m.\"wad\" = b.\"wad\"\nLIMIT 10;\n\nSELECT\nCOUNT(DISTINCT dst) AS receivers\nFROM maker.\"SAI_evt_Transfer\";\n\nSELECT\nCOUNT(DISTINCT guy) AS minters\nFROM maker.\"SAI_evt_Mint\"\nLIMIT 10;\n\nSELECT \"wad\"/1e18 FROM maker.\"SAI_evt_Mint\"\nLEFT JOIN", "completion": " SELECT SUM(\"wad\"/1e18) FROM maker.\"SAI_evt_Mint\" \nLIMIT 10;\n\nSELECT SUM(\"wad\"/1e18) FROM maker.\"SAI_evt_Burn\"\nLIMIT 10;\n\nSELECT SUM(m.\"wad\"/1e18), SUM(b.\"wad\"/1e18)\nFROM maker.\"SAI_evt_Mint\" as m\nJOIN maker.\"SAI_evt_Burn\" as b\nON m.\"wad\" = b.\"wad\"\nLIMIT 10\n\nSELECT\nCOUNT(DISTINCT dst) AS receivers\nFROM maker.\"SAI_evt_Transfer\"\n\nSELECT \nCOUNT(DISTINCT guy) AS minters\nFROM maker.\"SAI_evt_Mint\"\nLIMIT 10\n\nSELECT \"wad\"/1e18 FROM maker.\"SAI_evt_Mint\" \nLEFT JOIN \n\n\n\n"}
{"prompt": "This SQL query returns data on Ethereum transaction fees over the past year. It shows the total gas used and fees paid in US dollars for each week, as well as the cumulative fees paid over the entire period.", "completion": " WITH ETH_fees AS \n(\nSELECT\ndate_trunc('week', t.block_time) as week,\nsum((cumulative_gas_used*gas_price*p.price)/1e18) as fees_$,\nsum(cumulative_gas_used) as gas_used\nFROM ethereum.\"transactions\" t\nLEFT JOIN ethereum.\"receipts\" r ON t.hash = r.tx_hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('week', t.block_time)\nWHERE p.symbol = 'WETH'\nand t.block_time > now() - interval '365 days'\nand t.success != 'false'\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT\nETH_fees.day,\nsum(gas_used) as gas_used_gas,\nsum(fees_$) as gas_used_$,\nsum(sum(fees_$)) over (order by ETH_fees.week) as cumulative_fees_$\nFROM ETH_fees\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This SQL query returns the total investment made by each contract address on each day.", "completion": " with data as (\nSELECT date_trunc('day', block_time) AS day,\n       contract_address,\n       sum(_amount/1e18) invest\nFROM iearn_v1.\"yToken_call_invest\" yci\nLEFT JOIN ethereum.\"transactions\" tx ON yci.call_tx_hash = tx.hash\nGROUP BY 1, 2)\n\nselect day, contract_address, sum(invest) over (order by day asc rows between unbounded preceding and current row)\nfrom data group by day, contract_address;"}
{"prompt": "This SQL query will select the first 10 rows from the table \"Pool3_evt_Opened\" in the \"PoolTogether_v2\" database.", "completion": " SELECT * FROM pooltogether_v2.\"Pool3_evt_Opened\" LIMIT 10"}
{"prompt": "This SQL query calculates the total protocol fees paid for each day, as well as the cumulative protocol fees paid over time.", "completion": " SELECT \nday, \nSUM(fees_paid) as \"protocol_fees\", \nsum(sum(fees_paid)) over (order by day) as \"cumulative_fees\"\nFROM \n(\n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(\"gas_price\"/1e18*120000*p.price) as fees_paid \nFROM ethereum.\"transactions\"\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE \"to\" = '\\x61935cbdd02287b511119ddb11aeb42f1593b7ef' and p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 desc\n)\n\nUNION\n\n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(\"gas_price\"/1e18*120000*p.price) as fees_paid \nFROM ethereum.\"transactions\"\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE \"to\" = '\\x4f833a24e1f95d70f028921e27040ca56e09ab0b' and p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 desc\n)\n\nUNION\n\n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(\"gas_price\"*0.000000001*120000*p.price) as fees_paid \nFROM ethereum.\"transactions\"\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE \"to\" = '\\x080bf510fcbf18b91105470639e9561022937712' and p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n) \n) AS fees\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 365\n\n"}
{"prompt": "This query returns the number of distinct participants who have bought tickets from the pool.", "completion": " SELECT COUNT (DISTINCT sender)\nFROM pooltogether.\"Pool_evt_BoughtTickets\"\n"}
{"prompt": "The query returns the average price of MKR for each day, the sum of MKR burned for that day, and the sum of MKR burned cumulatively over the past 365 days. It also returns the MKR price/burn ratio for each day.", "completion": " WITH MKR_burn AS\n(\nSELECT\ndate_trunc('day', block_time) AS day,\nAVG(p.price) as MKR_price,\nsum(wad/1e18*p.price) as MKR_burn,\nsum(sum(wad/1e18*p.price)) over (order by date_trunc('day', block_time)) as MKR_cumulative_burn\nFROM maker.\"MKR_evt_Transfer\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE m.dst = '\\x69076e44a9C70a67D5b79d95795Aba299083c275' \nAND p.symbol = 'MKR'\nAND block_time > now() - interval '365 days'\nGROUP BY 1\nORDER BY 1 desc\n),\n\nMKR_price AS\n(SELECT\nminute,\nprice\nFROM prices.usd\nWHERE symbol = 'MKR'\n)\n\nSELECT day, sum(p.price/(MKR_cumulative_burn/1000000)) as MKR_PB\nFROM MKR_burn\nINNER JOIN MKR_price p ON p.minute = day\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 180"}
{"prompt": "This SQL query returns the following data:\n\n- The ratio of 1e18 to the bytea2numeric_v2 value of the substring of data starting at the 3rd character\n- The block time\n- The transaction hash\n\nfrom the \"logs\" table in the \"optimism\" database, where:\n\n- The contract_address column contains one or more of the following values (all lowercase):\n\n--'0x05E1b1Dff853B1D67828Aa5E8CB37cC25aA050eE',\n--'0x8454190C164e52664Af2c9C24ab58c4e14D6bbE4',\n--'0x46D4504ed0f751309e3c6b1f544ad2E8458537Dc',\n--'0x8f571a7bD9924e25a3d2aC0B7F721C5Ed675c3c8',\n'0x1a094457F83dA71bF223BFA49E7fa678392859", "completion": " select\n  1e18/bytea2numeric_v2(substring(data, 3)) as cratio,\n  block_time,\n  tx_hash\nfrom\n  optimism.logs\nwhere\n  array_contains(\n    transform(\n      array(\n        --'0x05E1b1Dff853B1D67828Aa5E8CB37cC25aA050eE',\n        --'0x8454190C164e52664Af2c9C24ab58c4e14D6bbE4',\n        --'0x46D4504ed0f751309e3c6b1f544ad2E8458537Dc',\n        --'0x8f571a7bD9924e25a3d2aC0B7F721C5Ed675c3c8',\n        '0x1a094457F83dA71bF223BFA49E7fa67839285905',\n        '0x3fDccCf40eefe389a8Ba73Ff2AEDA10888ff8F3E',\n        '0x28224ef515d01709916F5ac4D8a72664A7b56e98',\n        '0xd056351FC32b5Ec443305198FB9093057f8e988C',\n        '0x1c7A2E680849bC9C6ab8b437A28885C028739B82',\n        '0xdE48d4b3B8737446193720ce23ef24f922341155',\n        '0x05E1b1Dff853B1D67828Aa5E8CB37cC25aA050eE'\n      ),\n      x -> lower(x)\n    ),\n    contract_address\n  )\n  and topic1 = '0x63b22e09cc3a33e847c063e35f887bd4ea96bc8c0f93f1f8c311e4fa6d885452' -- IssuanceRatioUpdated()uint256"}
{"prompt": "This SQL query calculates the total USD volume of trades made on the Uniswap decentralized exchange over the past 7 days, grouped by day.", "completion": " SELECT\n    date_trunc('day', block_time) AS day,\n    SUM(usd_amount) AS usd_volume\nFROM dex.trades\nWHERE block_time > now() - interval '7 days'\nAND project = 'Uniswap'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query will return the sum of all transactions made to a specific address in US dollars, converted from Ethereum, for a given week. The prices used will be from the WETH (Ethereum) symbol on the prices.usd table. The query is ordered by date, with the most recent date appearing first.", "completion": " SELECT date_trunc('week', block_time) AS date,\n       SUM(tx.value / 1e18 * p.price) AS volume_usd\nFROM ethereum.transactions AS tx\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE tx.to = '\\x7Be8076f4EA4A4AD08075C2508e481d6C946D12b'\n  AND tx.success = TRUE\n  AND p.symbol = 'WETH' \nGROUP BY 1\nORDER BY 1 DESC;"}
{"prompt": "Select the sum of USD amount from the hashflow trades table where the fill status is true and the block time is greater than or equal to now minus 7 days.", "completion": " select sum(usd_amount)\nfrom hashflow.trades\nwhere fill_status is true\n    and block_time >= now() - interval '7d'"}
{"prompt": "This SQL query retrieves all data from the \"BasicTournament_call_claimTheBigCheeze\" table.", "completion": " select * from chzwzrds.\"BasicTournament_call_claimTheBigCheeze\""}
{"prompt": "This SQL query returns the number of Argent contracts that have been created.", "completion": " WITH wallets AS (\n    select substring(topic2 from 13 for 20) as \"address\", block_time as creation_time\n\tfrom ethereum.logs el\n\twhere \n\t(\n\t    topic1 = '\\x5b03bfed1c14a02bdeceb5fa582eb1a5765fc0bc64ca0e6af4c20afc9487f081' \n\t\tand contract_address = '\\x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020'  \n\t) OR (\n\t\ttopic1 = '\\xca0b7dde26052d34217ef1a0cee48085a07ca32da0a918609937a307d496bbf5' \n\t\tand contract_address in (\n\t\t    '\\x40C84310Ef15B0c0E5c69d25138e0E16e8000fE9',\n\t\t    '\\x9ae0AcdB750bFcF694675f46B580847fC49A48bF'\n\t\t)\n\t) OR (\n\t\ttopic1 = '\\xacd43e061b8ee386537b57919358cfa44933c4e47ccd4b2e1916e54133cec748' \n\t\tand contract_address in (\n\t\t    '\\x536384FCd25b576265B6775F383D5ac408FF9dB7',\n\t\t    '\\x1d09a6D1C45d1a9Eb8CB8A8354BCd78e225f06d3'\n\t\t)\n\t)\n)\nselect count(*)\nfrom wallets"}
{"prompt": "This SQL query returns the number of Monolith contracts that have been created.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x95BEBe7bfc6aCc186C13D055D0Aacc2DE5f81502','\\xb24d47364163f909e64cf2cf7788d22c51cea851', '\\x85bb8a852c29d8f100cb97ecdf4589086d1be2dd') -- Monolith deployers\n\t    and type = 'create'\n)\nselect count(*)\nfrom wallets"}
{"prompt": "This SQL query returns the number of transactions made with Authereum contracts.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8', '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea', '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046') -- Authereum Wallet Factorys\n\tand type = 'create'\n)\nselect count(distinct et.tx_hash) as transactions\nfrom ethereum.traces et\njoin wallets \n    on wallets.address = et.\"from\"\nwhere et.\"to\" in ('\\x2e1723d1dfa2947f0d08d5c5d214b71def4f951f','\\x79fee076b1bcd4054dff0b4364c26899492198dc','\\x211deb5c0a28a213fcf5976ac22c70ff96b9004c','\\x185c46c8d3ef5155f3678e69c827db7a2116a6cd','\\xd8cab604bdd8cbb7c3eb0c26f7dc3abffb005a92','\\xae1710e83211decb356f031a9346a24ef55055e0') -- AuthereumAccount versions\n    and call_type = 'delegatecall'\n    and tx_success = TRUE\n    and error is null\n    and substring(\"input\" for 4) in ('\\x26aa4655', '\\xd5553b88') -- executeMultipleAuthKeyMetaTransactions and executeMultipleLoginKeyMetaTransactions\n"}
{"prompt": "This SQL query returns the total volume of trades on Polygon for each project in the given time interval and number of days.", "completion": " SELECT \n    date_trunc('{{Time interval}}', block_time) as time,\n    project,\n    SUM(usd_amount) AS volume\nFROM dex.trades\nWHERE category = 'Aggregator'\nAND NOT ('TITAN' IN (token_a_symbol, token_b_symbol) AND date_trunc('day', block_time)='2021-06-16')\nAND block_time > DATE_TRUNC('{{Time interval}}',now()) - interval '{{Trading Num Days}} days'\nGROUP BY time, project"}
{"prompt": "This query returns the following statistics related to the Ethereum Name Service (ENS):\n\n- The number of unique domains generated\n- The number of unique addresses participated\n- The amount of ETH spent\n- The amount of USD spent", "completion": " SELECT COUNT (DISTINCT label) AS unique_domains_generated,\n    COUNT (DISTINCT owner) AS unique_addresses_participated,\n        SUM (tx.value/1e18) eth_spent,\n        SUM (tx.value/1e18 * p.price) usd_spent\nFROM ethereumnameservice.\"ENSRegistry_evt_NewOwner\" r\nLEFT JOIN ethereum.transactions tx\nON tx.hash = r.evt_tx_hash\nLEFT JOIN prices.layer1_usd_eth p\nON p.minute = date_trunc('minute', tx.block_time)"}
{"prompt": "This query returns the total number of unique names registered in the ENS system. This includes both the ENS Registry and the ENS Registry with Fallback.", "completion": " SELECT count(*) AS \"names registrered\" FROM\n\n(\n(SELECT DISTINCT node, label FROM ethereumnameservice.\"ENSRegistryWithFallback_evt_NewOwner\")\nUNION\n(SELECT DISTINCT node, label FROM ethereumnameservice.\"ENSRegistry_evt_NewOwner\")\n) AS count;\n\n"}
{"prompt": "This SQL query returns the amount of revenue generated from liquidated borrows on the Compound v2 platform, broken down by day. The data is pulled from the ethereum transactions database, and prices are pulled from the minute-by-minute price data for USD.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\nsum(\"seizeTokens\"/1e13*p.price*0.05) as collateral_liquidated_usd FROM compound_v2.\"cErc20_evt_LiquidateBorrow\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 100"}
{"prompt": "Get all the data from the ethereum.transactions table where the \"from\" field is equal to 0xe568C0DDfad18FD631E1Ee155373e2D02DB6723f.", "completion": " select\n  *\nfrom\n  ethereum.transactions\nwhere\n  \"from\" ='\\xe568C0DDfad18FD631E1Ee155373e2D02DB6723f'\n"}
{"prompt": "This SQL query returns the account and sum of amounts for all ERC20_evt_Transfer events where the contract address is equal to the specified address, and where the \"from\" field is equal to 0x0 or the \"to\" field is equal to 0x0. The results are grouped by account and ordered by the sum of amounts in descending order.", "completion": " SELECT account,\n       sum(amount) AS amount\nFROM\n  (SELECT \"to\" AS account,\n          value / 1e18 AS amount\n   FROM erc20.\"ERC20_evt_Transfer\"\n   WHERE contract_address = '\\xcda4770d65b4211364cb870ad6be19e7ef1d65f4'\n     AND \"from\" = '\\x0000000000000000000000000000000000000000'\n   UNION SELECT \"from\" AS account, -value / 1e18 AS amount\n   FROM erc20.\"ERC20_evt_Transfer\"\n   WHERE contract_address = '\\xcda4770d65b4211364cb870ad6be19e7ef1d65f4'\n     AND \"to\" = '\\x0000000000000000000000000000000000000000') a\nGROUP BY 1\nORDER BY 2 DESC"}
{"prompt": "This SQL query will select all data from the \"Moloch_evt_SubmitProposal\" table and limit the results to 1.", "completion": " SELECT * FROM moloch.\"Moloch_evt_SubmitProposal\" LIMIT 1;"}
{"prompt": "This query returns the total number of Authereum contracts created each day, accumulated over time.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8', '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea', '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046') -- Authereum Wallet Factorys\n\t    and type = 'create'\n),\ndata as (\n    select date_trunc('day', creation_time) AS \"day\", count(address) as created_wallets\n    from wallets\n    group by 1\n)\nselect \"day\", sum(created_wallets) over (order by \"day\" asc rows between unbounded preceding and current row) as created_wallets_running_total\nfrom data"}
{"prompt": "This SQL query select asset and symbol from coincap.\"tokens/usd\" and groups them by token and tokenName. It then counts the total number of rows.", "completion": " --SELECT\n--        asset AS token,\n--        symbol AS tokenName\n--      FROM coincap.\"tokens/usd\"\n--      GROUP BY token, tokenName\n\nSELECT COUNT(*) from coincap.\"tokens/usd\""}
{"prompt": "The query returns the number of unique OpenSea traders per day, over time.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(evt_block_time)) AS date,\n                maker AS account\n         FROM opensea.\"WyvernExchange_evt_OrdersMatched\"\n         WHERE evt_tx_hash not in\n             (SELECT *\n              FROM dune_user_generated.kq_washtrading_txns)\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      taker AS account\n         FROM opensea.\"WyvernExchange_evt_OrdersMatched\"\n         WHERE evt_tx_hash not in\n             (SELECT *\n              FROM dune_user_generated.kq_washtrading_txns)\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(block_time)) AS date,\n                      seller AS account\n         FROM seaport.view_transactions\n         WHERE zone_address in ('\\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',\n                                '\\x9b814233894cd227f561b78cc65891aa55c62ad2',\n                                '\\x004C00500000aD104D7DBd00e3ae0A5C00560C00',\n                                '\\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(block_time)) AS date,\n                      buyer AS account\n         FROM seaport.view_transactions\n         WHERE zone_address in ('\\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',\n                                '\\x9b814233894cd227f561b78cc65891aa55c62ad2',\n                                '\\x004C00500000aD104D7DBd00e3ae0A5C00560C00',\n                                '\\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "This SQL query returns information on the 10 most recent PAN token purchases made by the specified Ethereum address.", "completion": " SELECT * from uniswap.\"Exchange_evt_TokenPurchase\"\nWHERE \"address\" = '\\xF53bBFBff01c50F2D42D542b09637DcA97935fF7'\nLIMIT 10"}
{"prompt": "This SQL query returns the total amount of ETH bought for each Uniswap market, ordered by the amount of ETH bought.", "completion": " SELECT address, SUM(eth_bought / 1e18)\nFROM uniswap.\"Exchange_evt_EthPurchase\"\nGROUP BY 1\nORDER BY 2 desc;"}
{"prompt": "This SQL query returns the total number of Safes created each week.", "completion": " select date_trunc('week', creation_time) AS \"week\", count(address) as created_safes\nfrom gnosis_safe.view_safes \ngroup by 1"}
{"prompt": "This query returns the total number of CREAM users over time.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(evt_block_time)) AS date,\n                minter AS account\n         FROM creamfinance.\"CErc20Delegate_evt_Mint\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      borrower AS account\n         FROM creamfinance.\"CErc20Delegate_evt_Borrow\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      minter AS account\n         FROM creamfinance.\"CEther_evt_Mint\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      borrower AS account\n         FROM creamfinance.\"CEther_evt_Borrow\"\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "This query returns the number of MGN holders that registered on each day.", "completion": " SELECT date, sum(count(_beneficiary)) OVER (ORDER BY date)\nFROM (\n    SELECT DISTINCT ON (_beneficiary) date_trunc('day', tx.block_time) as date, _beneficiary\n    FROM dxdao.\"DxLockMgnForRep_evt_Register\" e\n    LEFT JOIN ethereum.transactions tx\n    ON e.tx_hash = tx.hash \n    ORDER BY _beneficiary, date asc\n) AS subq\nGROUP BY date;"}
{"prompt": "This query returns the number of transactions in each block between block numbers 8063700 and 8063850.", "completion": " SELECT block_number,\n       count(*)\nFROM ethereum.transactions\nWHERE block_number>8063700\n  AND block_number<8063850\nGROUP BY block_number\nORDER BY 1;"}
{"prompt": "This SQL query returns the following information:\n\n- The amount of tokens involved in the transaction\n- The provider of the tokens\n- The hash of the transaction", "completion": " SELECT token_amounts,\n       provider,\n       evt_tx_hash\nFROM curvefi.\"compound_v2_evt_AddLiquidity\"\n"}
{"prompt": "This SQL query returns the number of transactions made to a specific Ethereum address, grouped by day, in descending order.", "completion": " SELECT date_trunc('day', block_time) AS date,\n       COUNT(*) AS COUNT\nFROM ethereum.\"transactions\"\nWHERE \"to\" = '\\x7Be8076f4EA4A4AD08075C2508e481d6C946D12b'\n  AND \"success\" = TRUE\nGROUP BY 1\nORDER BY 1 DESC;"}
{"prompt": "This query calculates the total amount of USD that has been traded on the Uniswap decentralized exchange. It does this by taking the ETH amount traded in each transaction, multiplying it by the USD value of ETH at the time of the transaction, and then adding up all of those values.", "completion": " SELECT SUM(eth/1e18 * p.average)\nFROM (\n        (SELECT tx_hash,\n                eth_sold AS eth\n         FROM uniswap.\"Exchange_evt_TokenPurchase\")\n      UNION\n        (SELECT tx_hash,\n                eth_bought AS eth\n         FROM uniswap.\"Exchange_evt_EthPurchase\")) ether\nINNER JOIN ethereum.transactions tx ON ether.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" p ON date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'WETH'\n;"}
{"prompt": "This SQL query will select all data from the ethereum.transactions table where the hash is equal to '\\x9c58613f48e3e4cdb66cec271d80c121782fde56177c6c803fe3774a9b1f25be'.", "completion": " SELECT *\nFROM ethereum.transactions tx\nWHERE tx.hash = '\\x9c58613f48e3e4cdb66cec271d80c121782fde56177c6c803fe3774a9b1f25be';"}
{"prompt": "This SQL query returns the price of a security on a given day, broken down by the security's buy and sell tokens. The price is calculated by dividing the total amount of buy tokens by the total amount of sell tokens, and then adjusting for the difference in the tokens' decimal places. The query also orders the results by the buy token's symbol, the sell token's symbol, and then by date, with the most recent results appearing first.", "completion": " SELECT\n    sell_token.\"symbol\" as \"sellToken\",\n    buy_token.\"symbol\" as \"buyToken\",\n    date(transactions.block_time) as DAY,\n    SUM(\"executedBuyAmount\") / SUM(\"executedSellAmount\") / 10^(buy_token.\"decimals\" - sell_token.\"decimals\") as \"price\"\nFROM gnosis_protocol.\"BatchExchange_evt_Trade\" trades\nJOIN gnosis_protocol.\"view_tokens\" buy_token\n    ON trades.\"buyToken\" = buy_token.\"token_id\"\nJOIN gnosis_protocol.\"view_tokens\" sell_token\n    ON trades.\"sellToken\" = sell_token.\"token_id\"\nJOIN ethereum.\"transactions\" transactions\n    ON transactions.hash = trades.evt_tx_hash\n    AND transactions.success = true\nWHERE \n    0=0\n    -- AND trades.\"buyToken\" = 15\n    AND buy_token.\"symbol\" = 'SNX'\n    -- \nGROUP BY\n    sell_token.\"symbol\",\n    buy_token.\"symbol\",\n    buy_token.\"decimals\",\n    sell_token.\"decimals\",\n    date(transactions.block_time)\nORDER BY \n    buy_token.\"symbol\",\n    sell_token.\"symbol\",\n    date(transactions.block_time) desc;"}
{"prompt": "This SQL query returns the total number of trades, total volume traded, and average trade volume for the Memorial Crystal NFT on the OpenSea platform, grouped by day.", "completion": " with\n  --opensea.trades \ud14c\uc774\ube14\uc5d0\uc11c\ub294 holder \uc815\ubcf4\ub97c \uc54c \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0, polygon \uac70\ub798 holder \ub370\uc774\ud130\uac00 \uc788\ub294 ERC1155_evt_TransferSingle, ERC1155_evt_TransferBatch \ud14c\uc774\ube14\uc744 \uc870\uc778\n  data_t as (\n    select a.*, b.from, b.to \n    --erc1155\ud14c\uc774\ube14\uc5d0\ub294 trasfer\uc758 tx\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0, \uac70\ub798\ub0b4\uc5ed\ub9cc \uc788\ub294 opensea_trades_polygon \ud14c\uc774\ube14\uc744 \uae30\uc900\uc73c\ub85c \uc870\uc778\n    from opensea.trades a\n      left join erc1155.\"ERC1155_evt_TransferSingle\" b on(a.nft_contract_address = b.contract_address and a.tx_hash = b.evt_tx_hash)\n    where\n      1 = 1\n      --Opensea \uac70\ub798\ub0b4\uc5ed\ub9cc\n      and \"platform\" = 'OpenSea' \n      --Desperado: Crystal\n      and \"nft_contract_address\" = '\\x82C289CD41a793f1AAe5b2cA9FC63C219Ea8ed81'\n      and b.contract_address is not null\n    \n    union all\n   \n    select a.*, b.from, b.to \n    --erc1155\ud14c\uc774\ube14\uc5d0\ub294 trasfer\uc758 tx\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0, \uac70\ub798\ub0b4\uc5ed\ub9cc \uc788\ub294 opensea_trades_polygon \ud14c\uc774\ube14\uc744 \uae30\uc900\uc73c\ub85c \uc870\uc778\n    from opensea.trades a \n      left join erc1155.\"ERC1155_evt_TransferBatch\" b on(a.nft_contract_address = b.contract_address and a.tx_hash = b.evt_tx_hash)\n    where 1 = 1\n    --Opensea \uac70\ub798\ub0b4\uc5ed\ub9cc\n      and \"platform\" = 'OpenSea' \n      --Desperado: Crystal\n      and \"nft_contract_address\" = '\\x82C289CD41a793f1AAe5b2cA9FC63C219Ea8ed81'\n      and b.contract_address is not null\n  )\nselect date_trunc('day', \"block_time\") as \"\uc77c\uc790\",\ncount(*) as \"\uac70\ub798 \uac74\uc218\",\nround(sum(usd_amount), 2) as \"\uac70\ub798 \ubcfc\ub968 ($)\",\nround(sum(usd_amount)/count(*), 2) as \"\ud3c9\uade0 \ubcfc\ub968 ($)\"\nfrom data_t\ngroup by 1\norder by 1;"}
{"prompt": "This query gets the balances of tokens for a given ETH address from the ERC20_evt_Transfer table. The table is joined with the tokens table to get the decimals and symbol for each token. The balances are then calculated and displayed for each token.", "completion": " WITH transfers AS (\n\t    SELECT\n\t    evt_tx_hash AS tx_hash,\n\t    tr.\"from\" AS address,\n\t    -tr.value AS amount,\n\t    tokens.decimals,\n\t    tokens.symbol,\n\t    tokens.contract_address\n\t     FROM erc20.\"ERC20_evt_Transfer\" tr\n\t     join erc20.tokens \n\t     \ton tr.contract_address = tokens.contract_address\n\t     where \"from\" in ('{{ address }}')    \n\tUNION ALL\n\t    SELECT\n\t    evt_tx_hash AS tx_hash,\n\t    tr.\"to\" AS address,\n\t    tr.value AS amount,\n\t    tokens.decimals,\n\t    tokens.symbol,\n\t    tokens.contract_address\n\t     FROM erc20.\"ERC20_evt_Transfer\" tr \n\t     join erc20.tokens \n\t     \ton tr.contract_address = tokens.contract_address\n\t    where \"to\" in ('{{ address }}')\n),\nbalances as (\n\tSELECT symbol, contract_address, decimals, sum(amount) as balance\n\tFROM transfers\n\tGROUP BY 1,2,3\n)\n\nselect balances.symbol, concat('https://etherscan.io/address/0',right(text(contract_address),41)) as token_address, balance/10^decimals as balance\nFROM balances \norder by 1 asc "}
{"prompt": "This query returns the number of distinct users who have deposited into the margin call system.", "completion": " SELECT COUNT(DISTINCT tx.from) AS users\nFROM\n  (SELECT call_tx_hash,\n          amount,\n          asset_address\n   FROM\n     (SELECT cast(subactions->>'actionType' AS integer) AS action_type,\n             substring((subactions->'encodedParams')::text, 92, 40) AS asset_address,\n             hex2numeric(substring((subactions->'encodedParams')::text, 132, 64)) AS amount,\n             call_tx_hash\n      FROM\n        (SELECT jsonb_array_elements(actions) AS subactions,\n                call_tx_hash\n         FROM hydroprotocol.\"Margin_call_batch\") a) b\n   WHERE b.action_type = 0 ) deposits\nINNER JOIN\n  (SELECT \"from\",\n          hash,\n          block_time\n   FROM ethereum.transactions tx ) tx ON deposits.call_tx_hash = tx.hash"}
{"prompt": "This query returns the total amount withdrawn for each asset type over the past month, partitioned by asset type and ordered by time.", "completion": " with data as (\n    SELECT eth.block_time AS ttime,\n       eth.hash AS \"txHash\",\n       eth.from AS \"depositerAddress\",\n        CASE dep.\"market\"::integer \n            WHEN 0 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 1 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 2 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 6 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 6, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e6)::decimal\n                END\n        END AS \"withdrawAmount\",\n       CASE dep.\"market\"::integer \n       WHEN 0 THEN\n        'ETH'::text\n       WHEN 1 THEN\n        'DAI'::text\n       WHEN 2 THEN\n        'USDC'::text\n       END AS \"Asset\"\nFROM dydx.\"SoloMargin_evt_LogWithdraw\" dep\nJOIN ethereum.transactions eth ON eth.hash = dep.evt_tx_hash\nWHERE date_trunc('minute', eth.block_time) >= date_trunc('month', now()) - interval '1 month'\nORDER BY eth.block_time DESC)\n\nSELECT\n  data.ttime,\n  sum(\"withdrawAmount\") over (partition by \"Asset\" order by data.ttime) AS \"sum\",\n  \"Asset\"\nfrom data"}
{"prompt": "This is a query to find the total number of users of the Kyber project over time. It does this by looking at the number of unique users per day and summing them up.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(block_time)) AS date,\n                trader_a AS account\n         FROM dex.trades\n         WHERE project = 'Kyber'\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(block_time)) AS date,\n                      trader_b AS account\n         FROM dex.trades\n         WHERE project = 'Kyber'\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "This SQL query returns the symbol and min/max time for each token from the \"tokens/usd\" table in the coincap database, grouped by symbol and ordered by max time.", "completion": " SELECT symbol, min(time), max(time) FROM coincap.\"tokens/usd\" group by 1 order by 2 desc;"}
{"prompt": "The query returns the sum of the difference between the price and value fields of the WyvernExchange_evt_OrdersMatched table, grouped by transaction hash.", "completion": " SELECT SUM(price/1e18 - value/1e18)\nFROM wyvern.\"WyvernExchange_evt_OrdersMatched\" wy\nLEFT JOIN ethereum.transactions tx ON tx.hash = wy.evt_tx_hash\nLIMIT 10\n-- output: 9,174,608.85\n\nSELECT evt_tx_hash, SUM(price/1e18)\nFROM wyvern.\"WyvernExchange_evt_OrdersMatched\" wy\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 10\n-- checking against tx reveal that the amounts are tokens, not ETH. Question is where do one see which token..."}
{"prompt": "This SQL query returns the number of unique addresses that minted DAI from CDPs in each month for the past 11 months.", "completion": " SELECT date_trunc('month', tx.block_time) as Month,\nCOUNT(DISTINCT guy)\nFROM maker.\"SAI_evt_Mint\" m\nLEFT JOIN (SELECT hash,\n             block_time\n      FROM ethereum.transactions\n      WHERE block_time > now() - interval '11 months'\n        AND block_time < date_trunc('month', NOW())) tx\n        ON m.evt_tx_hash = tx.hash\nAND block_time < date_trunc('month', current_date)::date\nGROUP BY 1;"}
{"prompt": "This SQL query returns the total ETH deposits for each day in the past 10 days for the Fulcrum USDC contract. The deposits are broken down by day and the cumulative total is also returned.", "completion": " WITH deposit AS \n(\n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(\"assetAmount\"/1e18) as ETH_deposits\n    FROM fulcrum.\"iToken_evt_Mint\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\n    GROUP BY 1\nUNION ALL \n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(-\"assetAmount\"/1e18) as ETH_deposits\n    FROM fulcrum.\"iToken_evt_Burn\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\n    GROUP BY 1\n)\n\nSELECT \ndeposit.day,\nsum(ETH_deposits) as dep,\nsum(sum(ETH_deposits)) over (order by deposit.day) as cumul_dep\nFROM deposit\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This SQL query returns the total number of unique sender addresses that have locked MGN tokens for reputation, over time.", "completion": " /*SELECT \n\nSELECT created_at, sum(count(email)) OVER (ORDER BY created_at)\nFROM (\n    SELECT DISTINCT ON (email) created_at, email\n    FROM subscriptions\n    ORDER BY email, created_at\n) AS subq\nGROUP BY created_at; */\n\nSELECT tx.block_time, sum(count(msg.sender)) OVER (ORDER BY tx.block_time)\nFROM (\n    SELECT DISTINCT ON (msg.sender) tx.block_time, msg.sender\n    FROM event e\n    LEFT JOIN ethereum.transactions tx\n    ON e.tx_hash = tx.hash \n    ORDER BY msg.sender, tx.block_time\n) AS subq\nGROUP BY tx.block_time;\n"}
{"prompt": "This SQL query returns the total USD trading volume on Uniswap for the past {{ days }} days, broken down by day. It also includes the total number of trades and the USD volume for each day.", "completion": " SELECT date_trunc('day', ether.block_time) as Date,\n        -- erc20.symbol as erc20Symbol,\n        -- exchange.token_addr,\n        -- exchange.contract_address,\n        -- erc20.symbol,\n        -- CASE\n        --     WHEN erc20.symbol in ('SAI', 'DAI', 'SNX', MKR', 'USDC') THEN erc20.symbol\n        --     ELSE 'Other'\n        -- END AS legend,\n        count(1) as \"#Trades\",\n      ROUND(SUM(eth/1e18 * p.price)) as \"USD volume\"\nFROM ((SELECT contract_address, eth_sold AS eth, block_time\n         FROM uniswap.\"Exchange_evt_TokenPurchase\" pur\n        LEFT JOIN\n            (SELECT hash, block_time\n              FROM ethereum.transactions\n            ) tx ON pur.evt_tx_hash = tx.hash)\n      UNION ALL\n        (SELECT contract_address, eth_bought AS eth, block_time\n          FROM uniswap.\"Exchange_evt_EthPurchase\" pur\n        LEFT JOIN\n            (SELECT hash, block_time FROM ethereum.transactions\n            ) tx ON pur.evt_tx_hash = tx.hash)\n        ) ether\nLEFT JOIN prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 p ON p.minute = date_trunc('minute', ether.block_time)\nLEFT JOIN uniswap.\"Exchange_call_setup\" exchange ON exchange.contract_address = ether.contract_address\nLEFT JOIN erc20.\"tokens\" erc20 ON erc20.contract_address = exchange.token_addr\nWHERE ether.block_time >= date_trunc('day', NOW()) - interval '{{ days }} days'\n  AND ether.block_time < date_trunc('day', NOW())\nGROUP BY 1 --, legend\nORDER BY \"USD volume\" DESC;\n\n-- select *\n-- from erc20.\"tokens\"\n-- where symbol in ('SAI', 'DAI', 'SNX')\n"}
{"prompt": "This query returns the total amount withdrawn for each asset on dYdX for the current month.", "completion": " with data as (\n    SELECT eth.block_time AS ttime,\n       eth.hash AS \"txHash\",\n       eth.from AS \"depositerAddress\",\n        CASE dep.\"market\"::integer \n            WHEN 0 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 1 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 2 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 6 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 6, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e6)::decimal\n                END\n                            WHEN 3 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n        END AS \"withdrawAmount\",\n       CASE dep.\"market\"::integer \n       WHEN 0 THEN\n        'ETH'::text\n       WHEN 1 THEN\n        'SAI'::text\n       WHEN 2 THEN\n        'USDC'::text\n         WHEN 3 THEN\n        'DAI'::text\n       END AS \"Asset\"\nFROM dydx.\"SoloMargin_evt_LogWithdraw\" dep\nJOIN ethereum.transactions eth ON eth.hash = dep.evt_tx_hash\nWHERE date_trunc('minute', eth.block_time) >= date_trunc('month', now())\n-- add ~  - interval '1 day'  ~ here to shift by any days/weeks or months if desired \nORDER BY eth.block_time DESC)\n\nSELECT\n  data.ttime,\n  sum(\"withdrawAmount\") over (partition by \"Asset\" order by data.ttime) AS \"sum\",\n  \"Asset\"\nfrom data"}
{"prompt": "The following SQL query will find the total balance of each type of token for the Binance wallet address '3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be'. The query will first find all of the 'from' and 'to' transactions for that address in the 'ERC20_evt_Transfer' table. It will then calculate the total balance of each type of token for that address by summing the amount of each token divided by 10^decimals (the number of decimal places for that token). Finally, it will order the results by the total balance in descending order.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    contract_address AS token_address,\n    -tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE tr.\"from\" = '\\x3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be'-- Binance wallet\nUNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    contract_address AS token_address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE tr.\"to\" = '\\x3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be' -- Binance wallet\n)\n\nSELECT symbol, sum(amount/10^decimals) as balance\nFROM transfers\nLEFT JOIN erc20.tokens erc ON token_address = erc.contract_address\nGROUP BY 1\nORDER BY 2 desc;\n"}
{"prompt": "The following SQL query returns the total amount of SLP tokens redeemed by the Uniswap pool address.", "completion": " WITH transfers AS (\n    -- SELECT\n    -- evt_tx_hash AS tx_hash,\n    -- tr.\"from\" AS address,\n    -- -tr.value AS amount\n    --  FROM erc20.\"ERC20_evt_Transfer\" tr\n    --  WHERE contract_address = '\\x37236cd05b34cc79d3715af2383e96dd7443dcf1' -- SLP\n-- UNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\x37236cd05b34cc79d3715af2383e96dd7443dcf1' --SLP\n)\n\n-- Next steps, add transactions\n\nSELECT address, sum(amount) as total_slp_redeemed, \nFROM transfers\nWHERE address = '\\xf4158e282f2317597e31c028978c7fb7275d6fb4'  -- Uniswap Pool Address\nGROUP BY 1\nORDER BY 2 desc\n-- LIMIT 25\n"}
{"prompt": "This SQL query returns the date, amount, and total for the Solana Name Service (SNS) $FIDA Revenue over the past {{days}} days.", "completion": " with q as (select\n    date_trunc('day', block_time) as date,\n    sum(pre_token_balances[1].amount) as amount\nfrom solana.transactions\nwhere \n    array_contains(account_keys, 'AUoZ3YAhV3b2rZeEH93UMZHXUZcTramBvb4d9YEVySkc')\n    and pre_token_balances[0].account = 'AUoZ3YAhV3b2rZeEH93UMZHXUZcTramBvb4d9YEVySkc'\n    and pre_token_balances[0].mint = 'EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp'\n    and post_token_balances[0].account = 'AUoZ3YAhV3b2rZeEH93UMZHXUZcTramBvb4d9YEVySkc'\n    and post_token_balances[0].mint = 'EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp'\n    and post_token_balances[0].amount > pre_token_balances[0].amount\n    and success = true\n    and block_date > now() - interval '{{days}} days'\ngroup by 1\norder by 1\n)\n\nselect\n    date,\n    amount as current,\n    sum(amount) over (order by date) as total\nfrom q"}
{"prompt": "This SQL query creates a view of all the safers created since the start of 2022 up until August 18th of that year. The view includes the block time, the Gnosis address, and the creator of the safe.", "completion": " CREATE OR REPLACE view dune_user_generated.gip29_safers_created as \nSELECT\n*\nFROM (\nSELECT\n    l.block_time,\n    CONCAT('\\x',substr(CAST(l.data AS varchar),27))::BYTEA as gnosis_address,\n    \"from\" as creator\nFROM ethereum.\"logs\" l\nLEFT JOIN ethereum.transactions t ON tx_hash = hash\nWHERE topic1 = '\\xa38789425dbeee0239e16ff2d2567e31720127fbc6430758c1a4efc6aef29f80'\nAND l.block_time >= '2022-01-01'\nAND l.block_time <= '2022-08-18' -- New Date of GIP29\n\n\nUNION ALL\n\nSELECT\n    l.block_time,\n    (CONCAT('\\x',substr(CAST(l.data AS varchar),27,40))::BYTEA) as gnosis_address,\n    \"from\" as creator\nFROM ethereum.\"logs\" l\nLEFT JOIN ethereum.transactions t ON tx_hash = hash\nWHERE topic1 = '\\x4f51faf6c4561ff95f067657e43439f0f856d97c04d9ec9070a6199ad418e235'\nAND l.block_time >= '2022-01-01'\nAND l.block_time <= '2022-08-18' -- New Date of GIP29\n\nUNION ALL\n\nSELECT\n    l.block_time,\n    (CONCAT('\\x',substr(CAST(l.data AS varchar),27,40))::BYTEA) as gnosis_address,\n    \"from\" as creator\nFROM ethereum.\"logs\" l\nLEFT JOIN ethereum.transactions t ON tx_hash = hash\nWHERE topic1 = '\\x38b56a7814c1a51663dba0756bf5ece28e95bcf82cf63a76479424baf9c680f9'\nAND l.block_time >= '2022-01-01'\nAND l.block_time <= '2022-08-18' -- New Date of GIP29\n)tt"}
{"prompt": "The SQL query retrieves all documents with the '_id' field equal to 'resonode.lver.' and the 'name' field equal to 'New Query'.", "completion": " resonode.lver."}
{"prompt": "This SQL query returns the number of WETH prices per hour, truncated to the nearest hour, in descending order.", "completion": " SELECT date_trunc('hour', minute), COUNT(*) FROM prices.\"usd\"\nWHERE symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 100"}
{"prompt": "This SQL query returns the amount of GRT staked and reserved for a particular wallet address on a given day.", "completion": " select \"currentPrincipal\"/1e18 as \"GRT Staked\",\nerc20.\"view_token_balances_daily\".amount as \"GRT Reserve\",\nerc20.\"view_token_balances_daily\".day\nfrom tenderize.\"graph_tenderizer_evt_RewardsClaimed\", erc20.\"view_token_balances_daily\"\nwhere erc20.\"view_token_balances_daily\".day = date_trunc('day', tenderize.\"graph_tenderizer_evt_RewardsClaimed\".evt_block_time)\nand erc20.\"view_token_balances_daily\".token_address = '\\xc944e90c64b2c07662a292be6244bdf05cda44a7'\nand erc20.\"view_token_balances_daily\".wallet_address = '\\xF56F61F8181d118c010Ca9c5f1e9e447e37B207e'\norder by tenderize.\"graph_tenderizer_evt_RewardsClaimed\".evt_block_time asc"}
{"prompt": "This SQL query calculates the total amount of Sai that was swapped to Dai, where call_success = TRUE.", "completion": " SELECT SUM(wad)/1e18 AS sum FROM makermcd.\"ScdMcdMigration_call_swapSaiToDai\" a\nWHERE call_success = TRUE"}
{"prompt": "The following SQL query will return the number of new Authereum wallets created each day.", "completion": " WITH wallet AS\n  (SELECT block_time AS creation_time,\n          block_number AS creation_block_number,\n          address\n   FROM ethereum.traces\n   WHERE \"from\" IN ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8',\n                    '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea',\n                    '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046')-- Authereum Wallet Factorys\n\n     AND TYPE = 'create'),\n     DATA AS\n  (SELECT date_trunc('day', creation_time) AS \"day\",\n          count(address) AS created_wallets\n   FROM wallet\n   GROUP BY 1)\nSELECT \"day\",\n       created_wallets AS wallets\nFROM DATA"}
{"prompt": "This query returns the USD volume per auction of DAI auctioned for WETH. The data is grouped by auction index and time, and ordered by auction index.", "completion": " SELECT\n\n    \"auctionIndex\",\n    date_trunc('minute', block_time) as time,\n    sum(\"sellVolume\" / 1e18 * dai.average) as usdvolume\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" dai \n\nWHERE \"sellToken\" = '\\x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' --dai\nAND \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', dai.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND dai.symbol = 'DAI'\nAND tx.success = true\n\nGROUP BY 1,2 \nORDER BY 1"}
{"prompt": "This SQL query returns the number of distinct transactions made with Monolith contracts.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x95BEBe7bfc6aCc186C13D055D0Aacc2DE5f81502','\\xb24d47364163f909e64cf2cf7788d22c51cea851', '\\x85bb8a852c29d8f100cb97ecdf4589086d1be2dd') -- Monolith deployers\n\t    and type = 'create'\n)\nselect count(distinct tx_hash) as num_transactions\nfrom ethereum.logs el\njoin wallets w\n    on w.address = el.contract_address\nwhere topic1 in (\n\t\t\t'\\xd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee',  -- Transferred event\n\t\t\t'\\xd4f62f23021706247dcffea245d104ae7ddaec7f23acf3d11d7136d5de6a69ad', -- BulkTransfer\n\t\t\t'\\xaf022f6b53b11c364e2dfc0aea08eb9416c94f2661451ea82ead8831385617a6' -- ExecutedTransaction\n\t\t\t)"}
{"prompt": "The following SQL query returns the 1inch USD volume per week, the own volume, the external volume, the volume, the predicted volume, and the aggregator share for the 1inch project. The query groups the data by week and orders it by descending order.", "completion": " SELECT\n    date_trunc('week', block_time) AS time,\n    SUM(CASE WHEN project = '1inch' and tx_to = exchange_contract_address THEN usd_amount ELSE 0 END) as own_volume,\n    SUM(CASE WHEN project = '1inch' and tx_to <> exchange_contract_address THEN usd_amount ELSE 0 END) as ext_volume,\n    SUM(case when project = '1inch' then usd_amount else 0 end) as volume,\n    (CASE\n        WHEN date_trunc('week', block_time)::timestamp + '7 days'::interval > NOW()\n        THEN 7 * 24 / extract(epoch from (MAX(block_time)::timestamp - date_trunc('week', block_time)::timestamp)/3600) - 1\n        ELSE 0\n    END) * SUM(case when project = '1inch' then usd_amount else 0 end) as predicted,\n    sum(case when project = '1inch' then usd_amount else 0 end) -- 1inch volumes\n        / (1 + sum(case when project <> 'Matcha' and project <> 'Tokenlon' and category = 'Aggregator' then usd_amount else 0 end)) as agg_share -- Matcha volumes are doubled with 0x API, Tokenlon was not an aggregator\nFROM dex.trades --WHERE project = '1inch'\nWHERE block_time >= '2019-06-03'\nGROUP BY 1\nORDER BY 1 DESC\n"}
{"prompt": "This SQL query returns the net deposits of Fulcrum USDC for each day over the past 60 days.", "completion": " WITH deposit AS \n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(\"assetAmount\"/1e6) as ETH_deposits\nFROM fulcrum.\"iToken_evt_Mint\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nWHERE \"contract_address\" = '\\xF013406A0B1d544238083DF0B93ad0d2cBE0f65f'\nGROUP BY 1\nORDER BY 1 desc\n),\n\nwithdraw AS \n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(\"assetAmount\"/1e6) as ETH_withdraws\nFROM fulcrum.\"iToken_evt_Burn\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nWHERE \"contract_address\" = '\\xF013406A0B1d544238083DF0B93ad0d2cBE0f65f'\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT deposit.day,\nsum(ETH_deposits-ETH_withdraws) as net_deposits\nFROM deposit\nLEFT JOIN withdraw w ON deposit.day = w.day\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 60"}
{"prompt": "Get all data from the ethereum.transactions table, limited to 10 rows.", "completion": " SELECT * FROM ethereum.transactions LIMIT 10\n"}
{"prompt": "This query returns the total amount of money repaid by borrowers on the Compound platform, grouped by day. The data is ordered by date, from earliest to latest.", "completion": " SELECT date_trunc('day', block_time) AS date,\n       sum(repay_amount_usd)\nFROM compound.\"view_repay_borrow\"\nGROUP BY date\nORDER BY date"}
{"prompt": "This query returns the total amount of iDAI held by each address. The query first selects all the transfers of iDAI and then groups them by address. Finally, it orders the results by the total amount of iDAI held by each address.", "completion": " WITH transfers AS (\n--     SELECT\n--     evt_tx_hash AS tx_hash,\n--     tr.\"from\" AS address,\n--     tr.value AS amount\n--      FROM erc20.\"ERC20_evt_Transfer\" tr\n--      WHERE contract_address = '\\x14094949152eddbfcd073717200da82fed8dc960' -- iSAI\n-- UNION ALL\n--     SELECT\n--     evt_tx_hash AS tx_hash,\n--     tr.\"to\" AS address,\n--     tr.value AS amount\n--      FROM erc20.\"ERC20_evt_Transfer\" tr \n--      WHERE contract_address = '\\x14094949152eddbfcd073717200da82fed8dc960' -- iSAI\n     \n--          UNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    tr.value AS idai_amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\x493c57c4763932315a328269e1adad09653b9081' -- iDAI\n     \n     UNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS idai_amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\x493c57c4763932315a328269e1adad09653b9081' -- iDAI\n)\n\nSELECT address, sum(idai_amount)/1e18 as total_idai_held \nFROM transfers\n-- WHERE address = '\\x0000000000000000000000000000000000000000'\nGROUP BY 1\nORDER BY 2 desc\n-- LIMIT 25\n\n\n-- Questions: is iDAI burned? and for what reason?\n\n\n"}
{"prompt": "This SQL query returns a list of all the user addresses that have made a transfer on the ERC20 network, grouped by the symbol of the token they transferred.", "completion": " WITH data as (\nSELECT \ndate_trunc('day', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ncase \nwhen t.symbol= 'WETH' THEN e.value/1e18 * p_weth.price\nWHEN t.symbol = 'DAI' THEN e.value/1e18\nend\nas usd_value,\nt.symbol,\ne.evt_tx_hash\n-- p_weth.price as  curr_weth_price,\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\nJOIN prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 p_weth on (p_weth.symbol = t.symbol AND p_weth.minute = date_trunc('minute', tx.block_time))\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\nAND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n\nUNION (\nSELECT \ndate_trunc('day', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ne.value/1e18 as usd_value,\nt.symbol,\ne.evt_tx_hash\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\n-- AND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n)\n)\n\nSELECT DISTINCT(data.user_address), data.symbol\nFROM data \nGROUP BY 1,2\n"}
{"prompt": "This query returns the total number of Hegic users over time. It does this by first finding the earliest date that each user interacted with the Hegic platform, then grouping them by date.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(evt_block_time)) AS date,\n                account\n         FROM hegic.\"HedgeContract_evt_HedgeCreated\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      account\n         FROM hegic.\"HegicERCPool_evt_Provide\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      account\n         FROM hegic.\"HegicETHOptions_evt_Create\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      account\n         FROM hegic.\"HegicETHPool_evt_Provide\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      acount\n         FROM hegic.\"HegicStakingETH_evt_Claim\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      account\n         FROM hegic.\"HegicStakingPool_evt_BuyLot\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      account\n         FROM hegic.\"HegicStakingPool_evt_SellLot\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      account\n         FROM hegic.\"HegicStakingPool_evt_Deposit\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      acount\n         FROM hegic.\"HegicStakingWBTC_evt_Claim\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      account\n         FROM hegic.\"HegicWBTCOptions_evt_Create\"\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "Get the transaction hash and the asset borrowed from the MoneyMarket_evt_BorrowLiquidated table, limited to 100 rows.", "completion": " SELECT \n     tx_hash,\n     \"assetBorrow\"\n     FROM compound.\"MoneyMarket_evt_BorrowLiquidated\"\nLIMIT 100\n"}
{"prompt": "This SQL query returns the number of distinct users who have called the mintTokens function on the TokenFRTProxy contract.", "completion": " SELECT COUNT (DISTINCT \"user\") from dxdao.\"TokenFRTProxy_call_mintTokens\""}
{"prompt": "This SQL query returns the number of successful and unsuccessful transactions made through the Instadapp CDP platform, grouped by week.", "completion": " WITH instadapp_txns AS (\n    SELECT\n        dai.*\n        , tx.*\n    FROM maker.\"SAI_call_transfer\" dai\n    LEFT JOIN ethereum.\"transactions\" tx\n    ON dai.call_tx_hash = tx.hash\n    WHERE (dai.dst = '\\x5d05ea343c7a13cee09b14e56fcbe985c25521b7' OR dai.dst = '\\xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd')\n)\nSELECT\n    date_trunc('week', block_time) as week\n    , SUM(case when call_success = true then 1 else 0 end) as success\n    , COUNT(1) as all_txns\nFROM instadapp_txns\nGROUP BY 1"}
{"prompt": "This SQL query selects the transactor and event transaction hash from the Gnosis \"Sight_MarketMaker_evt_AMMOutcomeTokenTrade\" trades table where the trades are for the contract address specified.", "completion": " SELECT trades.transactor, trades.evt_tx_hash -- count(trade.transactor) as trades\nFROM gnosis.\"Sight_MarketMaker_evt_AMMOutcomeTokenTrade\" trades\nWHERE trades.contract_address='\\xf9d049de636736a8f2a84e9464d657a1aeb47128'\n\n/*select block_time, hash\nfrom ethereum.transactions txs\nwhere txs.to='\\xf9d049de636736a8f2a84e9464d657a1aeb47128'\nand success=true\nand txs.from !='\\x7949b0b936e2e5d5e391f955cfd77a80cc37e9ad';*/\n\n/*select trades.transactor, trades.evt_tx_hash, txs.hash, trades.contract_address, txs.to\nfrom ethereum.transactions txs, gnosis.'Sight_MarketMaker_evt_AMMOutcomeTokenTrade' trades\nwhere txs.hash=trades.evt_tx_hash\n--and txs.success=true\n--and trades.contract_address='\\xf9d049de636736a8f2a84e9464d657a1aeb47128';*/\n\n/*\nselect * \nfrom ethereum.transactions txs\nwhere txs.hash in ('\\x01504a20cc5b3b45a379d9c323fa5d8f57ed181213a85f892d5027a7109b2b81', '\\x0815cf08bb4a74633fd730b3f8c26c43d732ec56744fd0b23637cac3f8c58d3f', '\\x5012310f819e973e881cbe02bb62151aed0b113852bf7d98eea6b70d3b74d15f', '\\x6d780bb364072f31dabd92d15393f8d7d7b812d81221053e4c07236b25dbf6c2', '\\x7d4ce1827f3ad12a464d59a5b5feb436a69c0f34736643bbc0ed2600ed6a7d5f', '\\x8565866df946036085f9039e8deaa4e255fafaf081a1177d27f7977d5018b33c', '\\x9bd3c4b5632bc8c0de9a6b2c6ebce9cdd0dc7821793a3740d2ec93b6d76b2326', '\\xc186874ba2ad942528fcd791b4b1e4f38b07f1a80eb7fa071eb5209203d1896f', '\\xcdeb5cb4fc3d7abc08bef118feb3bb8bac41628b597bc03e9abcf837e1c1373c', '\\xd063e9dc5084706abdf6eb0388e26cb8020f6ef46bca99e11dc167a14be5aa6f', '\\xe69d21072fe10cbaceb59db6caae0451723c19a5fa3b29415b262f7237c9d8e5', '\\xe9e6484b51ccb448dd917eef990e147dde1a016afb3c24c4ef2123aa4f1d83c6')\nand txs.success=true\n*/\n\n/*select *\nfrom gnosis.\"Sight_MarketMaker_evt_AMMOutcomeTokenTrade\" trades\nwhere trades.evt_tx_hash in ('\\x01504a20cc5b3b45a379d9c323fa5d8f57ed181213a85f892d5027a7109b2b81', '\\x0815cf08bb4a74633fd730b3f8c26c43d732ec56744fd0b23637cac3f8c58d3f', '\\x5012310f819e973e881cbe02bb62151aed0b113852bf7d98eea6b70d3b74d15f', '\\x6d780bb364072f31dabd92d15393f8d7d7b812d81221053e4c07236b25dbf6c2', '\\x7d4ce1827f3ad12a464d59a5b5feb436a69c0f34736643bbc0ed2600ed6a7d5f', '\\x8565866df946036085f9039e8deaa4e255fafaf081a1177d27f7977d5018b33c', '\\x9bd3c4b5632bc8c0de9a6b2c6ebce9cdd0dc7821793a3740d2ec93b6d76b2326', '\\xc186874ba2ad942528fcd791b4b1e4f38b07f1a80eb7fa071eb5209203d1896f', '\\xcdeb5cb4fc3d7abc08bef118feb3bb8bac41628b597bc03e9abcf837e1c1373c', '\\xd063e9dc5084706abdf6eb0388e26cb8020f6ef46bca99e11dc167a14be5aa6f', '\\xe69d21072fe10cbaceb59db6caae0451723c19a5fa3b29415b262f7237c9d8e5', '\\xe9e6484b51ccb448dd917eef990e147dde1a016afb3c24c4ef2123aa4f1d83c6')\n*/\n"}
{"prompt": "This query returns the total number of distinct user deposits and withdrawals from the Pool Together contract on a daily basis.", "completion": " WITH deposits AS (SELECT\n    date_trunc('day', tx.block_time)\n    , SUM(dai.wad / (1e18)) as dai_added\nFROM makermcd.\"DAI_evt_Transfer\" dai\nLEFT JOIN ethereum.\"transactions\" tx ON dai.evt_tx_hash = tx.hash\nWHERE dai.dst = '\\x29fe7d60ddf151e5b52e5fab4f1325da6b2bd958'\nAND dai.src != '\\x0000000000000000000000000000000000000000'\nGROUP BY 1)\n, withdrawals AS (SELECT\n    date_trunc('day', tx.block_time)\n    , SUM(dai.wad / (1e18)) as dai_withdrawn\nFROM makermcd.\"DAI_evt_Transfer\" dai\nLEFT JOIN ethereum.\"transactions\" tx ON dai.evt_tx_hash = tx.hash\nWHERE dai.src = '\\x29fe7d60ddf151e5b52e5fab4f1325da6b2bd958'\nAND dai.dst != '\\x5d3a536e4d6dbd6114cc1ead35777bab948e3643'\nGROUP BY 1)\n\n, net_dai_per_day AS (SELECT\n    deposits.date_trunc\n    , deposits.dai_added - withdrawals.dai_withdrawn as net_dai\nFROM deposits\nLEFT JOIN withdrawals\nON deposits.date_trunc = withdrawals.date_trunc)\n\nSELECT\n    date_trunc\n    , net_dai\n    , SUM(net_dai) OVER (ORDER BY date_trunc ASC) as total\nFROM net_dai_per_day\nORDER BY date_trunc ASC"}
{"prompt": "This SQL query returns the number of contract-to-contract calls that have been made on the Ethereum blockchain over time. The query groups the data by day, in order to show how many contract-to-contract calls have been made each day.", "completion": " select\n    date_trunc('day', tx.block_time) AS day, count(*)\nfrom\n    ethereum.transactions tx\ninner join\n    ethereum.traces A\non \n    tx.block_hash = A.block_hash\nwhere\n  (A.call_type = 'callcode' OR A.call_type = 'call' OR A.call_type = 'delegatecall' OR\n  A.call_type = 'staticcall')\n group by tx.block_time\n ORDER BY tx.block_time DESC"}
{"prompt": "The query returns the document with the ID 'select 1;' and the name 'Something'.", "completion": " select 1;"}
{"prompt": "This query finds the average price of GNO on the DutchX exchange, compared to the average price of GNO on the market, and calculates the GNO discount (in terms of percentage) for each day.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    avg(\"sellVolume\" / \"buyVolume\") as \"DutchX price\",\n    avg(gno.average / eth.average) as \"Market price\",\n    (avg(gno.average / eth.average) / avg(\"sellVolume\" / \"buyVolume\")  - 1)*100 as \"GNO discount\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" gno \n\nWHERE \"sellToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND \"buyToken\" = '\\x6810e776880c02933d47db1b9fc05908e5386b96'  --gno\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', gno.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND gno.symbol = 'GNO'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "This SQL query calculates the sum of inbound and outbound calls for a specific phone number.", "completion": " WITH inbound AS(\nSELECT SUM(rad/1e45) as inb FROM makermcd.\"VAT_call_move\"\nWHERE dst = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success),\n\noutbound AS(\n\nSELECT SUM(-rad/1e45) as outb FROM makermcd.\"VAT_call_move\"\nWHERE src = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\n)\n\nSELECT SUM(inb + outb)\nFROM inbound, outbound"}
{"prompt": "This SQL query returns the cumulative net deposits for the SAI pool over the past 60 days.", "completion": " WITH deposits AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(amount/1e18) as deposit\nFROM pooltogether_v2.\"Pool3_evt_Deposited\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\n),\n\nwithdrawals AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(amount/1e18) as withdraw\nFROM pooltogether_v2.\"Pool3_evt_Withdrawn\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT deposits.day, \nsum(deposit-withdraw) as net_deposits,\nsum(sum(deposit-withdraw)) over (order by deposits.day) as cumulative_net_deposits\nFROM deposits\nLEFT JOIN withdrawals ON deposits.day = withdrawals.day\nWHERE deposits.day < now() - interval '74 days'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 60\n\n"}
{"prompt": "This query returns information on the 100 most recent liquidations on the dYdX platform. The returned information includes the transaction hash, the addresses of the liquidator and the liquidated party, the markets being liquidated, the updated balances of the liquidated party's account, and the block timestamp.", "completion": " SELECT\n    eth.block_time AS ttime,\n    eth.hash AS \"txHash\",\n    eth.from AS \"liquidatorAddress\",\n    liq.\"owedMarket\",\n    liq.\"heldMarket\",\n    liq.\"solidAccountOwner\",\n    liq.\"liquidAccountOwner\",\n    liq.\"solidHeldUpdate\",\n    liq.\"solidOwedUpdate\",\n    liq.\"liquidHeldUpdate\",\n    liq.\"liquidOwedUpdate\"\nFROM dydx.\"SoloMargin_evt_LogLiquidate\" liq\nJOIN ethereum.transactions eth ON eth.hash = liq.tx_hash\nORDER BY eth.block_time DESC\nLIMIT 100\n"}
{"prompt": "This query returns the total amount of each ERC20 token symbol bet by the specified user address in the current year, as well as the datetime and symbol for each bet.", "completion": " WITH data as (\nSELECT \ndate_trunc('minute', tx.block_time) as datetime,\ne.from as user_address,\ne.value/1e18 as amount,\nt.symbol,\ne.evt_tx_hash,\np_weth.price as  curr_weth_price\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\nJOIN prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 p_weth on (p_weth.symbol = t.symbol AND p_weth.minute = datetime)\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\nAND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n)\n\n\ncase \n\n\n\nSELECT data.datetime, sum(data.amount ), data.symbol\nFROM data\nGROUP BY 1, 3\n"}
{"prompt": "This SQL query retrieves the first 10 results from the \"Exchange_call_filled\" table in the zeroex database.", "completion": " select * from zeroex.\"Exchange_call_filled\" LIMIT 10;"}
{"prompt": "The following SQL query will return the number of distinct stakers for the ZRX token, grouped by hour and ordered by the most recent hour first, for the past 110 hours.", "completion": " SELECT\ndate_trunc('hour', block_time) as hour,\ncount(distinct \"_from\") as stakers FROM zeroex.\"ZRXToken_evt_Transfer\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE \"_to\" = '\\xBa7f8b5fB1b19c1211c5d49550fcD149177A5Eaf' and p.symbol = 'ZRX'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 110\n"}
{"prompt": "This SQL query counts the number of transactions with the hash value 'x6456bff197f8e9764741e104e0be45155998e02887487e82d7b996c0200e68d1'.", "completion": " select count(*) as \"rezultat\"\nFROM ethereum.\"transactions\"\nwhere hash='\\x6456bff197f8e9764741e104e0be45155998e02887487e82d7b996c0200e68d1'\n"}
{"prompt": "This query returns a list of all Monolith contracts sorted by the number of transactions they have processed.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x95BEBe7bfc6aCc186C13D055D0Aacc2DE5f81502','\\xb24d47364163f909e64cf2cf7788d22c51cea851', '\\x85bb8a852c29d8f100cb97ecdf4589086d1be2dd') -- Monolith deployers\n\t    and type = 'create'\n),\nperaddress as (\n    select w.address as address, count(distinct el.tx_hash) as transactions\n    from ethereum.logs el\n    join ethereum.blocks eb \n    \ton el.block_number = eb.\"number\"\t\n    join wallets w\n        on w.address = el.contract_address\n    where topic1 in (\n\t\t\t'\\xd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee',  -- Transferred event\n\t\t\t'\\xd4f62f23021706247dcffea245d104ae7ddaec7f23acf3d11d7136d5de6a69ad', -- BulkTransfer\n\t\t\t'\\xaf022f6b53b11c364e2dfc0aea08eb9416c94f2661451ea82ead8831385617a6' -- ExecutedTransaction\n\t\t\t)\n    group by 1)\nselect ROW_NUMBER() OVER(ORDER BY transactions desc) AS n, concat('https://etherscan.io/address/0',right(text(address),41)) as address, transactions\nfrom peraddress\norder by transactions desc"}
{"prompt": "This SQL query returns the number of addresses that accounted for 90% of the total USD value borrowed from the Compound protocol in the past week.", "completion": " \n\n/* WITH sumAccount AS\n  (SELECT date_trunc('week', tx.block_time) AS weekStarting,\n          SUM((b.amount / 1e18) * p.average) AS usdAmount,\n          account\n   FROM compoundv1.\"MoneyMarket_evt_BorrowTaken\" b,\n        ethereum.transactions tx,\n        coincap.\"tokens/usd\" p\n   WHERE b.tx_hash = tx.hash\n     AND b.\"asset\" = p.asset\n     AND date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\n     AND p.time > date_trunc('week', CURRENT_DATE) - interval '1 week'\n     AND p.time < date_trunc('week', CURRENT_DATE)\n     AND tx.success = TRUE\n   GROUP BY weekStarting,\n            account\n   ORDER BY weekStarting)\n   \nSELECT COUNT(account)\nFROM sumAccount\nWHERE usdAmount >\n    (SELECT percentile_cont(0.9) WITHIN\n     GROUP (\n            ORDER BY usdAmount)\n     FROM sumAccount);\n\n*/"}
{"prompt": "This query returns the number of unique domains generated, the number of unique addresses participated, the sum of ETH spent, and the sum of USD spent.", "completion": " SELECT COUNT (DISTINCT label) AS unique_domains_generated,\n    COUNT (DISTINCT owner) AS unique_addresses_participated,\n    SUM (tx.value/1e18) eth_spent, --probably not correct method\n    SUM (tx.value/1e18 * p.price) usd_spent --probably not correct method\nFROM ethereumnameservice.\"ENSRegistry_evt_NewOwner\" r\n-- I would remove everything below here and do a separate query for spening ETH and USD.\n-- This query is also very very slow now\nLEFT JOIN ethereum.transactions tx\nON tx.hash = r.evt_tx_hash\nLEFT JOIN prices.layer1_usd_eth p\nON p.minute = date_trunc('minute', tx.block_time)"}
{"prompt": "This query calculates the total USD value of Maker collateral. It does this by looking at all transfers of Maker collateral from and to addresses associated with Maker, and then summing up the USD value of those transfers using the latest price data for each collateral token.", "completion": " WITH transfers AS (\n    SELECT t.contract_address, \n    sum(amount/10^decimals) AS amount\n    FROM (\n        SELECT  tr.contract_address,\n                value AS amount\n        FROM erc20.\"ERC20_evt_Transfer\" tr\n        WHERE \"to\" IN (SELECT address FROM makermcd.\"collateral_addresses\")\n        AND evt_block_time > '2019-11-12'\n        \n\n        UNION ALL\n        \n        SELECT  tr.contract_address,\n                -value AS amount\n        FROM erc20.\"ERC20_evt_Transfer\" tr\n        WHERE \"from\" IN (SELECT address FROM makermcd.\"collateral_addresses\")\n        AND evt_block_time > '2019-11-12'\n    ) t \n    LEFT JOIN erc20.tokens erc ON t.contract_address = erc.contract_address\n   GROUP BY 1\n),\n                \nper_token AS\n  \n  (SELECT p.contract_address,\n          symbol,\n          SUM(amount) AS token_amount,\n          SUM(amount * p.price) AS usd_value\n   FROM transfers\n   LEFT JOIN\n     (\n        (\n            SELECT DISTINCT contract_address, symbol, minute, price\n            FROM prices.usd\n            WHERE contract_address IN (SELECT token_address FROM makermcd.\"collateral_addresses\")\n            ORDER BY minute DESC\n            LIMIT (SELECT COUNT(distinct token_address) FROM makermcd.\"collateral_addresses\"))\n        )  p ON transfers.contract_address = p.contract_address\n      GROUP BY  1, 2\n    ) \n \nSELECT SUM(usd_value) AS usd_total\nFROM per_token"}
{"prompt": "The following SQL query returns the total number of users of the Bancor Network over time, sorted by date in ascending order.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(block_time)) AS date,\n                trader_a AS account\n         FROM dex.trades\n         WHERE project = 'Bancor Network'\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(block_time)) AS date,\n                      trader_b AS account\n         FROM dex.trades\n         WHERE project = 'Bancor Network'\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "This query returns the cumulative amount of ZRX that has been staked over time. It does this by first calculating the total amount of ZRX that has been staked on each day, and then joining that to the ZRX price data in order to calculate the value of those stakes in USD. Finally, it orders the data by day in descending order.", "completion": " WITH staked AS \n(\n    SELECT\n    date_trunc('day', evt_block_time) as day,\n    sum(amount/1e18) as value_staked\n    FROM zeroex_v3.\"StakingProxy_evt_Stake\"\n    GROUP BY 1\nUNION \n    SELECT\n    date_trunc('day', evt_block_time) as day,\n    sum(-amount/1e18) as value_staked\n    FROM zeroex_v3.\"StakingProxy_evt_Unstake\"\n    GROUP BY 1\n), \n\nZRX_price AS \n(\nSELECT \nminute, \nprice\nFROM prices.usd \nWHERE symbol = 'ZRX'\n)\n\nSELECT \nday,\nsum(\"value_staked\"*p.price) over (order by day) as cumulative_staked\nFROM staked\nINNER JOIN ZRX_price p ON p.minute = staked.day\nORDER BY 1 desc "}
{"prompt": "This query returns the total USD value of all ERC20 bets made in the last hour, grouped by hour and token symbol.", "completion": " WITH data as (\nSELECT \ndate_trunc('hour', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ncase \nwhen t.symbol= 'WETH' THEN e.value/1e18 * p_weth.price\nWHEN t.symbol = 'DAI' THEN e.value/1e18\nend\nas usd_value,\nt.symbol,\ne.evt_tx_hash\n-- p_weth.price as  curr_weth_price,\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\nJOIN prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 p_weth on (p_weth.symbol = t.symbol AND p_weth.minute = date_trunc('minute', tx.block_time))\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n\nUNION (\nSELECT \ndate_trunc('hour', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ne.value/1e18 as usd_value,\nt.symbol,\ne.evt_tx_hash\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\n-- AND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n)\n)\n\nSELECT data.datetime, sum(usd_value) as total_usd_value, data.symbol\nFROM data \n\nGROUP BY 1, 3\n"}
{"prompt": "This SQL query returns the number of Safes for Teams created in the last 7 days.", "completion": " SELECT count(*) as \"Safes for Teams created (Last 7 days)\"\nFROM gnosis_safe.\"Safev1.0.0_call_setup\" safe\nINNER JOIN (SELECT hash, block_time FROM ethereum.transactions tx\n                WHERE tx.block_time > now() - interval '7 days') tx\nON safe.call_tx_hash = tx.hash\n    WHERE array_length(_owners, 1) < 3 or array_length(_owners, 1) > 4\nLIMIT 1000"}
{"prompt": "This SQL query returns the number of distinct transactions made with Argent contracts. The query first defines a wallets table, which includes the address, creation time, and creation block number for each wallet. The query then joins this table with the ethereum.logs table, filtering out the creation transaction for each wallet. Finally, the query returns the number of transactions made with each contract.", "completion": " WITH wallets AS (\n    select substring(topic2 from 13 for 20) as \"address\", block_time as creation_time, block_number as creation_block_number\n\tfrom ethereum.logs el\n\twhere \n\t(\n\t    topic1 = '\\x5b03bfed1c14a02bdeceb5fa582eb1a5765fc0bc64ca0e6af4c20afc9487f081' \n\t\tand contract_address = '\\x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020'  \n\t) OR (\n\t\ttopic1 = '\\xca0b7dde26052d34217ef1a0cee48085a07ca32da0a918609937a307d496bbf5' \n\t\tand contract_address in (\n\t\t    '\\x40C84310Ef15B0c0E5c69d25138e0E16e8000fE9',\n\t\t    '\\x9ae0AcdB750bFcF694675f46B580847fC49A48bF'\n\t\t)\n\t) OR (\n\t\ttopic1 = '\\xacd43e061b8ee386537b57919358cfa44933c4e47ccd4b2e1916e54133cec748' \n\t\tand contract_address in (\n\t\t    '\\x536384FCd25b576265B6775F383D5ac408FF9dB7',\n\t\t    '\\x1d09a6D1C45d1a9Eb8CB8A8354BCd78e225f06d3'\n\t\t)\n\t)\n)\nselect count(distinct tx_hash) as num_transactions\nfrom ethereum.logs el\njoin wallets w\n    on w.address = el.contract_address and el.block_number <> w.creation_block_number  -- filter out creation tx\nwhere topic1 = '\\x7d2476ab50663f025cff0be85655bcf355f62768615c0c478f3cd5293f807365' -- Invoke event"}
{"prompt": "This SQL query returns the number of unique users that have interacted with the Solana Name Service (SNS) over the past 10 days, grouped by day.", "completion": " SELECT\n    block_date,\n    count(distinct account_keys[0]) as Daily_Active_Users\n    FROM solana.transactions\n\n    WHERE array_contains(account_keys, 'namesLPneVptA9Z5rqUDD9tMTWEJwofgaYwp8cawRkX')\n    AND success = TRUE\n    AND  block_date > now() - interval '10 days'\nGROUP BY block_date\nORDER BY block_date DESC"}
{"prompt": "This SQL query returns the date, volume, and difference for WETH/MKR transactions on the Dutch X exchange versus the market price for those tokens. The data is grouped by day.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    sum(\"sellVolume\" / 1e18 * eth.average) as volume,\n    (avg(\"buyVolume\" / \"sellVolume\") / avg(mkr.average / eth.average)) as difference\n    \n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" mkr \n\nWHERE \"sellToken\" = '\\x9f8F72aA9304c8B593d555F12eF6589cC3A579A2' --mkr\nAND \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', mkr.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND mkr.symbol = 'MKR'\nAND tx.success = true\n\nGROUP BY 1"}
{"prompt": "This SQL query returns the average gas limit per block for the last 50 recent blocks. The gas limit is the maximum amount of gas that can be used in a transaction.", "completion": " /**\n * Get the average gas limit per block for the last 50 recent blocks\n */\nSELECT block_number,\n       avg(gas_limit) AS avg_gas_limit\nFROM ethereum.transactions\nGROUP BY block_number\nORDER BY block_number DESC\nLIMIT 50"}
{"prompt": "The following SQL query returns the number of transactions, volume of transactions, and average transaction volume for the Hero Gacha Pack contract on a daily basis.", "completion": " select date_trunc('day', \"block_time\") as \"\uc77c\uc790\",\n  sum(nft_transfer_count) as \"\uac74\uc218(tx\uc758 \uac74\uc218)\",\n  sum(original_amount) as \"\uac70\ub798 \ubcfc\ub968($)\",\n  sum(original_amount) / sum(nft_transfer_count) as \"\ud3c9\uade0 \ubcfc\ub968($)\"\nfrom seaport.\"transactions\"\nwhere 1 = 1\n  --Desperado: Hero Gacha\n  and \"nft_contract_address\" = '\\x46F9fFF0252375DfE38f8E79C4983f85Cc6E29ea'\ngroup by 1\norder by 1;"}
{"prompt": "This SQL query returns the total amount of ETH bought on Uniswap for each month.", "completion": " SELECT date_trunc('month', tx.block_time) AS month,\n       SUM(eth_bought/1e18) AS ETHbought\nFROM uniswap.\"Exchange_evt_EthPurchase\" u\nLEFT JOIN ethereum.transactions tx\nON u.evt_tx_Hash = tx.hash\nGROUP BY 1;\n\n\n\n\n\n\n\n\n"}
{"prompt": "This query returns the date and ETH volume for each day that an OMG/WETH auction was cleared on the DutchX exchange.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    sum(\"sellVolume\" / 1e18) as ethvolume \n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" omg \n\nWHERE \"sellToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND \"buyToken\" =  '\\xd26114cd6EE289AccF82350c8d8487fedB8A0C07' --omg\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', omg.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND omg.symbol = 'OMG'\nAND tx.success = true\n\nGROUP BY 1"}
{"prompt": "This SQL query returns the total winnings for each week for the past 10 weeks from the DAI Pool.", "completion": " SELECT\ndate_trunc('week', block_time) as week,\nsum(winnings/1e18) as dai_winnings\nFROM pooltogether.\"MCDAwarePool_evt_Rewarded\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This SQL query returns the total amount of ETH deposited to each of the specified Zap addresses, as well as the Zap address itself. The query only includes transactions that were successful, and groups the results by Zap address.", "completion": " SELECT SUM(e.value/1e18) as eth_amount,\ne.to as Zap_address\n-- ,\n-- e.from as user_address\nFROM ethereum.\"transactions\" e\nwhere e.to in ('\\x52fc6455f258760705e70f70160b06619bfe0adb','\\xd17cda470bd0237fae82ef254c84d06d0e4cc02f','\\x8dfcb49766c0296e4373a0300b52c3637614db59','\\x929a10efda7099865dad8286aee8715078902d51','\\x1ee8c303f5ab9b36bc30b9345dec7e9a748fa693','\\x04b35ef193e2357328ae79914569721a7ffd6146','\\xebd5e23927891fbfda10487ccc9a1a1a7b9a4210','\\x20ef0c900f8e7ec3a1a89a761f0670ae9e3dd709','\\x408609f5acab253d41cb5dfce913ff367937313b','\\x8e8b9cf6d411b6c8dacc63c306f2691ed195d91d','\\x13240b97c40d7e306cedf3adc9cb057cec74c361','\\x3b122c376e472ae6ae7a4739bebf7b68e045b285','\\xd3eba712988df0f8a7e5073719a40ce4cbf60b33','\\xe3385df5b47687405a02fc24322dedb7df381852','\\xecb53d65816444dbbf6a326b8df959caeda3faf9','\\x606563f8dc27f316b77f22d14d9cd025b4f70469','\\x21091c5ea13854ab0965090dc4fc20280f1a5730','\\xe4b7b00a802834bea733f06a0a24a869f2765df7','\\x4ebee4cf5ba7de81f222fefa4e5d0c30c4968fff')\nAND\ne.success = 'true'\nGROUP by Zap_address\n-- LIMIT 50"}
{"prompt": "This query returns a list of the top 10 accounts that have spent the most ETH on the Ethereum Name Service (ENS), along with the total amount of ETH spent by each account.", "completion": " SELECT r.owner, SUM (r.value/1e18) ttl_eth_spent\n        FROM ethereumnameservice.\"Registrar_old_evt_HashRegistered\" r\n        GROUP BY 1\n        ORDER BY 2 DESC\n        LIMIT 10"}
{"prompt": "This query returns the difference in price between WBTC and BTC for the past 10 weeks.", "completion": " WITH btc_price AS\n(\nSELECT\ndate_trunc('week', price.minute),\n\"price\" FROM prices.\"usd_btc\" b\nORDER BY 1 desc\nLIMIT 10\n),\n\nwbtc_price AS\n(\nSELECT \ndate_trunc('week', w.minute)\n\"price\" FROM prices.usd_2260fac5e5542a773aa44fbcfedf7c193bc2c599 w\nORDER BY 1 desc\nLIMIT 10\n)\n\nSELECT btc_price.'week', btc_price.\"price\"-wbtc_price.\"price\"\nFROM btc_price\nLEFT JOIN wbtc_price ON btc_price.'week' = wbtc_price.'week'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This query returns the number of GSN transactions relayed per week for the past 10 weeks.", "completion": " SELECT date_trunc('week', block_time), COUNT(*)\nFROM gasstationnetwork.\"RelayHub_evt_TransactionRelayed\" r\nLEFT JOIN ethereum.transactions tx on r.evt_tx_hash = tx.hash\nWHERE block_time > now() - interval '10 weeks'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This query returns the total volume of ETH traded on the Uniswap exchange over the past seven days, in USD.", "completion": " SELECT date_trunc('days', tx.block_time) AS Date,\n       SUM(eth/1e18*p.price) AS volume\nFROM (\n        (SELECT evt_tx_hash,\n                eth_sold AS eth\n         FROM uniswap.\"Exchange_evt_TokenPurchase\")\n      UNION\n        (SELECT evt_tx_hash,\n                eth_bought AS eth\n         FROM uniswap.\"Exchange_evt_EthPurchase\")) ether\nINNER JOIN\n     (SELECT hash,\n             block_time\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '7 days'\n        AND block_time < date_trunc('day', NOW())) tx ON ether.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This query returns the total amount of non-Reuben CNSL holdings.", "completion": " with transfers as \n((SELECT\nreceiver as address, value as CNSL_amount\nFROM erc20.\"Transfer\"\nWHERE\ncontract_address = '\\xea0bea4d852687c45fdc57f6b06a8a92302baabc')\nUNION \n(SELECT \nsender as address, -value as CNSL_amount\nFROM erc20.\"Transfer\"\n\nWHERE\ncontract_address = '\\xea0bea4d852687c45fdc57f6b06a8a92302baabc'))\nSELECT DISTINCT(address), sum(CNSL_amount)/1e18 as CNSL_amount\nFROM transfers\n\nWHERE address != '\\x4389d757fa071fd714fd74afdcc7da384c9a7ede'\nGROUP BY 1\nORDER by 2 desc"}
{"prompt": "This query returns the number of times a GasToken was burned, as well as the total amount of value that was burned.", "completion": " SELECT \n    COUNT(*) as times,\n    SUM(tr.value) as burned\nFROM (\n    SELECT value, evt_tx_hash as tx_hash, evt_block_time as block_time FROM chi.\"ChiToken_evt_Transfer\" WHERE \"to\" = '\\x0000000000000000000000000000000000000000' AND value > 0 UNION ALL\n    SELECT value, call_tx_hash as tx_hash, call_block_time as block_time FROM gastoken.\"GasToken2_call_free\" WHERE call_success AND value > 0 UNION ALL\n    SELECT value, call_tx_hash as tx_hash, call_block_time as block_time FROM gastoken.\"GasToken2_call_freeUpTo\" WHERE call_success AND value > 0 UNION ALL\n    SELECT value, call_tx_hash as tx_hash, call_block_time as block_time FROM gastoken.\"GasToken2_call_freeFrom\" WHERE call_success AND value > 0 UNION ALL\n    SELECT value, call_tx_hash as tx_hash, call_block_time as block_time FROM gastoken.\"GasToken2_call_freeFromUpTo\" WHERE call_success AND value > 0\n) tr\nWHERE tx_hash IN (SELECT tx_hash FROM oneinch.swaps)\n"}
{"prompt": "Select the symbol from the erc20.\"tokens\" table where the contract_address is {{address}}.", "completion": " SELECT symbol\nFROM erc20.\"tokens\"\nWHERE contract_address = {{address}}\n-- '\\x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb'"}
{"prompt": "This query returns the idealcoin balance for each account, taking into account both inbound and outbound transfers.", "completion": " WITH outbound AS\n  (SELECT \"from\",\n          SUM(value/1e18) amt\n   FROM idealcoin.\"IdealCoinToken_evt_Transfer\"\n   GROUP BY 1),\n     inbound AS\n  (SELECT \"to\",\n          SUM(value/1e18) amt\n   FROM idealcoin.\"IdealCoinToken_evt_Transfer\"\n   GROUP BY 1)\nSELECT inbound.\"to\",\n       CASE\n           WHEN outbound.amt IS NULL THEN inbound.amt\n           ELSE inbound.amt - outbound.amt\n       END AS balance\nFROM inbound\nLEFT JOIN outbound ON outbound.\"from\" = inbound.\"to\"\nORDER BY balance DESC;"}
{"prompt": "This SQL query returns the date, token, and USD volume for all purchases made on the Uniswap exchange over the past two months. The query groups the data by date and token, and orders the data by date.", "completion": " SELECT date_trunc('week', tx.block_time) AS Date,\n       p.symbol AS token,\n       SUM(tokens/1e18 * p.average) AS \"USD volume\"\nFROM (\n        (SELECT tx_hash,\n                address,\n                tokens_bought AS tokens\n         FROM uniswap.\"Exchange_evt_TokenPurchase\")\n        UNION ALL\n        (SELECT tx_hash,\n                address,\n                tokens_sold AS tokens\n         FROM uniswap.\"Exchange_evt_EthPurchase\")) tokens\nINNER JOIN ethereum.transactions tx ON tokens.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" p ON date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\nINNER JOIN uniswap.\"Factory_evt_NewExchange\" n on n.exchange = tokens.address\nWHERE tx.block_time > now() - interval '2 months'\n  AND p.asset = n.token\n -- AND tx.success = TRUE\nGROUP BY 1,\n         2\nORDER BY 1;"}
{"prompt": "This SQL query returns the average gas limit per block for the last 50 recent blocks. It includes the block number, the average gas price, the minimum gas price, and the maximum gas price.", "completion": " /**\n * Get the average gas limit per block for the last 50 recent blocks\n */\nSELECT block_number,\n       avg(gas_price) / 10^9 AS avg_gas_price,\n       min(gas_price) / 10^9 AS min_gas_price,\n       max(gas_price) / 10^9 AS max_gas_price\nFROM ethereum.transactions\nGROUP BY block_number\nORDER BY block_number DESC\nLIMIT 50"}
{"prompt": "This SQL query returns the total amount of WBTC borrowed from the Compound v2 contract over the past 50 weeks, grouped by week.", "completion": " SELECT\ndate_trunc('week', block_time) week,\nsum(\"borrowAmount\"/1e8) as wbtc_borrowed FROM compound_v2.\"cErc20_evt_Borrow\" b\nLEFT JOIN ethereum.\"transactions\" tx ON b.evt_tx_hash = tx.hash\nWHERE contract_address = '\\xC11b1268C1A384e55C48c2391d8d480264A3A7F4'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This SQL query returns the top 200 addresses by balance for the given contract address, including the balance in the given token.", "completion": " WITH balances AS materialized\n(\n    SELECT address, SUM(amount_raw) AS amount\n    FROM (\n        SELECT \"from\" AS address, -SUM(value) AS amount_raw\n        FROM bep20.\"BEP20_evt_Transfer\"\n        WHERE contract_address = CONCAT('\\x', substring('{{Contract Address}}' from 3))::bytea\n        GROUP BY 1\n        \n        UNION ALL\n        \n        SELECT \"to\" AS address, SUM(value) AS amount_raw\n        FROM bep20.\"BEP20_evt_Transfer\"\n        WHERE contract_address = CONCAT('\\x', substring('{{Contract Address}}' from 3))::bytea\n        GROUP BY 1\n        \n    ) to_from\n    GROUP BY 1\n),\n \ntoken_info as (\n    select \"contract_address\", \"decimals\", \"symbol\"\n    from bep20.\"tokens\"\n    WHERE contract_address = CONCAT('\\x', substring('{{Contract Address}}' from 3))::bytea limit 1 \n),\n\ntop_address as (\n    SELECT address, amount\n    FROM balances\n    where amount > 0\n    ORDER BY amount desc\n    limit 200\n)\n\nSELECT address, (amount /pow(10, decimals)) as balance\nFROM top_address, token_info ti\nGROUP by address, amount, balance\nORDER BY balance desc\n"}
{"prompt": "This SQL query will select all data from the ethereum.traces table where the to or from address is the same as the address specified in the query. The results will be ordered by the block_number and limited to 1000 results.", "completion": " SELECT * FROM ethereum.traces et\nWHERE et.to = '{{ address }}' OR et.from = '{{ address }}'\nORDER BY et.block_number\nLIMIT 1000"}
{"prompt": "This query returns information about new users on the 0x v2.1 platform. It includes the address, transaction hash, and date of the first trade for each new user.", "completion": " WITH new_user_activity AS\n  ( SELECT activity.*\n   FROM\n     (SELECT \"makerAddress\" AS address,\n             tx_hash,\n             date_trunc('day', tx.block_time) AS time\n      FROM zeroex.\"Exchange21_evt_Fill\" makers\n      INNER JOIN ethereum.transactions tx ON makers.tx_hash = tx.hash\n      UNION ALL SELECT \"takerAddress\" AS address,\n                       tx_hash,\n                       date_trunc('day', tx.block_time) AS time\n      FROM zeroex.\"Exchange21_evt_Fill\" takers\n      INNER JOIN ethereum.transactions tx ON takers.tx_hash = tx.hash) AS activity\n   JOIN\n     (SELECT address,\n             MIN(time) as first_time\n      FROM\n        (SELECT \"makerAddress\" AS address,\n                tx_hash,\n                date_trunc('day', tx.block_time) AS time\n         FROM zeroex.\"Exchange21_evt_Fill\" makers\n         INNER JOIN ethereum.transactions tx ON makers.tx_hash = tx.hash\n         UNION ALL SELECT \"takerAddress\" AS address,\n                          tx_hash,\n                          date_trunc('day', tx.block_time) AS time\n         FROM zeroex.\"Exchange21_evt_Fill\" takers\n         INNER JOIN ethereum.transactions tx ON takers.tx_hash = tx.hash) AS trades\n      GROUP BY address) AS users ON users.address = activity.address\n   AND users.first_time = activity.time)\nSELECT *\nFROM new_user_activity"}
{"prompt": "This SQL query returns the number of CHZWZRDS duels that took place each day, along with the date on which they occurred. The query uses the \"BasicTournament_evt_DuelStart\" and \"ethereum.transactions\" tables to get this information.", "completion": " SELECT date_trunc('day', block_time), count(*)\nFROM chzwzrds.\"BasicTournament_evt_DuelStart\" ds\nINNER JOIN ethereum.transactions tx ON ds.evt_tx_hash = tx.hash\nGROUP BY 1;"}
{"prompt": "The following SQL query returns the total USD and ETH volume for the Kyber project over the last 24 hours.", "completion": " SELECT \"Project\", SUM(usd_volume) AS usd_volume, SUM(eth_volume) AS eth_volume FROM  \n \n(\n\nWITH tx AS (\n    SELECT hash, date_trunc('minute', block_time) as minute\n    FROM ethereum.transactions\n    WHERE block_time > now() - interval '1 days'\n),\n\nprices AS (\n   (\n   SELECT minute, contract_address, symbol, price FROM prices.usd WHERE minute > now() - interval '1 days'\n    AND symbol = 'ETH'\n    )\n),\n\ntokens AS(\n\nSELECT * FROM erc20.tokens \n\n),\n\nkyber_volume_mapping AS (\n\t\tSELECT evt_tx_hash,\n\t\t\tCASE WHEN reserve1 IN ('\\x2295fc6BC32cD12fdBb852cFf4014cEAc6d79C10', '\\x57f8160e1c59D16C01BbE181fD94db4E56b60495', '\\x0000000000000000000000000000000000000000') THEN 0 ELSE \"ethWeiValue\" /1e18 END AS reserve1_eth_volume,\n\t\t\tCASE WHEN reserve2 IN ('\\x2295fc6BC32cD12fdBb852cFf4014cEAc6d79C10', '\\x57f8160e1c59D16C01BbE181fD94db4E56b60495', '\\x0000000000000000000000000000000000000000') THEN 0 ELSE \"ethWeiValue\" /1e18 END AS reserve2_eth_volume\n\t\tFROM kyber.\"Network_evt_KyberTrade\" trade\n\t),\n\tkyber_volume AS (\n\t\tSELECT evt_tx_hash, SUM(reserve1_eth_volume+reserve2_eth_volume) as sumeth\n\t\tFROM kyber_volume_mapping\n\t\tGROUP BY 1\n\t)\n\n\n    SELECT 'Kyber' AS \"Project\",\n            SUM(sumeth) AS eth_volume,\n            SUM(sumeth * p.price) AS usd_volume\n    FROM tx \n    INNER JOIN kyber_volume ON kyber_volume.evt_tx_hash = tx.hash\n    INNER JOIN prices p ON tx.minute = p.minute\n\n    ) AS kyber\n\n  GROUP BY 1;\n   "}
{"prompt": "Select the day and all columns from the prices.\"usd_mkr\" table, limiting the results to 10.", "completion": " SELECT\ndate_trunc('day', p.minute) as day,\n\n* FROM prices.\"usd_mkr\"\nLIMIT 10"}
{"prompt": "This SQL query returns the USD borrow volume per token for the Compound v1 smart contract for the months of April and May 2019. The query joins the smart contract event data on the Ethereum transactions table and the USD price table to calculate the total USD amount borrowed for each token.", "completion": " SELECT date_trunc('month', tx.block_time) AS monthStarting,       --Get the time from the Ethereum transactions table\n       p.symbol AS token,                                       --Get token symbols from the coincap USD price table\n       SUM((b.amount / 1e18) * p.average) AS usdAmount          --Get the amount borrowed from the smart contract event\nFROM compoundv1.\"MoneyMarket_evt_BorrowTaken\" b,                  --Table with the relevant event\n     ethereum.transactions tx,                                  --Table with Ethereum transactions\n     coincap.\"tokens/usd\" p                                     --Table with token/USD prices\nWHERE b.tx_hash = tx.hash                                       --Join the smart contract event on transactions\n  AND b.\"asset\" = p.asset                                       --Join asset from smart contract event with USD prices\n  AND date_trunc('minute', p.time) = date_trunc('minute', tx.block_time) --Join USD price on time from transactions\n  AND date_trunc('month', tx.block_time) < '2019-06-01'                     --See the last two months\n  AND tx.success = TRUE                                         --Remove invalid transactions\nGROUP BY monthStarting,                                          \n         token\nORDER BY monthStarting;"}
{"prompt": "This SQL query retrieves the first 10 results from the Kyber Network Proxy's \"call_getExpectedRate\" function.", "completion": " SELECT * FROM kyber.\"NetworkProxy_call_getExpectedRate\" limit 10"}
{"prompt": "This SQL query returns the total USD value for each token traded on the 0x exchange, grouped by week.", "completion": " SELECT\nprice.symbol,\ndate_trunc('week', tx.block_time) as time,\nCASE WHEN price.symbol = 'USDC' THEN SUM(\"takerAssetFilledAmount\" / 1e6) ----don't multiply by anything as these assets are USD\nWHEN price.symbol = 'TUSD' THEN SUM(\"takerAssetFilledAmount\" /1e18) --don't multiply by anything as these assets are USD\nELSE SUM(\"takerAssetFilledAmount\" /1e18 * price.average ) END AS total_usd_value\n\nFROM zeroex.\"Exchange_evt_Fill\" filled\nINNER JOIN ethereum.transactions tx ON filled.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = price.time AND substring(filled.\"takerAssetData\" from 17) = price.asset\nGROUP BY 1, 2;"}
{"prompt": "This SQL query selects the address from the ethereum.traces table where the \"from\" field is one of the Authereum Wallet Factorys addresses and the type is \"create\".", "completion": " SELECT \n\taddress\nfrom ethereum.traces \nwhere \"from\" in ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8', '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea', '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046') -- Authereum Wallet Factorys\n    and type = 'create';\n\n-- peraddress as (\n--     SELECT address, sum(amount) / 1e18 as amount\n--     FROM (\n--         SELECT \"from\" AS address, -value AS amount\n--          FROM ethereum.traces\n--          WHERE \"from\" IN (SELECT address FROM wallets)\n--          AND tx_success = TRUE\n--          AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n--          and error is null  -- to make the db use an index\n--     UNION ALL\n--         SELECT \"to\" AS address, value AS amount\n--          FROM ethereum.traces\n--          WHERE \"to\" IN (SELECT address FROM wallets )\n--          AND tx_success = TRUE\n--          AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n--          and error is null  -- to make the db use an index\n--     ) t\n--     group by 1\n-- )\n-- select ROW_NUMBER() OVER(ORDER BY amount desc) AS n, concat('https://etherscan.io/address/0',right(text(address),41)) as address, amount as eth_amount\n-- from peraddress\n-- order by amount desc"}
{"prompt": "This SQL query returns the total number of transactions made by each user for each cryptocurrency symbol.", "completion": " WITH data as (\nSELECT \ndate_trunc('day', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ncase \nwhen t.symbol= 'WETH' THEN e.value/1e18 * p_weth.price\nWHEN t.symbol = 'DAI' THEN e.value/1e18\nend\nas usd_value,\nt.symbol,\ne.evt_tx_hash\n-- p_weth.price as  curr_weth_price,\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\nJOIN prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 p_weth on (p_weth.symbol = t.symbol AND p_weth.minute = date_trunc('minute', tx.block_time))\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\nAND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n\nUNION (\nSELECT \ndate_trunc('day', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ne.value/1e18 as usd_value,\nt.symbol,\ne.evt_tx_hash\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\n-- AND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n)\n)\n\nSELECT COUNT(data.user_address), data.symbol\nFROM data \nGROUP BY 2\n"}
{"prompt": "This SQL query calculates the reputation score for the dxDAO. The reputation score is based on the sum of the amounts locked in the MGN and ETH 4 Rep contracts, the sum of the amounts locked in the whitelisted tokens contracts, and the sum of the amounts bid in the GEN Auction contracts.", "completion": " WITH mgn_score (name, score) AS (\n    SELECT 'MGN'::text, SUM(_amount) / 1e18 * 500000\n    FROM dxdao.\"DxLockMgnForRep_evt_Lock\"\n),\neth_score (name, score) AS (\n    SELECT 'ETH'::text, SUM(_amount) / 1e18 * 80000\n    FROM dxdao.\"DxLockEth4Rep_evt_Lock\"\n),\n_token_score(token, score) AS (\n    SELECT _token, SUM((_amount / 1e18) * (_numerator/_denominator) * _period) * 300000\n    FROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\" l INNER JOIN dxdao.\"DxLockWhitelisted4Rep_evt_LockToken\" lt\n    ON l.\"_lockingId\" = lt.\"_lockingId\"\n    GROUP BY 1\n),\ntoken_score (name, score) AS (\n    SELECT 'TOKEN'::text, SUM(score)\n    FROM _token_score\n),\n_gen_auction_score(auction, score) AS (\n    SELECT \"_auctionId\", SUM((_amount/1e18) * 10000)\n    FROM dxdao.\"DxGenAuction4Rep_evt_Bid\"\n    GROUP BY 1\n),\ngen_auction_score(name, score) AS (\n    SELECT 'GENAUCTION'::text, SUM(score)\n    FROM _gen_auction_score\n)\nSELECT name, score FROM mgn_score UNION\n(SELECT name, score FROM eth_score) UNION\n(SELECT name, score FROM token_score) UNION\n(SELECT name, score FROM gen_auction_score)\n"}
{"prompt": "This query calculates the USD value of all ETH stored in Dapper contracts. It does this by looking at all ETH transfers made to and from addresses associated with Dapper contracts, and then multiplying the total amount of ETH by the latest ETH price in USD.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\xa78bbf97033e534c54b0a4fa62aa77b652ae4097', '\\xab76c6d00c603a7615d5459132c1745eb1fb4f6c') -- Dapper  WalletFactories \n\tand type = 'create'\n),\nall_transfers as (\n    SELECT address, amount / 1e18 as amount\n    FROM (\n        SELECT \"from\" AS address, -value AS amount\n         FROM ethereum.traces\n         join wallets\n         \ton \"from\" = wallets.address and creation_block_number <= block_number\n         WHERE -- \"from\" IN (SELECT address FROM wallets)\n         tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n         and block_number >= 7249926 -- blocknumber of first dapper contract\n    UNION ALL\n        SELECT \"to\" AS address, value AS amount\n         FROM ethereum.traces\n         join wallets\n         \ton \"to\" = wallets.address and creation_block_number <= block_number\n         WHERE -- \"from\" IN (SELECT address FROM wallets)\n         tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n         and block_number >= 7249926 -- blocknumber of first dapper contract\n    ) t\n)\nselect sum(amount) * (SELECT price FROM prices.usd WHERE symbol = 'ETH' ORDER BY minute desc LIMIT 1) as usd_value\nfrom all_transfers"}
{"prompt": "This query is for finding the outstanding amount of Dai in the system, both minted and burnt. It first calculates the amount of Dai minted each day, then the amount of Dai burnt each day, and then finds the net amount of Dai minted each day. Finally, it calculates the total amount of Dai outstanding each day.", "completion": " WITH DAI_mint AS \n(\nSELECT\ndate_trunc('day', call_block_time) as day,\nsum(wad/1e18) as dai_minted\nFROM makermcd.\"DAI_call_mint\" \nWHERE call_success = 'true'\nGROUP BY 1 \nORDER BY 1 desc\n),\n\nDAI_burn AS \n(\nSELECT\ndate_trunc('day', call_block_time) as day,\nsum(wad/1e18) as dai_burnt\nFROM makermcd.\"DAI_call_burn\" \nWHERE call_success = 'true'\nGROUP BY 1 \nORDER BY 1 desc\n),\n\nDAI_net_mint AS\n(\nSELECT\ndai_mint.day as day,\nsum(dai_minted-dai_burnt) as net_dai_mint\nFROM dai_mint\nLEFT JOIN dai_burn ON dai_mint.day = dai_burn.day\nGROUP BY 1\nORDER BY 1 desc\n),\n\nDSR_inbound AS\n(\nSELECT \ndate_trunc('day', call_block_time) as day,\nsum(rad/1e45) as inb \nFROM makermcd.\"VAT_call_move\"\nwhere dst = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\nGROUP BY 1\nORDER BY 1 desc\n),\n\nDSR_outbound AS\n(\nSELECT \ndate_trunc('day', call_block_time) as day,\nsum(-rad/1e45) as outb \nFROM makermcd.\"VAT_call_move\"\nWHERE src = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\nGROUP BY 1\nORDER BY 1 desc\n),\n\nDSR_total AS\n(\nSELECT \nDSR_inbound.day,\nsum(inb + outb) as net_DSR\nFROM DSR_inbound\nLEFT JOIN DSR_outbound ON DSR_inbound.day = DSR_outbound.day\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT dai_net_mint.day,\nsum(dai_net_mint.net_dai_mint + net_DSR) as net_dai_mint,\nsum(sum(net_dai_mint + net_DSR)) over (order by dai_net_mint.day) as outstanding_dai\nFROM dai_net_mint\nLEFT JOIN DSR_total ON dai_net_mint.day = DSR_total.day\nGROUP BY 1 \nORDER BY 1 desc\n"}
{"prompt": "This SQL query returns the total USD value for each token traded on the 0x exchange. The query joins data from the \"Exchange_evt_Fill\" and \"tokens/usd\" tables, grouped by token symbol.", "completion": " SELECT price.symbol, SUM(\"takerAssetFilledAmount\" /1e18 * price.average ) AS total_usd_value\nFROM zeroex.\"Exchange_evt_Fill\" filled\nINNER JOIN ethereum.transactions tx ON filled.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = price.time AND substring(filled.\"takerAssetData\" from 17) = price.asset\nGROUP BY price.symbol;"}
{"prompt": "This SQL query returns the block time, value in ETH, and value in USD for all transactions involving the contract address b932a70a57673d89f4acffbe830e8ed7f75fb9e0. The USD value is calculated using the price of ETH at the time of the transaction. The query is sorted in descending order by the value in ETH.", "completion": " SELECT block_time,\n       value / 1e18 / 0.85 AS eth_price,\n       value / 1e18 / 0.85 * price AS usd_price\nFROM ethereum.\"traces\" tr\nINNER JOIN prices.\"layer1_usd_eth\" p ON date_trunc('minute', tr.block_time) = p.minute\nWHERE tx_hash IN\n    (SELECT evt_tx_hash\n     FROM erc721.\"ERC721_evt_Transfer\"\n     WHERE contract_address = '\\xb932a70a57673d89f4acffbe830e8ed7f75fb9e0'\n       AND \"from\" = '\\x6d54ce2652a9a544b97352ff711a0598169b989f')\n  AND \"to\" = '\\x6d54ce2652a9a544b97352ff711a0598169b989f'\nORDER BY 2 DESC"}
{"prompt": "This SQL query returns the following information:\n\n- The row number of the artwork sold\n- The date the artwork was sold\n- The ID of the artwork\n- The artist who sold the artwork\n- The collector who bought the artwork\n- The price of the artwork in USD\n\nThis query gets its data from the SuperRareMarketAuction_evt_Sold, SuperRare_evt_Sold, SuperRareMarketAuction_evt_AcceptBid, and SuperRare_evt_AcceptBid tables, and uses the prices from the layer1_usd_eth table to calculate the price of the artwork in USD.", "completion": " SELECT ROW_NUMBER() OVER(\n                         ORDER BY round((\"_amount\" / 1e18 * p.price)::numeric, 2) DESC) AS n,\n       evt_block_time AS date_sold,\n       \"_tokenId\" AS id,\n       \"_seller\" AS artist,\n       \"_buyer\" AS collector,\n       round((\"_amount\" / 1e18 * p.price)::numeric, 2) AS price_usd\nFROM\n  (SELECT evt_block_time,\n          \"_tokenId\",\n          \"_seller\",\n          \"_buyer\",\n          \"_amount\"\n   FROM superrare.\"SuperRareMarketAuction_evt_Sold\"\n   UNION ALL SELECT evt_block_time,\n                    \"_tokenId\",\n                    \"_seller\",\n                    \"_buyer\",\n                    \"_amount\"\n   FROM superrare.\"SuperRare_evt_Sold\"\n   UNION ALL SELECT evt_block_time,\n                    \"_tokenId\",\n                    \"_seller\",\n                    \"_bidder\",\n                    \"_amount\"\n   FROM superrare.\"SuperRareMarketAuction_evt_AcceptBid\"\n   UNION ALL SELECT evt_block_time,\n                    \"_tokenId\",\n                    \"_seller\",\n                    \"_bidder\",\n                    \"_amount\"\n   FROM superrare.\"SuperRare_evt_AcceptBid\") a\nINNER JOIN prices.layer1_usd_eth p ON date_trunc('minute', a.evt_block_time) = p.minute\nORDER BY price_usd DESC"}
{"prompt": "This SQL query returns the number of unique traders for a particular market maker. It also returns the total amount invested by each market maker.", "completion": " SELECT count(distinct(trades.transactor)) as traders\nFROM gnosis.\"Sight_MarketMaker_evt_AMMOutcomeTokenTrade\" trades, ethereum.\"transactions\" transactions,\n(select factory.\"lmsrMarketMaker\" as address from gnosis.\"Sight_MarketMakerFactory_evt_LMSRMarketMakerCreation\" factory where factory.contract_address='\\x37186b5d78ebb1f37bc56e5dca7f18ab98256c4b' and factory.creator='\\x7949b0b936e2e5d5e391f955cfd77a80cc37e9ad') market_makers\nWHERE trades.evt_tx_hash=transactions.hash\nAND trades.contract_address=market_makers.address\nAND transactions.from='\\x7949b0b936e2e5d5e391f955cfd77a80cc37e9ad';\n\nselect * from ethereum.transactions txs\nwhere txs.to='\\x37186b5d78ebb1f37bc56e5dca7f18ab98256c4b' and txs.from='\\x05a6b64cd0eeb21aaeeb106e3d707300307f8df0'\n\n\nselect factory.\"lmsrMarketMaker\" as address from gnosis.\"Sight_MarketMakerFactory_evt_LMSRMarketMakerCreation\" factory where factory.contract_address='\\x37186b5d78ebb1f37bc56e5dca7f18ab98256c4b' and factory.creator='\\x7949b0b936e2e5d5e391f955cfd77a80cc37e9ad'\n\n\nSELECT market_makers.address as Market_Makers, \nselect sum(trades.\"outcomeTokenNetCost\"::decimal/1e18) as Total_Invested\nFROM gnosis.\"Sight_MarketMaker_evt_AMMOutcomeTokenTrade\" trades, \nethereum.\"transactions\" transactions,\n(select factory.\"lmsrMarketMaker\" as address from gnosis.\"Sight_MarketMakerFactory_evt_LMSRMarketMakerCreation\" factory where factory.contract_address='\\x37186b5d78ebb1f37bc56e5dca7f18ab98256c4b' and factory.creator='\\x7949b0b936e2e5d5e391f955cfd77a80cc37e9ad') market_makers\nWHERE trades.contract_address=market_makers.address\nand transactions.hash=trades.evt_tx_hash\nand transactions.success=true\nand trades.\"outcomeTokenNetCost\">0  --buy trades\ngroup by  market_makers.address\norder by Total_Invested desc\n"}
{"prompt": "This query returns the number of unique senders of DAI for each month since January 2019.", "completion": " SELECT date_trunc('month', tx.block_time) AS MONTH,\n       COUNT(DISTINCT src)\nFROM\n(SELECT * FROM maker.\"SAI_evt_Transfer\" \nUNION ALL\nSELECT * FROM makermcd.\"DAI_evt_Transfer\") m\nLEFT JOIN ethereum.transactions tx ON m.evt_tx_hash = tx.hash\nWHERE tx.block_time >= '1/1/2019'\n  AND block_time < date_trunc('month', CURRENT_DATE)::date\nGROUP BY 1;"}
{"prompt": "This SQL query returns the block time and amount of supply for the asset \"89d24a6b4ccb1b6faa2625fe562bdd9a23260359\" from the table \"MoneyMarket_evt_SupplyReceived\" in the database \"compound\". The query joins the table \"ethereum.transactions\" on the column \"tx_hash\" and filters for successful transactions only. The results are ordered by block time.", "completion": " SELECT tx.block_time,\n       supply.amount / 1e18\nFROM compound.\"MoneyMarket_evt_SupplyReceived\" supply\nJOIN ethereum.transactions tx ON supply.tx_hash = tx.hash\nWHERE encode(supply.asset, 'hex') = '89d24a6b4ccb1b6faa2625fe562bdd9a23260359'\n  AND success = TRUE\nORDER BY tx.block_time"}
{"prompt": "This SQL query returns the total purchase amount for each asset on dYdX for every day in the current year.", "completion": " \nwith data as (\n    SELECT eth.block_time AS ttime,\n      dep.\"evt_tx_hash\" AS \"txHash\",\n      dep.\"takerAccountOwner\" AS \"takerAddress\",\n        CASE dep.\"outputMarket\"::integer \n            WHEN 0 THEN\n                CASE\n                    WHEN char_length((dep.\"takerOutputUpdate\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"takerOutputUpdate\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"takerOutputUpdate\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 1 THEN\n                CASE\n                    WHEN char_length((dep.\"takerOutputUpdate\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"takerOutputUpdate\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"takerOutputUpdate\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 2 THEN\n                CASE\n                    WHEN char_length((dep.\"takerOutputUpdate\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 6 THEN\n                        ('0.' || LPAD((dep.\"takerOutputUpdate\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 6, '0'))::decimal\n                    ELSE\n                        ((dep.\"takerOutputUpdate\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e6)::decimal\n                END\n                            WHEN 3 THEN\n                CASE\n                    WHEN char_length((dep.\"takerOutputUpdate\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"takerOutputUpdate\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"takerOutputUpdate\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n        END AS \"purchaseAmount\",\n      CASE dep.\"outputMarket\"::integer \n      WHEN 0 THEN\n        'ETH'::text\n      WHEN 1 THEN\n        'SAI'::text\n      WHEN 2 THEN\n        'USDC'::text\n         WHEN 3 THEN\n        'DAI'::text\n      END AS \"Asset\"\nFROM dydx.\"SoloMargin_evt_LogTrade\" dep\nJOIN ethereum.transactions eth ON eth.hash = dep.evt_tx_hash\nWHERE date_trunc('day', eth.block_time) >= date_trunc('year', now()) \n-- add ~  - interval '1 day'  ~ here to shift by any days/weeks or months if desired \nORDER BY eth.block_time DESC)\n\nSELECT\n  date_trunc('day', ttime),\n  sum(\"purchaseAmount\") over (partition by \"Asset\" order by data.ttime) AS \"sum\",\n  \"Asset\"\nfrom data\n-- GROUP by 1\n\n-- LIMIT 5"}
{"prompt": "This query returns the number of trades per day.", "completion": " -- Note: this query does not yet include reverted trades. \n\nSELECT\ndate_trunc('day', block_time) as day,\nCOUNT (\"evt_tx_hash\") as \"#trades\"\nFROM gnosis_protocol.\"BatchExchange_evt_Trade\" trade\nJOIN ethereum.\"transactions\" transactions\n  ON transactions.hash=trade.evt_tx_hash\n  AND transactions.success=true\nGROUP BY \"day\"\nORDER BY \"day\" desc;"}
{"prompt": "This SQL query returns the total miner payments in USD for each day.", "completion": " SELECT\n  date_trunc('day', block_timestamp) as day,\n  SUM(a.miner_payment_usd) AS `Miner Paym. ($)`\nFROM\n  flashbots.mev_summary a\n  LEFT JOIN ethereum.transactions b ON b.hash = a.transaction_hash\nWHERE\n  b.success = 'true'\n  OR b.success IS NULL\nGROUP BY\n  1\nORDER BY\n  1 ASC"}
{"prompt": "This query returns the total amount of iSAI held by each address, ordered by the amount of iSAI held.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    -tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address = '\\x14094949152eddbfcd073717200da82fed8dc960' -- iSAI\nUNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\x14094949152eddbfcd073717200da82fed8dc960' -- iSAI\n)\n\nSELECT address, sum(amount)/1e18 as total_idai_held\nFROM transfers\n-- WHERE address = '\\x0000000000000000000000000000000000000000'\nGROUP BY 1\nORDER BY 2 desc\n-- LIMIT 25\n"}
{"prompt": "This query returns the total number of users of the Augur platform over time. It does this by first finding the date and number of users for each day, then summing the users over time.", "completion": " \nSELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(f.evt_block_time)) AS date,\n                creator AS account\n         FROM augur.\"Augur_evt_OrderFilled\" f\n         INNER JOIN augur.\"Augur_evt_OrderCreated\" c ON f.\"orderId\" = c.\"orderId\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(f.evt_block_time)) AS date,\n                      filler AS account\n         FROM augur.\"Augur_evt_OrderFilled\" f\n         INNER JOIN augur.\"Augur_evt_OrderCreated\" c ON f.\"orderId\" = c.\"orderId\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      \"from\" AS account\n         FROM augur_v2.\"AugurTrading_evt_OrderEvent\" a\n         INNER JOIN ethereum.\"transactions\" tx ON a.evt_tx_hash = tx.hash\n         AND block_time >= '2020-07-28'\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "This SQL query shows the number of MGN lockers and ETH lockers over time.", "completion": " WITH MGN AS\n  (SELECT DATE_TRUNC('day'\n                     FROM tx.block_time) AS DAY,\n          COUNT(DISTINCT msg.sender) as MGNlockers\n   FROM MGNRegistrationScheme.register,\n        ethereum.transactions tx\n   ORDER BY 1),\n\nETH AS\n  (SELECT DATE_TRUNC('day'\n                     FROM tx.block_time) AS DAY,\n          COUNT(DISTINCT msg.sender) as ETHlockers\n   FROM DxLockEth4Rep,\n        ethereum.transactions tx\n   ORDER BY 1)\n   \n SELECT MGN.DAY, MGNlockers, ETHlockers\n FROM MGN \n LEFT JOIN ETH \n ON MGN.DAY = ETH.DAY\n \n --- Problem: need to accumulate over time,\n --- and when use OVER a user that locks in two different weeks would be counted twice...?\n "}
{"prompt": "This SQL query returns the number of liquidations that occurred on dYdX on each day, broken down by the market that was owed and the market that was held.", "completion": " SELECT\n    date_trunc('day', eth.block_time) AS ddate,\n    liq.\"owedMarket\",\n    liq.\"heldMarket\",\n    COUNT(*) AS \"numLiquidations\"\nFROM dydx.\"SoloMargin_evt_LogLiquidate\" liq\nJOIN ethereum.transactions eth ON eth.hash = liq.tx_hash\nGROUP BY ddate, liq.\"owedMarket\", liq.\"heldMarket\"\nORDER BY ddate, liq.\"owedMarket\", liq.\"heldMarket\"\n\n"}
{"prompt": "This SQL query returns the number of ETH prices for each day, starting from the most recent day.", "completion": " SELECT date_trunc('day', p.minute), COUNT(*)-1440\nFROM prices.usd p\nWHERE symbol = 'ETH'\nAND date_trunc('day', p.minute) < date_trunc('day', now())\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 200; "}
{"prompt": "This query returns all Erasure Bay requests, including the block time, description, DAI reward, DAI stake, attack period, punishment ratio, requester, and fulfiller. If the contract address has a positive DAI balance, or if the fulfiller is not null, the request will be included in the results. The results are ordered by block time, with the most recent requests first.", "completion": " WITH dai_amount AS\n  (SELECT address,\n          sum(amount)/1e18 AS amount\n   FROM\n     (SELECT \"to\" AS address,\n             value AS amount\n      FROM erc20.\"ERC20_evt_Transfer\"\n      WHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n        AND \"to\" IN\n          (SELECT contract_address\n           FROM erasure_bay.\"view_request_data\")\n      UNION ALL SELECT \"from\" AS address, -value AS amount\n      FROM erc20.\"ERC20_evt_Transfer\"\n      WHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n        AND \"from\" IN\n          (SELECT contract_address\n           FROM erasure_bay.\"view_request_data\")) table1\n   GROUP BY address)\nSELECT r.block_time,\n       description,\n       dai_reward,\n       r.dai_stake,\n       attack_period,\n       punishment_ratio,\n       requester,\n       fulfiller\nFROM erasure_bay.\"view_request_data\" r\nLEFT JOIN erasure_bay.\"view_deposit_stake\" d ON r.contract_address = d.contract_address\nWHERE\n    (SELECT amount\n     FROM dai_amount\n     WHERE address = r.contract_address) > 0\n  OR fulfiller IS NOT NULL\nORDER BY block_time DESC"}
{"prompt": "The following SQL query counts the number of trades made on the 0x exchange in the past week. It does this by joining the \"Exchange21_evt_Fill\" and \"transactions\" tables on the \"tx_hash\" column, and then filtering for transactions that occurred within the past week.", "completion": " SELECT  COUNT(*)\nFROM zeroex.\"Exchange21_evt_Fill\" f\nINNER JOIN ethereum.transactions tx ON f.tx_hash = tx.hash\nWHERE tx.block_time > date_trunc('week', current_date)::date - 7 \nAND tx.block_time < date_trunc('week', current_date)::date\n\n"}
{"prompt": "This SQL query returns the date and time of the most recent 10 MKR burns, as well as the total amount of MKR burned.", "completion": " SELECT \ndate_trunc('day', tx.block_time) AS day, \nSUM(wad/1e18*p.price) AS MKR_burn\nFROM maker.\"MKR_call_burn\" m\nLEFT JOIN ethereum.transactions tx ON tx.hash = m.call_tx_hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE p.symbol = 'MKR' AND m.call_success = 'true'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n\nSELECT \ndate_trunc('week', block_time) AS week,\n* FROM maker.\"MKR_evt_Transfer\" mkr\nLEFT JOIN ethereum.transactions tx ON mkr.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n\n"}
{"prompt": "The following SQL query returns the total number of Opyn users over time, ordered by date.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', evt_block_time) AS date,\n                \"issuedTo\" AS account\n         FROM opynfinance.\"oToken_evt_IssuedOTokens\"\n         UNION SELECT date_trunc('day', evt_block_time) AS date,\n                      \"to\" AS account\n         FROM opynfinance.\"oToken_evt_Transfer\") AS table1\n      GROUP BY account) AS table2\n   GROUP BY date\n   ORDER BY date) AS table3"}
{"prompt": "This SQL query finds the total amount of USD spent on trading domains in the secondary market on a weekly basis. It does this by finding the sum of all ETH spent on domain transfers in a given week, and then multiplying that by the average price of ETH in USD for that same week.", "completion": " WITH ens1 AS (SELECT date_trunc ('week', tx.block_time) date, SUM (tx.value/1e18) eth_spent, COUNT (r.evt_tx_hash) events\n                FROM ethereumnameservice.\"ENSRegistry_evt_Transfer\" r\n                LEFT JOIN ethereum.transactions tx\n                ON tx.hash = r.evt_tx_hash\n                GROUP BY 1),\n    price1 AS (SELECT date_trunc ('week', minute) date, AVG (price) avg_price_eth_usd\n                    FROM prices.layer1_usd_eth\n                    GROUP BY 1)\n\nSELECT ens1.date, ens1.date, (ens1.eth_spent * price1.avg_price_eth_usd) AS total_usd_spent\nFROM ens1\nJOIN price1\nON ens1.date = price1.date"}
{"prompt": "This query returns the total volume and fees for the \"X2Y2\" contract for the past day.", "completion": " WITH\n\nx2y2_fees AS (\n    SELECT\n        date_trunc('day', block_time) AS time_unit,\n        sum(value / 1e18) AS x2y2_fees FROM ethereum.traces\n    WHERE\n        \"from\" = '\\x74312363e45dcaba76c59ec49a7aa8a65a67eed3' AND\n        (\"to\" = '\\x099BA539CDe20Ff8b87B18460024a9E3acc9E025' OR \"to\" = '\\xD823C605807cC5E6Bd6fC0d7e4eEa50d3e2d66cd') AND\n        tx_success AND\n        success AND\n        block_time > date_trunc('day', now() - interval '1 days')\n    GROUP BY 1\n),\n\nx2y2_fees_shared AS (\n    SELECT\n        /*\n        CASE WHEN date_trunc('day', evt_block_time) < '2022-02-22' THEN date_trunc('day', evt_block_time)\n        ELSE (date_trunc('day', evt_block_time) - interval '1 day')\n        END AS time_unit,\n        */\n        date_trunc('day', evt_block_time) AS time_unit,\n        sum(value / 1e18) AS x2y2_fees_shared\n    FROM erc20.\"ERC20_evt_Transfer\"\n    WHERE contract_address = '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' AND\n          \"from\" = '\\xf704353b5c98577d3b4274614e62fc79676d33bd' AND\n          evt_block_time >= date_trunc('day', now() - interval '1 days')\n    GROUP BY 1\n),\n\nx2y2 AS (\n    SELECT\n        date_trunc('day', evt_block_time) AS time_unit,\n        sum(amount / 1e18) AS x2y2_volume,\n        count(evt_tx_hash) AS x2y2_txs\n    FROM x2y2.\"X2Y2_r1_evt_EvProfit\"\n    WHERE evt_block_time >= date_trunc('day', now() - interval '1 days')\n    GROUP BY 1\n)\n\nSELECT\n    time_unit,\n    x2y2_volume,\n   coalesce(x2y2_fees, 0) AS x2y2_fees\n\n    \n    \nFROM (\n    SELECT x.time_unit, x.x2y2_volume\n    FROM x2y2 x\n    \n) sub1\nLEFT JOIN x2y2_fees f USING (time_unit)\nORDER BY 1 DESC"}
{"prompt": "This SQL query returns data on the running liquidity of the DAI token on the Ethereum blockchain. The data includes the date, the market where the DAI token was traded, the amount of DAI tokens added to liquidity, the amount of DAI tokens removed from liquidity, and the balance of DAI tokens in liquidity.", "completion": " WITH dai_add AS (\n    SELECT date_trunc('day', tx.block_time) as date_dai,\n           s.symbol as market,\n           SUM(eth_amount/1e18) as sum_add_liq,\n           SUM(SUM(eth_amount/1e18)) OVER(ORDER BY date_trunc('day', tx.block_time) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as running_sum_add_liq\n    FROM uniswap.\"Exchange_evt_AddLiquidity\" AS add_liq\n    INNER JOIN ethereum.transactions tx ON add_liq.tx_hash = tx.hash\n    INNER JOIN uniswap.\"Factory_evt_NewExchange\" f ON add_liq.address = f.exchange\n    INNER JOIN coincap.\"symbols\" s ON f.token = s.asset\n    GROUP BY 1, 2\n    HAVING s.symbol = 'DAI'\n    ORDER BY 1 DESC),\n    \n\ndai_rem AS (\n    SELECT date_trunc('day', tx.block_time) as date_dai,\n           s.symbol as market,\n           SUM(eth_amount / 1e18) as sum_rem_liq,\n           SUM(SUM(eth_amount/1e18)) OVER(ORDER BY date_trunc('day', tx.block_time) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as running_sum_rem_liq\n    FROM uniswap.\"Exchange_evt_RemoveLiquidity\" AS rem_liq\n    INNER JOIN ethereum.transactions tx ON rem_liq.tx_hash = tx.hash\n    INNER JOIN uniswap.\"Factory_evt_NewExchange\" f ON rem_liq.address = f.exchange\n    INNER JOIN coincap.\"symbols\" s ON f.token = s.asset\n    GROUP BY 1, 2\n    HAVING s.symbol = 'DAI'\n    ORDER BY 1 DESC)\n\n\n--SELECT   \nSELECT date_dai, dai_add.market,\n       sum_add_liq, running_sum_add_liq,\n       sum_rem_liq, running_sum_rem_liq,\n       running_sum_add_liq - running_sum_rem_liq AS balance\nFROM dai_add\nINNER JOIN dai_rem USING(date_dai)\n--FULL JOIN dai_rem USING(date_dai)\nORDER BY 1 DESC\n\n\n"}
{"prompt": "This query returns the amount of money deposited into Pool3 each day, as well as the amount of winnings rewarded to users. It also calculates the fee as a percentage of total winnings. Finally, it returns the number of tickets sold in Pool1 each day, as well as the amount of money spent on tickets.", "completion": " SELECT \ndate_trunc('day', block_time) as day,\nsum(amount/1e18)\nFROM pooltogether_v2.\"Pool3_evt_Deposited\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\n\n\n\nSELECT \ndate_trunc('day', block_time) as day,\nsum(winnings/1e18)\nFROM pooltogether_v2.\"Pool3_evt_Rewarded\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\n\nSELECT \nsum(fee/1e18)/sum(winnings/1e18)\nFROM pooltogether_v2.\"Pool3_evt_Rewarded\"\nORDER BY 1 desc\n\nSELECT\ncount(1)\nFROM pooltogether_v2.\"Pool3_evt_Opened\"\nLIMIT 10\n\nSELECT\ndate_trunc('day', block_time) as day,\nsum(\"totalPrice\"/1e18)\nFROM pooltogether_v1.\"Pool1_evt_BoughtTickets\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n\nSELECT\ndate_trunc('day', block_time) as day,\nsender, amount\nFROM pooltogether_v2.\"Pool3_evt_SponsorshipDeposited\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nWHERE amount != 'NaN'\nGROUP BY 1,2,3\nORDER BY 1 desc\nLIMIT 10\n\nSELECT\nsum(amount/1e18)\nFROM \npooltogether_v2.\"Pool3_evt_Withdrawn\"\nWHERE sender = 'f5276a7166cfda0d68b257e27c7c8bb2e5852e91' or '98ea2d8438f70ce876c2db26fc494cfed10b4cd7' or 'a5c3a513645a9a00cb561fed40438e9dfe0d6a69' 'b7896fce748396ecfc240f5a0d3cc92ca42d7d84'\nLIMIT 10"}
{"prompt": "This SQL query returns the total revenue for Maker (MKR) in U.S. dollars for each day over the past 60 days, as well as the average MKR price during that time period.", "completion": " WITH MCD as\n(\nSELECT\ndate_trunc('day', block_time) as day,\navg(p.price) as MKR_price,\nsum(e.value/1e18*p.price) AS \"MCD_burn\"\nFROM erc20.\"ERC20_evt_Transfer\" e\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE e.\"to\" = '\\xdfE0fb1bE2a52CDBf8FB962D5701d7fd0902db9f'\nand p.symbol = 'MKR'\nGROUP BY 1 \nORDER BY 1 desc\n),\n\nSCD as \n(\nSELECT\ndate_trunc('day', block_time) AS day,\nsum(wad/1e18*p.price) as \"SCD_burns\" ----SCD burn----\nFROM maker.\"MKR_evt_Transfer\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE m.dst = '\\x69076e44a9C70a67D5b79d95795Aba299083c275' \nAND p.symbol = 'MKR'\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT SCD.day,\nsum(coalesce(\"MCD_burn\",0)+\"SCD_burns\") as MKR_rev,\nsum(sum(coalesce(\"MCD_burn\",0)+\"SCD_burns\")) over (order by SCD.day) as all_time_MKR_rev,\navg(p.price) as MKR_price\nFROM SCD\nFULL OUTER JOIN MCD ON SCD.day = MCD.day\nINNER JOIN prices.usd p ON p.minute = SCD.day\nWHERE p.symbol = 'MKR'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 60"}
{"prompt": "This SQL query returns the block time and details of all transactions from the dydx.\"SoloMargin_evt_LogAddMarket\" table, joined with the ethereum.transactions table.", "completion": " SELECT\n    eth.block_time AS ttime,\n    am.*\nFROM dydx.\"SoloMargin_evt_LogAddMarket\" am\nJOIN ethereum.transactions eth ON eth.hash = am.tx_hash\n\n-- WIP"}
{"prompt": "This SQL query calculates the USD volume of Ethereum traded on Uniswap over the past 7 days.", "completion": " SELECT date_trunc('days', tx.block_time) AS Date,\n       SUM(eth/1e18*p.price) AS volume\nFROM (\n        (SELECT evt_tx_hash,\n                eth_sold AS eth\n         FROM uniswap.\"Exchange_evt_TokenPurchase\")\n      UNION ALL\n        (SELECT evt_tx_hash,\n                eth_bought AS eth\n         FROM uniswap.\"Exchange_evt_EthPurchase\")) ether\nINNER JOIN\n     (SELECT hash,\n             block_time\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '7 days'\n        AND block_time < date_trunc('day', NOW())) tx ON ether.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This query returns the total gas fees paid per day, in ETH.", "completion": " WITH\n  release AS (\n    SELECT\n      a.block_timestamp AS block_timestamp,\n      CASE\n        WHEN a.gas_used = '18446744073709552000' THEN '2500000'\n        ELSE a.gas_used\n      END AS gas_used,\n      a.gas_price as gas_price\n    FROM\n      flashbots.mev_summary a\n      LEFT JOIN ethereum.transactions b ON b.hash = a.transaction_hash\n  )\nSELECT\n  date_trunc('day', block_timestamp) as day,\n  SUM(gas_used * gas_price / 1e18) AS gas_fees\nFROM\n  release\nGROUP BY\n  1\nORDER BY\n  1 ASC"}
{"prompt": "The following SQL query calculates the liquidation success rate for MakerDAO (MCD) over the past 50 weeks. The success rate is calculated as the number of successful liquidations divided by the total number of liquidations attempted.", "completion": " WITH successful AS \n(\nSELECT\ndate_trunc('week', block_time) week,\ncount(\"call_tx_hash\") as success\nFROM makermcd.\"CAT_call_bite\" s\nLEFT JOIN ethereum.\"transactions\" tx on s.call_tx_hash = tx.hash\nWHERE call_success = true\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50),\n\ntotal AS \n(SELECT\ndate_trunc('week', block_time) week,\ncount(\"call_tx_hash\") as total\nFROM makermcd.\"CAT_call_bite\" t\nLEFT JOIN ethereum.\"transactions\" tx on t.call_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50)\n\nSELECT successful.\"week\",sum(\"success\")/sum(\"total\") as success_rate\nFROM successful\nLEFT JOIN total on successful.week = total.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This query finds two rate updates that occur in the same block. It does this by looking at the \"ExchangeRates_v2_evt_RatesUpdated\" event and matching it up with transactions that have occurred in the past 30 days.", "completion": " -- find two rate updates in the same block\nSELECT encode (trim('\\000' from unnest(\"currencyKeys\")::bytea), 'escape') AS currency_key,\n    block_number,\n    count(1)\nFROM synthetix.\"ExchangeRates_v2_evt_RatesUpdated\" f\nINNER JOIN ethereum.transactions txs ON txs.hash = f.evt_tx_hash\nWHERE block_time < date_trunc('day', NOW())\n  AND block_time >= date_trunc('day', NOW()) - interval '30 day'\nGROUP BY currency_key, block_number\nHAVING count(1) > 1\n\n-- select r.evt_tx_hash, r.evt_index, txs.index\n-- FROM synthetix.\"ExchangeRates_v2_evt_RatesUpdated\" r\n-- INNER JOIN ethereum.transactions txs ON txs.hash = r.evt_tx_hash\n-- WHERE block_number = 9014901\n\n-- SELECT * \n-- FROM ethereum.transactions\n-- WHERE block_number = 9014901\n\n-- select max(index)\n-- from ethereum.transactions txs\n-- where block_number > 8000000"}
{"prompt": "This query returns the total volume and number of trades for Ethereum over the past 30 days.", "completion": " select date_trunc('day',block_time) as date,\n        sum(usd_amount) as volume,\n        count(*) as trades\nfrom hashflow.trades\nwhere block_time >= now() -interval '30 days'\n        and fill_status is true\ngroup by 1 "}
{"prompt": "This query returns the number of accounts that have a balance greater than 0.", "completion": " WITH balances AS\n  (WITH outbound AS\n     (SELECT a.\"from\",\n             SUM(a.value/1e18) amt\n      FROM numerai.\"NumeraireBackend_evt_Transfer\" a\n      LEFT JOIN ethereum.transactions b -- Replace with transfer event for relevant project\n ON a.tx_Hash = b.hash\n      WHERE success = TRUE\n      GROUP BY 1),\n        inbound AS\n     (SELECT a.\"to\",\n             SUM(a.value/1e18) amt\n      FROM numerai.\"NumeraireBackend_evt_Transfer\" a\n      LEFT JOIN ethereum.transactions b -- Replace with transfer event for relevant project\n ON a.tx_Hash = b.hash\n      WHERE success = TRUE\n      GROUP BY 1) SELECT inbound.\"to\" as account,\n                         CASE\n                             WHEN outbound.amt IS NULL THEN inbound.amt\n                             ELSE inbound.amt - outbound.amt\n                         END AS balance\n   FROM inbound\n   LEFT JOIN outbound ON outbound.\"from\" = inbound.\"to\"\n   ORDER BY balance DESC)\nSELECT COUNT(balances.account) \nFROM balances\nWHERE balances.balance > 0\n;"}
{"prompt": "This query returns the number of CDPs closed per day, as well as the average ETH price during that day.", "completion": " WITH defi_saver_txns AS (\n    SELECT\n        tx.*\n    FROM\n        ethereum.transactions tx\n    WHERE tx.to = '\\x65114af041a921180220b300b3cb4aebad04601a'\n),\ndefi_saver_wipes AS (\n    SELECT\n        saver_txns.*,\n        wipes.*\n    FROM defi_saver_txns saver_txns\n    LEFT JOIN maker.\"SaiTub_call_wipe\" wipes\n    ON saver_txns.hash = wipes.call_tx_hash\n),\ndefi_saver_mcd_txns AS (\n    SELECT\n        tx.*\n    FROM\n        ethereum.transactions tx\n    WHERE tx.to = '\\xdf0852e681f16ce1a03e9cae5b2c7f26f719d971'\n),\ndefi_saver_mcd_frobs AS (\n    SELECT\n        saver_txns.*\n        , frobs.*\n        , CASE WHEN frobs.call_tx_hash IS NOT NULL THEN true ELSE false END as has_vat_frob\n    FROM\n        defi_saver_mcd_txns saver_txns\n    LEFT JOIN makermcd.\"VAT_call_frob\" frobs\n    ON saver_txns.hash = frobs.call_tx_hash\n    WHERE dink < 0\n),\nall_txns AS (\n    SELECT\n        DISTINCT wipes.block_time, wipes.hash\n    FROM\n        defi_saver_wipes wipes\n    WHERE wipes.call_tx_hash IS NOT NULL\n    UNION\n    SELECT\n        DISTINCT block_time, hash\n    FROM\n        defi_saver_mcd_frobs\n    WHERE defi_saver_mcd_frobs.call_tx_hash IS NOT NULL\n),\ntxns_with_eth_prices as (\n    SELECT\n        txns.*\n        , prices.minute\n        , prices.price\n    FROM\n        all_txns txns\n    LEFT JOIN\n        prices.usd prices\n    ON date_trunc('minute', txns.block_time) = prices.minute\n    WHERE prices.symbol = 'ETH'\n)\n\nSELECT\n    date_trunc('day', block_time) as day\n    , COUNT(hash) as number_of_cdps_closed\n    , AVG(price) as eth_price\nFROM txns_with_eth_prices\nGROUP BY 1"}
{"prompt": "This query returns the number of withdrawals per day for the past 60 days, as well as the cumulative withdrawals for each day.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\nsum(e.\"value\"/1e18) as withdrawals,\nsum(sum(e.\"value\"/1e18)) over (order by date_trunc('day', block_time)) as cumulative_withdrawals\nFROM erc20.\"ERC20_evt_Transfer\" e\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nWHERE e.\"from\" = '\\x29fe7D60DdF151E5b52e5FAB4f1325da6b2bD958' and e.\"to\" != '\\x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643'\nGROUP BY 1 \nORDER BY 1 desc\nLIMIT 60"}
{"prompt": "This SQL query selects the day and the maximum token supply from the curvefi.\"usdt_swap_evt_AddLiquidity\" table, left joining the ethereum.\"transactions\" table on the csa.evt_tx_hash = tx.hash.", "completion": " select date_trunc('day', block_time) AS day, max((token_supply/1e18)) from curvefi.\"usdt_swap_evt_AddLiquidity\" csa\nLEFT JOIN ethereum.\"transactions\" tx ON csa.evt_tx_hash = tx.hash group by 1"}
{"prompt": "Select the minute, price, and symbol from the prices.usd table where the symbol is ETH and the minute is greater than 2019-01-01.", "completion": " select\n    minute, \n    price,\n    symbol\n    from prices.usd\n    where symbol in ('ETH')\n    and minute > '2019-01-01'"}
{"prompt": "This SQL query returns the cumulative gross mint for each token over the past 52 weeks.", "completion": " with view_mint_all as (\n        select distinct\n            block_time,\n            'SAI' as token_symbol\n        from compound.\"view_mint\"\n        where block_time > '2020-03-20'\n        \n        UNION\n        \n        select distinct\n            block_time,\n            token_symbol\n        from compound.\"view_mint\"\n    )\nSELECT distinct\n    date_trunc('week', c.block_time),\n    v.token_symbol,\n    --SUM(\"mint_amount_usd\") as weekly_mint,\n    sum(c.\"mint_amount_usd\") over (partition by v.token_symbol order by date_trunc('week', c.block_time)) as cumulative_mint\nFROM compound.\"view_mint\" c\n    LEFT JOIN view_mint_all v ON v.block_time = c.block_time\nWHERE c.block_time > now() - interval '52 weeks' \n--GROUP BY 1,2, mint_amount_usd, block_time \nORDER BY 1,2;"}
{"prompt": "This query returns the number of unique collectors for each month.", "completion": " SELECT date_trunc('month', date) AS MONTH,\n       count(DISTINCT collector) AS collectors\nFROM\n  (SELECT date_trunc('month', evt_block_time) AS date,\n          _buyer AS collector\n   FROM superrare.\"SuperRareMarketAuction_evt_Sold\"\n   UNION SELECT date_trunc('month', evt_block_time) AS date,\n                _buyer AS collector\n   FROM superrare.\"SuperRare_evt_Sold\"\n   UNION SELECT date_trunc('month', evt_block_time) AS date,\n                _bidder AS collector\n   FROM superrare.\"SuperRareMarketAuction_evt_AcceptBid\"\n   UNION SELECT date_trunc('month', evt_block_time) AS date,\n                _bidder AS collector\n   FROM superrare.\"SuperRare_evt_AcceptBid\"\n   UNION SELECT block_time,\n                substring(topic3\n                          FROM 13\n                          FOR 20)\n   FROM ethereum.\"logs\"\n   WHERE contract_address = '\\x8c9f364bf7a56ed058fc63ef81c6cf09c833e656'\n     AND topic1 = '\\xea6d16c6bfcad11577aef5cc6728231c9f069ac78393828f8ca96847405902a9'\n     AND bytea2numeric(substring(DATA\n                                 FROM 33\n                                 FOR 32)) > 0\n   UNION SELECT block_time,\n                substring(topic3\n                          FROM 13\n                          FOR 20)\n   FROM ethereum.\"logs\"\n   WHERE contract_address = '\\x65b49f7aee40347f5a90b714be4ef086f3fe5e2c'\n     AND topic1 IN ('\\x2a9d06eec42acd217a17785dbec90b8b4f01a93ecd8c127edd36bfccf239f8b6',\n                    '\\x5764dbcef91eb6f946584f4ea671217c686fa7e858ce4f9f42d08422b86556a9')\n   UNION SELECT evt_block_time,\n                _bidder\n   FROM superrare.\"SuperRareBazaar_evt_AcceptOffer\"\n   UNION SELECT evt_block_time,\n                _bidder\n   FROM superrare.\"SuperRareBazaar_evt_AuctionSettled\"\n   WHERE _amount > 0\n   UNION SELECT evt_block_time,\n                _buyer\n   FROM superrare.\"SuperRareBazaar_evt_Sold\") a\nGROUP BY 1"}
{"prompt": "SELECT * --date_trunc('hour', block_time) AS TIME,\n       --SUM(value/1e18),\n       --SUM (SUM(value/1e18)) OVER (ORDER BY date_trunc('hour', block_time)) AS TOTAL\nFROM ethereum.\"blocks\"\nWHERE \"miner\" = '\\xea674fdde714fd979de3edf0f56aa9716b898ec8'\n--GROUP BY block_time\n--ORDER BY block_time DESC\nlimit 10\n\nThis SQL query returns the total value of all blocks mined by a specific miner over a 10 hour period.", "completion": " SELECT * --date_trunc('hour', block_time) AS TIME,\n       --SUM(value/1e18),\n       --SUM (SUM(value/1e18)) OVER (ORDER BY date_trunc('hour', block_time)) AS TOTAL\nFROM ethereum.\"blocks\"\nWHERE \"miner\" = '\\xea674fdde714fd979de3edf0f56aa9716b898ec8'\n--GROUP BY block_time\n--ORDER BY block_time DESC\nlimit 10"}
{"prompt": "This query returns a list of all Authereum contracts sorted by the number of transactions. The list includes the address of the contract and the number of transactions.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8', '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea', '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046') -- Authereum Wallet Factorys\n\t    and type = 'create'\n),\nperaddress as (\n    select et.\"from\" as address, count(distinct et.tx_hash) as transactions\n    from ethereum.traces et\n    join wallets \n        on wallets.address = et.\"from\"\n    where et.\"to\" in ('\\x2e1723d1dfa2947f0d08d5c5d214b71def4f951f','\\x79fee076b1bcd4054dff0b4364c26899492198dc','\\x211deb5c0a28a213fcf5976ac22c70ff96b9004c','\\x185c46c8d3ef5155f3678e69c827db7a2116a6cd','\\xd8cab604bdd8cbb7c3eb0c26f7dc3abffb005a92','\\xae1710e83211decb356f031a9346a24ef55055e0') -- AuthereumAccount versions\n    and call_type = 'delegatecall'\n    and tx_success = TRUE\n    and error is null\n    and substring(\"input\" for 4) in ('\\x26aa4655', '\\xd5553b88') -- executeMultipleAuthKeyMetaTransactions and executeMultipleLoginKeyMetaTransactions\n    group by 1)\nselect ROW_NUMBER() OVER(ORDER BY transactions desc) AS n, concat('https://etherscan.io/address/0',right(text(address),41)) as address, transactions\nfrom peraddress\norder by transactions desc"}
{"prompt": "SELECT date, SUM(amount) \nFROM minted \nGROUP BY date \nORDER BY date;", "completion": " WITH minted as (SELECT date_trunc('week', tx.block_time) AS date,\n       SUM(m.\"value\" / 1e18) as amount\nFROM numerai.\"NumeraireBackend_evt_Mint\" m\nINNER JOIN ethereum.transactions tx\nON m.tx_hash = tx.hash\nWHERE SUCCESS = true\nGROUP BY 1\nORDER BY 1)\n\nSELECT date, SUM(amount) OVER (ORDER BY date) FROM minted;"}
{"prompt": "This query returns the number of unique users that made transactions to Saturn Network each day.", "completion": " SELECT date_trunc('day', block_time) AS date,\n       COUNT(DISTINCT \"from\") AS COUNT\nFROM ethereum.\"transactions\"\nWHERE ( \"to\" = '\\x1f0d1de1558582ad6f13763f477119a1455502af' ) \nor ( \"to\" = '\\x2f99be0adf2abd64b6813a414f3a27aace42a9bf') \nor (\"to\" = '\\x13f64609bf1ef46f6515f8cd3115433a93a00dc6')\nor (\"to\" = '\\x25f17d6cb23cc85bfa6c5e9b8f1d5226f5927cbc')\nor (\"to\" = '\\x04450956638097114b504aaac5ff55db9295420a')\nor (\"to\" = '\\xaA5bBD5A177A588b9F213505cA3740b444Dbd586')\n  AND \"success\" = TRUE\nGROUP BY 1\nORDER BY 1 DESC;"}
{"prompt": "This SQL query returns the total USD volume of ETH traded on Uniswap for each week over the past two months, ordered by date.", "completion": " SELECT date_trunc('week', tx.block_time) as Date,\n       SUM(eth/1e18 * p.close) as \"USD volume\"\nFROM ((SELECT tx_hash, eth_sold AS eth FROM uniswap.\"Exchange_evt_TokenPurchase\")\n      UNION\n        (SELECT tx_hash, eth_bought AS eth FROM uniswap.\"Exchange_evt_EthPurchase\")) ether\nINNER JOIN ethereum.transactions tx ON ether.tx_hash = tx.hash\nINNER JOIN price.\"eth/usd\" p ON p.block_number = tx.block_number\nAND tx.block_time > now() - interval '2 months'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns the currency key, new rate, block number, and index for each currency in the \"ExchangeRates_v2_evt_RatesUpdated\" event for each block in the current day.", "completion": "         --\u7edf\u8ba1\u6bcf\u4e2a\u5408\u6210\u8d44\u4ea7\u6bcf\u4e2a\u533a\u5757\u7684\u6c47\u7387\n        SELECT encode (trim('\\000' from unnest(\"currencyKeys\")::bytea), 'escape') AS currency_key,\n            unnest(\"newRates\")/1e18 as new_rate,\n            block_number,\n            index\n        FROM synthetix.\"ExchangeRates_v2_evt_RatesUpdated\" f\n        INNER JOIN ethereum.transactions txs ON txs.hash = f.evt_tx_hash\n        WHERE block_time = date_trunc('day', NOW())\n"}
{"prompt": "This SQL query returns the number of uniswap \"Exchange_evt_EthPurchase\" events that occurred each day, along with the block time of each event. The query groups the results by day and orders them by block time, from most recent to least recent. Finally, the query returns only the 14 most recent days.", "completion": " SELECT date_trunc('day', tx.block_time),COUNT(*) FROM uniswap.\"Exchange_evt_EthPurchase\" u\nLEFT JOIN ethereum.transactions tx\nON u.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 14"}
{"prompt": "This SQL query returns a list of all the Safes, sorted by the number of transactions. The list includes the Safe address and the number of transactions.", "completion": " with peraddress as (\n    select et.\"from\" as address, count(distinct et.tx_hash) as safe_transactions\n    from ethereum.traces et\n    join gnosis_safe.view_safes s\n        on s.address = et.\"from\"\n    where et.success = True \n        and substring(et.\"input\" for 4) = '\\x6a761202' -- execTransction method of v0.1.0, v1.0.0, v1.1.0, v1.1.1, v1.2.0, v1.3.0\n        AND et.call_type = 'delegatecall'\n    \tAND et.to in (  -- mastercopies\n    \t    '\\x8942595A2dC5181Df0465AF0D7be08c8f23C93af', -- 0.1.0\n    \t    '\\xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A', -- 1.0.0\n    \t    '\\xaE32496491b53841efb51829d6f886387708F99B', -- 1.1.0\n    \t    '\\x34CfAC646f301356fAa8B21e94227e3583Fe3F5F', -- 1.1.1\n    \t    '\\x6851d6fdfafd08c0295c392436245e5bc78b0185', -- 1.2.0\n    \t    '\\xd9db270c1b5e3bd161e8c8503c55ceabee709552'  -- 1.3.0\n    \t) \n    group by 1)\nselect \n    ROW_NUMBER() OVER(ORDER BY safe_transactions desc) AS n, \n    concat('<a href=\"https://etherscan.io/address/0',right(address::text, 41),'\">0', right(address::text, 41), '</a>') as safe_address, \n    safe_transactions\nfrom peraddress\norder by safe_transactions desc"}
{"prompt": "This query returns the amount of Dai outstanding for each day in the past 10 days, as well as the total amount of Dai minted and burned in that time period.", "completion": " WITH mint as\n(SELECT\ndate_trunc('day', block_time) as day,\nsum(\"wad\"/1e18) FROM makermcd.\"DAI_call_mint\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nWHERE call_success = 'true'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10),\n\nburn as\n(SELECT\ndate_trunc('day', block_time) as day,\nsum(\"wad\"/1e18) FROM makermcd.\"DAI_call_burn\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nWHERE call_success = 'true'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10)\n\nSELECT mint.\"day\", SUM(mint.\"sum\"-burn.\"sum\")\nFROM mint\nLEFT JOIN burn ON mint.day = burn.day\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 20"}
{"prompt": "This query returns the block time, price in USD, and price in ETH for all trades involving the wNXM token over the past 24 hours.", "completion": " SELECT block_time,\n       CASE\n           WHEN token_a_symbol = 'WETH' THEN (token_a_amount / (token_b_amount_raw / 1e18)) * price\n           WHEN token_b_symbol = 'WETH' THEN (token_b_amount / (token_a_amount_raw / 1e18)) * price\n       END AS price_usd,\n       CASE\n           WHEN token_a_symbol = 'WETH' THEN (token_a_amount / (token_b_amount_raw / 1e18))\n           WHEN token_b_symbol = 'WETH' THEN (token_b_amount / (token_a_amount_raw / 1e18))\n       END AS price_eth\nFROM dex.\"trades\" d\nINNER JOIN prices.\"layer1_usd_eth\" p ON p.minute = date_trunc('minute', d.block_time)\nWHERE (token_a_address = '\\x0d438f3b5175bebc262bf23753c1e53d03432bde'\n       AND token_b_symbol = 'WETH'\n       OR token_b_address = '\\x0d438f3b5175bebc262bf23753c1e53d03432bde'\n       AND token_a_symbol = 'WETH')\n  AND block_time >= now() - interval '1 day'"}
{"prompt": "This SQL query retrieves all data from the \"BatchAttestationLogic_call_batchAttest\" table in the \"bloom\" database. The results are sorted by the \"name\" column in ascending order.", "completion": " SELECT* FROM bloom.\"BatchAttestationLogic_call_batchAttest\";"}
{"prompt": "Get all trade data from the trades table, sorted in reverse chronological order (with the most recent trade first), and limited to the 10 most recent trades.", "completion": " select * \nfrom trades\norder by trade_time desc \nlimit 10 "}
{"prompt": "This SQL query returns the number of transactions made to a specific address, grouped by block number. The address must be specified in the query, and the block number must be greater than or equal to 8018449.", "completion": " SELECT block_number,\n       count(block_number)\nFROM ethereum.transactions\nWHERE \"to\" IN('\\x4fc604536134dc64718800361ecbca0df6cbfe08')\n  AND block_number >= 8018449\nGROUP BY block_number"}
{"prompt": "This SQL query returns the total USD value of ETH purchased on Uniswap over the past 10 days, grouped by day.", "completion": " SELECT date_trunc('day', block_time) AS Date,\n       SUM(usd_value_of_eth) AS volume\nFROM (\n        (SELECT *\n         FROM uniswap_v1.view_eth_purchase)\n      UNION ALL\n        (SELECT *\n         FROM uniswap_v1.view_token_purchase)) ether\nWHERE block_time > now() - interval '10 days'\n        AND block_time < date_trunc('day', NOW())\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "The following SQL query returns the top 10 depositors in Pool Together 2, as well as the sum of their deposits in ETH.", "completion": " SELECT \n    sender, \n    sum(amount/1e18)\nFROM pooltogether_v2.\"Pool3_evt_Deposited\" \nGROUP BY 1 \nORDER BY 2 desc\nLIMIT 10  "}
{"prompt": "SELECT date AS date,\n       sum(1) OVER (\n                    ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS users\nFROM\n  (SELECT min(block_time) AS date,\n          requester\n   FROM\n     (SELECT block_time,\n             requester\n      FROM erasure_bay.\"view_request_data\"\n      UNION SELECT block_time,\n                   fulfiller\n      FROM erasure_bay.\"view_deposit_stake\") AS table1\n   GROUP BY requester) AS table2", "completion": " SELECT date AS date,\n       sum(1) OVER (\n                    ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS users\nFROM\n  (SELECT min(block_time) AS date,\n          requester\n   FROM\n     (SELECT block_time,\n             requester\n      FROM erasure_bay.\"view_request_data\"\n      UNION SELECT block_time,\n                   fulfiller\n      FROM erasure_bay.\"view_deposit_stake\") AS table1\n   GROUP BY requester) AS table2"}
{"prompt": "The following SQL query calculates the total supply of MGN tokens that have been successfully minted.", "completion": " SELECT SUM(amount/1e18) as MGNamount\nFROM dxdao.\"TokenFRTProxy_call_mintTokens\"\nWHERE call_success = true;"}
{"prompt": "This query returns the number of Compound borrows that have occurred each day over the past 60 days.", "completion": " WITH transactions AS (\n    SELECT hash AS tx_hash, *\n      FROM ethereum.transactions\n     WHERE block_time > date_trunc('day', current_date)::date - 60\n       AND block_time < date_trunc('day', current_date)::date\n),\n\nsome_borrows AS (\n    SELECT * FROM compoundv2.\"cErc20_evt_Borrow\"\n)\n\nSELECT date_trunc('day', block_time), COUNT(*)\n  FROM some_borrows\n       INNER JOIN transactions\n       ON some_borrows.tx_hash = transactions.tx_hash\n GROUP BY 1"}
{"prompt": "The following SQL query will find the top 25 addresses that have redeemed the most SLP tokens, excluding the genesis address and Uniswap.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address = '\\x37236cd05b34cc79d3715af2383e96dd7443dcf1' -- SLP\n-- UNION ALL\n    -- SELECT\n    -- evt_tx_hash AS tx_hash,\n    -- tr.\"to\" AS address,\n    -- tr.value AS amount\n    --  FROM erc20.\"ERC20_evt_Transfer\" tr \n    --  WHERE contract_address = '\\x37236cd05b34cc79d3715af2383e96dd7443dcf1' --SLP\n)\n\nSELECT address, sum(amount) as total_slp_redeemed\nFROM transfers\nWHERE address != '\\x0000000000000000000000000000000000000000' AND address != '\\xf4158e282f2317597e31c028978c7fb7275d6fb4'\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 25\n"}
{"prompt": "This SQL query returns the top 25 SLP (ERC20) token holders by balance.", "completion": " WITH transfers AS (\n--     SELECT\n--     evt_tx_hash AS tx_hash,\n--     tr.\"from\" AS address,\n--     -tr.value AS amount\n--      FROM erc20.\"ERC20_evt_Transfer\" tr\n--      WHERE contract_address = '\\x37236cd05b34cc79d3715af2383e96dd7443dcf1' -- SLP\n-- UNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\x37236cd05b34cc79d3715af2383e96dd7443dcf1' --SLP\n)\n\nSELECT address, sum(amount) as slp_balance\nFROM transfers\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 25\n"}
{"prompt": "This SQL query retrieves data from the synthetix.Synthetix_evt_SynthExchange table. The data is filtered to only include rows where the contract_address is not equal to '0x011a72400e58ecd99ee497cf89e3775d4bd732f'. A limit of 5 is imposed so that only 5 rows are returned.", "completion": " SELECT * \nFROM\nsynthetix.\"Synthetix_evt_SynthExchange\"\n-- WHERE contract_address != '\\xc011a72400e58ecd99ee497cf89e3775d4bd732f'\nLIMIT 5"}
{"prompt": "This SQL query calculates the net DSR (daily stability fee revenue) for the Maker Protocol over time, starting from January 25th, 2020. It does this by first calculating the total Inbound and Outbound RAD (reputational tokens) for each day, and then multiplying that by the DSR rate (0.00021232876). Finally, it orders the results by day, starting with the most recent day first.", "completion": " WITH inbound AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(rad/1e45) as inb FROM makermcd.\"VAT_call_move\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nwhere dst = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\nGROUP BY 1\nORDER BY 1 desc\n),\n\noutbound AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(-rad/1e45) as outb FROM makermcd.\"VAT_call_move\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nWHERE src = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT \ninbound.day,\nsum(inb + outb)*0.00021232876 as net_DSR,\nsum(sum(inb + outb)*0.00021232876) over (order by inbound.day) as cumulative_net_DSR\nFROM inbound\nLEFT JOIN outbound ON inbound.day = outbound.day\nWHERE inbound.day > '1/25/20'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This query returns the number of distinct traders who have made trades on the Kyber network in the past week.", "completion": " SELECT COUNT(DISTINCT \"trader\")\nFROM kyber.\"Network_evt_KyberTrade\" t\n      INNER JOIN ethereum.transactions tx ON t.tx_hash = tx.hash\n      WHERE tx.block_time > date_trunc('week', current_date)::date - 7 \nAND tx.block_time < date_trunc('week', current_date)::date\n\n"}
{"prompt": "This SQL query returns the average buy and sell volume for KNC (Kyber Network Crystal) tokens on the DutchX exchange, as well as the average market price for KNC tokens on the Ethereum blockchain. It also calculates the \"KNC discount\", which is the difference between the average market price for KNC tokens and the average price on the DutchX exchange.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    avg(\"buyVolume\" / \"sellVolume\") as \"DutchX price\",\n    avg(knc.average / eth.average) as \"Market price\",\n    (avg(knc.average / eth.average) / avg(\"buyVolume\" / \"sellVolume\") - 1)*100 as \"KNC discount\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" knc \n\nWHERE \"sellToken\" = '\\xdd974d5c2e2928dea5f71b9825b8b646686bd200' --knc\nAND \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', knc.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND knc.symbol = 'KNC'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "This SQL query retrieves the first 10 rows from the prices.layer1_usd_eth table.", "completion": " select * from prices.layer1_usd_eth limit 10;"}
{"prompt": "This SQL query calculates the total amount of ETH spent on gas fees for all transactions from a specific ETH address.", "completion": " SELECT sum((a.gas_price * b.gas_used)/1e18) as total_eth_spent_on_gas\nFROM ethereum.transactions a\nINNER JOIN ethereum.receipts b ON a.hash = b.tx_hash\nWHERE a.\"from\" = '\\x{{ eth_address }}'"}
{"prompt": "This query will return the distinct number of buyers as well as the total number of transactions associated with each buyer.", "completion": " SELECT DISTINCT \"buyer\"  as \"User Address\" ,\nCOUNT (\"buyer\") as \"Total Txns\" \nFROM uniswap.\"Exchange_evt_EthPurchase\"\n-- WHERE \"call_success\" = \nGROUP BY 1"}
{"prompt": "This SQL query finds the maximum block number for addresses that are in the 'addresses' table and are not the 'to' address in the Ethereum transactions table.", "completion": " WITH addresses(addr) AS (\n                         VALUES ('\\xc477a6881863ba0518ec598906c6ca28e3ba9895'),\n                                 ('\\x05475a982140d70026662270d51e1dadf85d87b1'))\nSELECT \"from\",\n       max(block_number)\nFROM ethereum.transactions\nWHERE \"from\" IN\n    (SELECT addr::bytea\n     FROM addresses)\n  AND \"to\" NOT IN ('\\x69670b0c1b100739812415dd474804bb32b3aeca')\nGROUP BY 1;"}
{"prompt": "This SQL query returns the total amount repaid each day, as well as the cumulative amount repaid up to that day, for the last 10 days.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\nsum(Amount/1e18) as repay,\nsum(sum(Amount/1e18)) over (order by date_trunc('day', block_time)) as cumul_repay\nFROM fulcrum.\"iToken_evt_Repay\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nWHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\nGROUP BY 1 \nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This query returns the following information for each trade: the batch ID, the block time, the symbol of the sell token, the symbol of the buy token, and the price.", "completion": " SELECT DISTINCT\n    solution.\"batchId\",\n    transactions.\"block_time\", \n    sell_token.\"symbol\" as \"sellToken\",\n    buy_token.\"symbol\" as \"buyToken\",\n    ((\"executedBuyAmount\"/10^(buy_token.\"decimals\"))/(\"executedSellAmount\"/10^(sell_token.\"decimals\"))) as Price\nFROM gnosis_protocol.\"BatchExchange_evt_Trade\" trades\nJOIN gnosis_protocol.\"view_tokens\" buy_token\n    ON trades.\"buyToken\" = buy_token.\"token_id\"\nJOIN gnosis_protocol.\"view_tokens\" sell_token\n    ON trades.\"sellToken\" = sell_token.\"token_id\"\nJOIN ethereum.\"transactions\" transactions\n  ON transactions.hash = trades.evt_tx_hash\n AND transactions.success = true\nJOIN gnosis_protocol.\"BatchExchange_call_submitSolution\" solution\n  ON solution.call_tx_hash=transactions.hash\nORDER BY \"block_time\" desc\n;"}
{"prompt": "This SQL query returns the number of Dapper contracts created.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\xa78bbf97033e534c54b0a4fa62aa77b652ae4097', '\\xab76c6d00c603a7615d5459132c1745eb1fb4f6c') -- Dapper  WalletFactories \n\tand type = 'create'\n)\nselect count(*)\nfrom wallets"}
{"prompt": "SELECT * FROM gasstationnetwork.\"RelayHub_evt_Staked\" LIMIT 10\n\nThis SQL query will select the first 10 rows from the \"RelayHub_evt_Staked\" table in the gasstationnetwork database.", "completion": " SELECT * FROM gasstationnetwork.\"RelayHub_evt_Staked\" LIMIT 10"}
{"prompt": "This SQL query returns the number of Dharma contracts created.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\xfc00C80b0000007F73004edB00094caD80626d8D') -- DharmaSmartWalletFactoryV1\n\tand type = 'create'\n)\nselect count(*)\nfrom wallets"}
{"prompt": "This SQL query will select all of the data from the table \"KittyCore_evt_Birth\" in the database \"cryptokitties\", and join it with the table \"ethereum.transactions\" on the column \"evt_tx_hash\". The results will only include rows where the value in the column \"block_time\" is greater than '2019-11-01'.", "completion": " select * from cryptokitties.\"KittyCore_evt_Birth\" inner join ethereum.transactions ON evt_tx_hash = hash where block_time > '2019-11-01'"}
{"prompt": "This SQL query returns the \"from\" address, the total number of transactions, and the total amount of ETH for all transactions where the \"to\" address is one of a specific set of addresses.", "completion": " SELECT \"from\", count(*) as total_transactions, sum(value/1e18) as total_eth\nfrom ethereum.transactions\nWHERE \"to\" IN ('\\x4427ee02Ffa0BfAB4206f445a31239323177b587',\n               '\\x336a3f0c4d40b1e39cee72e2e59330daf484848c',\n               '\\x5526dc369bBE6B9B2c5e64BB368C1d3Ccfa58271',\n               '\\x9b2D66562bea3EefEc436dF0Fee88Dd89CbE547b',\n               '\\xDd1f234967913C25f176bda85A9825BA880e447E',\n               '\\x159CCfFB293a06Aafaec1b254A00522A2bC40639',\n               '\\x5e3eC117baf30044A1b08267208a130E7D69704E',\n               '\\x215e7E7eDEfdA37EB39df17B8b91DA9a60d85530',\n               '\\x9eb041AF96d44583110565ABeC79aedf22Eb60b5',\n               '\\x09f8b64A3992aB516FC34de1157d2b4a39D45301',\n               '\\x3095E50D8b6ecD80EdC83943a19E00BF596E525f',\n               '\\x3095E50D8b6ecD80EdC83943a19E00BF596E525f',\n               '\\x0CD4ea9B68CEd287Fc25923B071C0b1a0a14e9c6',\n               '\\x3095E50D8b6ecD80EdC83943a19E00BF596E525f',\n               '\\x883d723B3F4a12EdD577A47f80DF9f2896Cd3cE7',\n               '\\x883d723B3F4a12EdD577A47f80DF9f2896Cd3cE7',\n               '\\x883d723B3F4a12EdD577A47f80DF9f2896Cd3cE7',\n               '\\xA2922aE30Ff11c0fEf6E250b3892A451BDd533f1',\n               '\\xd3C75c3C553f06eeb345E2D06340B6b473d45aDa',\n               '\\x1164B5b85af48F92f35A7B3043300A91Ae8d0b48',\n               '\\x9dA5F88e2BD9c4DA00fA30a2230117Dc5ad2621e',\n               '\\xcdBa82888e4698C485AbAcf8C7Ad87dC2221f378',\n               '\\xD4718F4601Af5365360896F763bb9D7173257450',\n               '\\x74c38Bf0C506EB5Ee22cdD8827c109B0C91e0D77',\n               '\\xf66ffd1b3BB6771d3D365605FB4B408c4F7424c0',\n               '\\x604cac9ce467021908814F5a36a006E236ae10a2',\n               '\\x6Aa83B12973F3364Bc7F17211cFd85C7586FB371',\n               '\\xbf3D7084D5669f4A2Dda9aCF96fD60Ad814734D7',\n               '\\xFf718805bB9199eBf024ab6ACd333E603Ad77c85',\n               '\\x289f70e8C29657E574De9cF78D74cb20f674936a',\n               '\\x8a65C8565504a2BDe31F9c09125f5b9D53B2B07e',\n               '\\x0a7DDe263eb93F69acD1671A223C5C93faA73701',\n               '\\x688e8d92fcFf37b37f0b3910120f0ce906f12483',\n               '\\xBc91d37841f58Fc8611AB045C240BD5241090B86',\n               '\\xD4718F4601Af5365360896F763bb9D7173257450',\n               '\\xfC930BC7AA32b14a87F49A4E120Ff54f8F0a5E05',\n               '\\xDD0385e83fc3cBeFc00c47716774d71ee583805A',\n               '\\xcf75D0bF4E47f3dB616a28D1Cf8d4153D3957edA',\n               '\\xD1381f89B4feea63e9C6BC97dc9Fc2B0C96BF12F',\n               '\\xB25711E2493378EAbB02E74de6653129846d5434',\n               '\\x4A0d6F59e4e689506122FC7691Ea0B3c9e9f7964',\n               '\\x3bFf0D893f8F595bc40ad266772b583DA492b20F',\n               '\\xA3570c82D03bBf8C337799FE3f502729D3Cf0DBc',\n               '\\x0084515449B037205A33d6d3940a5684126Aa4b5',\n               '\\x7bc060459dd2730d912B654EC98cacDeE2b6927d',\n               '\\x0cbC569253E2419856e4a777cf406d35444d8E50',\n               '\\xA568d32db25A052a7887c401Bb1cDFfeC5389201',\n               '\\xA2922aE30Ff11c0fEf6E250b3892A451BDd533f1',\n               '\\x71C4409d6c37d0c15027ab6108380012bb5eE6a5',\n               '\\xC90CEbb23C12669fCD7F9d50DD54465546085967',\n               '\\xAA90aE1b969bc96e82C80E834b5F739E335B7e47',\n               '\\x015fcA1D09287823e634AE51237ee1eeFF03D9d5',\n               '\\x93CF4d6de98478Cf5b404304C45c8b4363bF10fb',\n               '\\x4a232983530cC4b1D845cf83c0d98F07F5884890',\n               '\\x1847b35a3444EDBedE05B52a378D45E13eEa54C4',\n               '\\x96C94575af5c6755123De2f2A9C4f7B62c43c511',\n               '\\x1847b35a3444EDBedE05B52a378D45E13eEa54C4',\n               '\\x3e58D0921D63e1529A315b972d94467d71fa633C')\nGROUP BY \"from\"\norder by total_transactions desc"}
{"prompt": "This SQL query returns the number of trades made by each trader who is whitelisted.", "completion": " select trade.transactor as trader, count(*) as num_trades\nfrom gnosis.\"Sight_MarketMaker_evt_AMMOutcomeTokenTrade\" trade, \nethereum.transactions tx,\n(select distinct unnest(w.users) as users from gnosis.\"Sight_Whitelist_evt_UsersAddedToWhitelist\" w) whitelisted\nwhere trade.transactor=whitelisted.users\nand trade.evt_tx_hash=tx.hash\nand tx.success=true\ngroup by trader;\n"}
{"prompt": "This SQL query returns the total USD volume for each token traded on Airswap, for every minute in which a trade occurred. It does this by joining the data from the \"Exchange_evt_Filled\" and \"tokens/usd\" tables, then grouping and summing the data by token symbol.", "completion": " select p.symbol, SUM(f.\"makerAmount\" * p.average)/1e18 FROM airswap.\"Exchange_evt_Filled\" f\nINNER JOIN ethereum.transactions tx ON f.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" p ON p.asset = f.\"makerToken\" AND date_trunc('minute', tx.block_time) = p.time\nGROUP BY 1;"}
{"prompt": "This SQL query selects the distinct tokens from the Gnosis Protocol BatchExchange event Deposit where the token is equal to 6b175474e89094c44da98b954eedeac495271d0f.", "completion": " SELECT \ndistinct(token)\nFROM gnosis_protocol.\"BatchExchange_evt_Deposit\"\nWHERE \"token\" = '\\x6b175474e89094c44da98b954eedeac495271d0f'\nLIMIT 20\n\n"}
{"prompt": "This SQL query selects the first 10 rows from the aave.\"aToken_evt_MintOnDeposit\" table.", "completion": " SELECT *\nFROM aave.\"aToken_evt_MintOnDeposit\" LIMIT 10"}
{"prompt": "The SQL query below returns the total USD volume of Eth2Dai trades over the past 24 weeks, grouped by week.", "completion": " SELECT    date_part('week', tx.block_time) AS time,    SUM((dai)/1e18 * p.average) as \"USD volume\"\nFROM ((SELECT tx_hash, buy_amt AS dai FROM oasisdex.\"eth2dai_evt_LogTrade\"\n        WHERE buy_gem = '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359')\n      UNION\n        (SELECT tx_hash, pay_amt AS dai FROM oasisdex.\"eth2dai_evt_LogTrade\"\n            WHERE pay_gem = '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359')) dai\n            \nINNER JOIN (SELECT hash, block_time FROM ethereum.transactions tx\n                WHERE tx.block_time > now() - interval '24 weeks'\n                ) tx\n    ON dai.tx_hash = tx.hash\n            \nINNER JOIN coincap.\"tokens/usd\" p ON p.time = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'DAI'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns the total amount of USDC tokens held by the Harvest Finance USDC pool, as well as the individual account balances.", "completion": " SELECT account,\n       sum(amount) AS amount\nFROM\n  (SELECT \"to\" AS account,\n          value / 1e6 AS amount\n   FROM erc20.\"ERC20_evt_Transfer\"\n   WHERE contract_address = '\\xf0358e8c3cd5fa238a29301d0bea3d63a17bedbe'\n     AND \"from\" = '\\x0000000000000000000000000000000000000000'\n     AND evt_block_time >= '2020-08-31'\n     AND evt_block_number < 11129474\n   UNION SELECT \"from\" AS account, -value / 1e6 AS amount\n   FROM erc20.\"ERC20_evt_Transfer\"\n   WHERE contract_address = '\\xf0358e8c3cd5fa238a29301d0bea3d63a17bedbe'\n     AND \"to\" = '\\x0000000000000000000000000000000000000000'\n     AND evt_block_time >= '2020-08-31'\n     AND evt_block_number < 11129474) a\nGROUP BY 1\nORDER BY 2 DESC"}
{"prompt": "This SQL query retrieves the beInvitedCode parameter from invest() function calls made to the ethereum address '\\x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c' that have a block_number of 8235058 or higher.", "completion": " select /*substring(data,1,4) as method_id, tx.hash, tx.block_number,*/ substring(tx.data,5,32) as useraddr, hash\nfrom ethereum.transactions tx\ninner join ethereum.receipts r\non tx.hash = r.tx_hash\nwhere tx.\"to\" = '\\x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c'\nand tx.block_number >= 8235058\nand substring(data,1,4) = '\\x55d58a1b'"}
{"prompt": "This query finds all of the Moloch members who have offered tribute and then ragequit.", "completion": " -- Find Members that have offered tribute and then ragequit\n\n\nWITH proposals AS (\n    SELECT * FROM moloch.\"Moloch_call_submitProposal\"\n    WHERE \"tokenTribute\" > 0\n)\n\nSELECT * FROM moloch.\"Moloch_evt_Ragequit\" r\nJOIN proposals\nON r.\"memberAddress\" = proposals.applicant"}
{"prompt": "This query returns data on failed liquidations for the MakerDAO (SCD) protocol for a given day. It includes the day, the cup (collateralization ratio), the number of failed liquidations, the number of successful liquidations, and the transaction hash for the successful liquidations.", "completion": " WITH success AS (\n    SELECT\n        date_trunc('day', block_time) day_parsed,\n        s.*\n    FROM\n        maker.\"SaiTub_call_bite\" s\n    LEFT JOIN\n        ethereum.\"transactions\" tx\n        ON\n            s.call_tx_hash = tx.hash\n    WHERE\n        call_success = true\n),\nfailed AS (\n    SELECT\n        date_trunc('day', block_time) day_parsed,\n        s.*\n    FROM\n        maker.\"SaiTub_call_bite\" s\n    LEFT JOIN\n        ethereum.\"transactions\" tx\n        ON\n            s.call_tx_hash = tx.hash\n    WHERE\n        call_success = false\n),\naggregated_failures AS (\n    SELECT\n        day_parsed, COUNT(1), cup\n    FROM\n        failed\n    GROUP BY 1,3\n),\naggregated_success AS (\n    SELECT\n        day_parsed, COUNT(1), cup, call_tx_hash\n    FROM\n        success\n    GROUP BY 1,3,4\n)\n\nSELECT f.day_parsed, f.cup, f.count, s.count, s.call_tx_hash\nFROM aggregated_failures f\nLEFT JOIN aggregated_success s\nON f.day_parsed = s.day_parsed AND f.cup = s.cup\nORDER BY 1 DESC"}
{"prompt": "This query returns the number of Tornado Cash deposits made each day, the value of those deposits in ETH, and the total number of deposits made.", "completion": " SELECT \n    date_trunc('day', tx.block_time) as date, \n    tx.value / 1e18 as amount, \n    count(*) as count\nFROM tornado_cash.\"eth_evt_Deposit\" e\nLEFT JOIN ethereum.transactions tx ON tx.hash = e.evt_tx_hash\nWHERE \n    tx.block_time > DATE '2019-12-17' AND\n    tx.value > 0\nGROUP BY tx.value, date\nORDER BY date;"}
{"prompt": "This SQL query returns the highest average prices for each stablecoin (USDC, DAI, TUST, GUSD, USDT, PAX) for each day.", "completion": " SELECT date_trunc('d', TIME) AS DAY,\n       symbol,\n       max(average) AS high\nFROM coincap.\"tokens/usd\"\nWHERE symbol IN ('USDC',\n                 'DAI',\n                 'TUST',\n                 'GUSD',\n                 'USDT',\n                 'PAX')\nGROUP BY 1,\n         2;"}
{"prompt": "This query returns the number of unique NMR stakers per week.", "completion": " SELECT\ndate_trunc('week', tx.block_time),\nCOUNT(distinct staker) AS users\nFROM numerai.\"SimpleGriefing_evt_StakeAdded\" s\nLEFT JOIN ethereum.transactions tx ON tx.hash = s.evt_tx_hash\nGROUP BY 1;\n"}
{"prompt": "This SQL query returns the USD volume for each market on Uniswap over the past two months, ordered by date.", "completion": " SELECT  date_trunc('week', tx.block_time) as Date,\n        s.symbol as market,\n        SUM(eth/1e18 * p.average) as \"USD volume\"  \nFROM ((SELECT tx_hash, eth_sold AS eth, address AS address FROM uniswap.\"Exchange_evt_TokenPurchase\")\n       UNION\n      (SELECT tx_hash, eth_bought AS eth, address AS address FROM uniswap.\"Exchange_evt_EthPurchase\")) ether\nINNER JOIN ethereum.transactions tx ON ether.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" p ON date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\nINNER JOIN uniswap.\"Factory_evt_NewExchange\" f ON ether.address = f.exchange\nINNER JOIN coincap.\"symbols\" s ON f.token = s.asset                              \nWHERE tx.block_time > now() - interval '2 months' \nGROUP BY 1, 2\nORDER BY 1;"}
{"prompt": "This SQL query returns the hour, token symbol, sum of amount in USD, sum of amount in USD2, sum of amount, average price, sum of amount in USD divided by sum of amount, and count of token for a given wallet address.", "completion": " select\n\nhour,\ntoken_symbol,\nsum(amount_usd) amount_usd,\nsum(amount*price) amount_usd2,\nsum(amount) amount,\navg(price) price,\nsum(amount_usd)/nullif(sum(amount),0) price2,\ncount(*) num_tokens\n\nFROM\n\nerc20.view_token_balances_hourly h left  join (\nselect contract_address token_address, date_trunc('hour', hour) as hour, median_price price from \nprices.prices_from_dex_data \nwhere hour >= '{{start_date}}'\n-- group by 1,2 \n) p using (token_address, hour)\n\nwhere \nwallet_address = '\\x09bEDd66e7d3Ac89E0abA5f00c52CaE299C00a1d'\n\n-- token_address = '\\x429881672B9AE42b8EbA0E26cD9C73711b891Ca5'\nAND\nhour >='{{start_date}}'\n\ngroup by 1,2\norder by 1 desc, 3 desc\nlimit 1000"}
{"prompt": "This SQL query creates or replaces a view called \"compound_view_borrow\" which contains information on borrow transactions from the Compound protocol. The view includes the following information:\n\n- The symbol of the token being borrowed\n- The amount of the loan (in the token's base units)\n- The value of the loan in USD (at the time of the transaction)\n- The amount of the loan that is attributable to the account borrowing the tokens\n- The total amount of the loan\n- The contract address of the cToken being borrowed\n- The address of the underlying token being borrowed\n- The transaction hash of the borrow event\n- The block time of the borrow event", "completion": " CREATE OR REPLACE VIEW dune_user_generated.compound_view_borrow AS\nSELECT t.symbol AS \"symbol\",\n       \"borrowAmount\"/10^t.decimals AS \"borrowAmount\",\n       \"borrowAmount\"/10^t.decimals*p.price AS \"borrowAmountUSD\",\n       \"accountBorrows\"/10^t.decimals AS \"accountBorrows\",\n       \"totalBorrows\"/10^t.decimals AS \"totalBorrows\",\n       events.contract_address AS \"cToken\",\n       c.\"underlying_token_address\" AS \"underlyingToken\",\n       evt_tx_hash AS tx_hash,\n       tx.block_time AS block_time\nFROM\n  (SELECT *\n   FROM compound_v2.\"cErc20_evt_Borrow\"\n   UNION SELECT *\n   FROM compound_v2.\"cEther_evt_Borrow\"\n   UNION SELECT *\n   FROM compound_v2.\"CErc20Delegator_evt_Borrow\") EVENTS\nLEFT JOIN compound_v2.view_ctokens c ON events.contract_address = c.contract_address\nLEFT JOIN ethereum.transactions tx ON events.evt_tx_hash = tx.hash\nLEFT JOIN erc20.tokens t ON c.underlying_token_address = t.contract_address\nLEFT JOIN\n  (SELECT MINUTE,\n          contract_address,\n          symbol,\n          price\n   FROM prices.usd\n   UNION SELECT generate_series('2019-11-18', now(), '1 minute'),\n                '\\x6B175474E89094C44Da98b954EedeAC495271d0F'::bytea AS contract_address,\n                'DAI' AS symbol,\n                1 AS price) p ON p.minute = date_trunc('minute', tx.block_time)\nAND p.contract_address = c.underlying_token_address;"}
{"prompt": "This SQL query returns the net borrows for each day in the Fulcrum USDC contract, as well as the cumulative net borrows up to that day.", "completion": " WITH net_borrow AS \n(\n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(\"borrowAmount\") as borrows\n    FROM fulcrum.\"iToken_evt_Borrow\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\xF013406A0B1d544238083DF0B93ad0d2cBE0f65f'\n    GROUP BY 1 \nUNION ALL\n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(-Amount) as borrows\n    FROM fulcrum.\"iToken_evt_Repay\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\xF013406A0B1d544238083DF0B93ad0d2cBE0f65f'\n    GROUP BY 1 \n)\n\nSELECT \nnet_borrow.day,\nsum(borrows) as net_borrow,\nsum(sum(borrows)) over (order by net_borrow.day) as cumul_net_borrow\nFROM net_borrow\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This SQL query returns the average price of DAI auctioned for WETH on the Gnosis DutchX exchange, as well as the average market price of WETH and DAI, for each day.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    avg(\"sellVolume\" / \"buyVolume\") as \"DutchX price\",\n    avg(eth.average / dai.average) as \"Market price\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" dai \n\nWHERE \"sellToken\" = '\\x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' --dai\nAND \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', dai.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND dai.symbol = 'DAI'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "This SQL query returns the following data:\n\n- The time of the event (in minutes)\n- The average price of the event\n- The minimum price of the event\n- The maximum price of the event\n\nThe event is either a stETH/ETH swap where tokens are sold, or an ETH/stETH swap where tokens are bought. The time period is the last 90 days.", "completion": " select \n    time, \n    sum(price*amount)/sum(amount) as vwap,\n    min(price) as low_price,\n    max(price) as high_price\nfrom (\n    select \n        DATE_TRUNC('minute', evt_block_time) as time, \n        \"tokens_sold\"/\"tokens_bought\" as price,  \n        \"tokens_bought\" as amount\n    from curvefi.\"steth_swap_evt_TokenExchange\"\n    where sold_id = 0 and evt_block_time >= (CURRENT_DATE - 90) \n    union \n    select\n        DATE_TRUNC('minute', evt_block_time) as time, \n        \"tokens_bought\"/\"tokens_sold\" as price,  \n        \"tokens_sold\" as amount\n    from curvefi.\"steth_swap_evt_TokenExchange\"\n    where sold_id = 1 and \"tokens_bought\" > 0 and evt_block_time >= (CURRENT_DATE - 30) \n    ) price_both\nwhere amount > 1 -- getting ghost values w/ amount = 1 [gwei]\ngroup by 1\norder by 1 "}
{"prompt": "This query returns the number of addresses that have a balance of more than 0 FAIR tokens.", "completion": " WITH outboundFair AS\n  (SELECT \"from\",\n          SUM(\"value\") amt\n   FROM fairmint.\"DAT_evt_Transfer\"\n   WHERE contract_address = '\\x{{ contract_address }}'\n   GROUP BY 1),\n     inboundFair AS\n  (SELECT \"to\",\n          SUM(\"value\") amt\n   FROM fairmint.\"DAT_evt_Transfer\"\n   WHERE contract_address = '\\x{{ contract_address }}'\n   GROUP BY 1)\nSELECT count(*)\nFROM\n  (SELECT inboundFair.\"to\" AS address,\n          CASE\n              WHEN outboundFair.amt IS NULL THEN inboundFair.amt/1e18\n              ELSE (inboundFair.amt - outboundFair.amt)/1e18\n          END AS fair_balance\n   FROM inboundFair\n   LEFT JOIN outboundFair ON outboundFair.\"from\" = inboundFair.\"to\"\n   WHERE inboundFair.\"to\" != '\\x0000000000000000000000000000000000000000') AS TEMP_TABLE\nWHERE fair_balance > 0"}
{"prompt": "This query returns the price of Ethereum in USD, the ETH/BTC ratio, and the 7-day and 30-day moving averages for the price of Ethereum before and after the merge.", "completion": " WITH merge AS (\nselect\n    '2022-09-15' as expected_date\n),\n\neth_price as (\nselect \n    date_trunc('day', minute) as dt, \n    AVG(price) as price\nfrom prices.usd \nwhere symbol = 'ETH' \nand minute >= '2021-01-01'\ngroup by dt\n\nUNION\n\nSELECT\n    explode(sequence(date_trunc('day', now()), '2022-11-01'::TIMESTAMP, interval 1 day)) AS dt,\n    null AS price\n),\n\nbtc_price as (\nselect \n    date_trunc('day', minute) as dt, \n    AVG(price) as btc_price,\n    AVG(price) as btc_price_for_log \nfrom prices.usd \nwhere symbol in ('BTC','WBTC') \nand minute >= '2021-01-01'\ngroup by dt\n\nUNION\n\nSELECT\n    explode(sequence(date_trunc('day', now()), '2022-11-01'::TIMESTAMP, interval 1 day)) AS dt,\n    null AS btc_price,\n    null AS btc_price_for_log\n)\n\nselect \n    ep.dt, \n    price, \n    price/btc_price as eth_btc_ratio,\n    avg(price) over (ORDER BY ep.dt ROWS BETWEEN 7 PRECEDING AND 0 FOLLOWING) as seven_day_ma,\n    avg(price) over (ORDER BY ep.dt ROWS BETWEEN 30 PRECEDING AND 0 FOLLOWING) as thirty_day_ma,\n    null as MergeLine\nfrom eth_price ep \nleft join btc_price bp on ep.dt = bp.dt\n\nunion \n\nselect \n    date_trunc('day', expected_date) as time, \n    null as price,\n    null as eth_btc_ratio,\n    null as seven_day_ma,\n    null as thirty_day_ma,\n    \n    1e8 as MergeLine\nFROM merge"}
{"prompt": "This SQL query returns data on the USD volume of Uniswap purchases over time, broken down by token. The data is aggregated by week and ordered by date.", "completion": " SELECT date_trunc('week', tx.block_time) as Date,\n       p.symbol AS token, \n       SUM(eth/1e18 * p.average) as \"USD volume\"\nFROM ((SELECT tx_hash, eth_sold AS eth FROM uniswap.\"Exchange_evt_TokenPurchase\")\n      UNION\n        (SELECT tx_hash, eth_bought AS eth FROM uniswap.\"Exchange_evt_EthPurchase\")) ether\nINNER JOIN ethereum.transactions tx ON ether.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" p ON date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\nWHERE tx.block_time > now() - interval '2 months'\nGROUP BY 1, 2\nORDER BY 1;"}
{"prompt": "What is the total number of transactions processed by Loopring?", "completion": " SELECT SUM(\"blockSize\")\nFROM loopring.\"DEXBetaV1_call_commitBlock\" b;"}
{"prompt": "This query shows the amount of DSR ( Dai Stablecoin Rewards) that have been earned by a specific address over time. It starts from 1/25/20 and goes up to the present day.", "completion": " WITH cumul_DSR AS \n(\nWITH inbound AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(rad/1e45) as inb FROM makermcd.\"VAT_call_move\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nwhere dst = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\nGROUP BY 1\nORDER BY 1 desc\n),\n\noutbound AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(-rad/1e45) as outb FROM makermcd.\"VAT_call_move\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nWHERE src = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT \ninbound.day as day,\nsum(inb + outb) as net_DSR,\nsum(sum(inb + outb)) over (order by inbound.day) as cumulative_net_DSR\nFROM inbound\nLEFT JOIN outbound ON inbound.day = outbound.day\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT cumul_DSR.day,\nsum(cumul_DSR.cumulative_net_DSR*0.00021232876) \nFROM cumul_DSR\nWHERE cumul_DSR.day > '1/25/20'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 20"}
{"prompt": "This query will return the total amount of rad (a unit of currency used on the Maker platform) that has been sent to a specific address over the past 10 days.", "completion": " SELECT * FROM makermcd.\"VAT_call_dai\"\nWHERE \"_0\" = '\\xa950524441892a31ebddf91d3ceefa04bf454466'\nLIMIT 10\n\nSELECT\ndate_trunc('day', block_time) as day,\nsum(rad/1e45)\nFROM makermcd.\"VAT_call_move\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nWHERE \"dst\" = '\\xa950524441892a31ebddf91d3ceefa04bf454466'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This SQL query returns the number of transactions made to each proxy registered with InstaDapp, sorted by the number of transactions made to each proxy.", "completion": " SELECT \"to\" as \"Proxy\",COUNT(1) as \"TxCount\" FROM ethereum.\"transactions\" \nWHERE \"to\" IN (\n    SELECT proxy FROM instadapp_v2.\"InstaRegistry_evt_Created\"\n) AND block_number > 7523221 GROUP BY (\"to\") ORDER BY \"TxCount\" DESC"}
{"prompt": "This query select the sum of all \"assetAmount\" values from the fulcrum.\"iToken_evt_Mint\" table where the contract_address is equal to 493c57c4763932315a328269e1adad09653b9081 (in hexadecimal encoding).", "completion": " select SUM(\"assetAmount\" / 1e18)\nfrom fulcrum.\"iToken_evt_Mint\"\nwhere encode(contract_address, 'hex') = '493c57c4763932315a328269e1adad09653b9081'"}
{"prompt": "This query calculates the total amount of SAI in circulation by adding the total amount minted and the total amount burned.", "completion": " WITH mint AS (SELECT SUM(wad/1e18) as amount FROM maker.\"SAI_evt_Mint\"),\nburn AS(SELECT SUM(-wad/1e18) as amount FROM maker.\"SAI_evt_Burn\")\nSELECT mint.amount+burn.amount AS \"SAI in circulation\" FROM mint, burn\n\n"}
{"prompt": "This SQL query returns the number of successful CDP migrations by day, where the migration transaction occurred after 2019-11-18 16:00:00.", "completion": " SELECT date_trunc('day', tx.block_time) AS datetime, COUNT(*) FROM makermcd.\"ScdMcdMigration_call_migrate\" n\nLEFT JOIN ethereum.transactions tx ON tx.hash = n.call_tx_hash\nWHERE call_success = TRUE AND date_trunc('minute', tx.block_time) > '2019-11-18 16:00:00'\nGROUP BY 1"}
{"prompt": "This SQL query returns the total revenue generated by keepers per day from the Compound v2 contract, in USD. The revenue is calculated by taking a percentage of the tokens seized from borrowers who have failed to repay their loans.", "completion": " SELECT\n    date_trunc('day', block_time) as day\n    , sum(\"seizeTokens\"/1e13 * p.price * 0.05) as keeper_revenue_usd\nFROM compound_v2.\"cErc20_evt_LiquidateBorrow\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nGROUP BY 1\nORDER BY 1 desc"}
{"prompt": "This SQL query returns the day, name, and sum of total deposits for each day and name.", "completion": " select day, name, sum(total) over (order by day,name asc rows between unbounded preceding and current row) from \n(SELECT date_trunc('day', block_time) AS day,\n       (case\n       when encode(contract_address, 'hex') = 'f61718057901f84c4eec4339ef8f0d86d2b45600' then 'ySUSD'\n       when encode(contract_address, 'hex') = 'd6ad7a6750a7593e092a9b218d66c0a814a3436e' then 'yUSDC'\n       when encode(contract_address, 'hex') = '16de59092dae5ccf4a1e6439d611fd0653f0bd01' then 'yDAI'\n       when encode(contract_address, 'hex') = '83f798e925bcd4017eb265844fddabb448f1707d' then 'yUSDT'\n       when encode(contract_address, 'hex') = '04aa51bbcb46541455ccf1b8bef2ebc5d3787ec9' then 'yBTC'\n       when encode(contract_address, 'hex') = '73a052500105205d34daf004eab301916da8190f' then 'yTUSD'\n       end) as name,\n       sum(_amount/(case \n       when encode(contract_address, 'hex') = '83f798e925bcd4017eb265844fddabb448f1707d' then 1e6\n       when encode(contract_address, 'hex') = 'd6ad7a6750a7593e092a9b218d66c0a814a3436e' then 1e6\n       when encode(contract_address, 'hex') = '04aa51bbcb46541455ccf1b8bef2ebc5d3787ec9' then 1e8\n       else 1e18 end)) as total\nFROM iearn_v2.\"yToken_call_deposit\" yci\nLEFT JOIN ethereum.\"transactions\" tx ON yci.call_tx_hash = tx.hash\nGROUP BY 1,2) a"}
{"prompt": "The SQL query will select all data from the \"transactions\" table in the Ethereum database, and will limit the results to 1.", "completion": " SELECT * FROM ethereum.\"transactions\"\nLIMIT 1"}
{"prompt": "This SQL query returns the block time, amount, sell token, buy token, and user for all buy orders on the Dutch Exchange.", "completion": " select  \n    tx.\"block_time\" as time, \n    dd.\"amount\",\n    dd.\"sellToken\",\n    dd.\"buyToken\",\n    dd.user\nfrom gnosis.\"DutchExchange_evt_NewBuyOrder\" as dd inner join ethereum.\"transactions\" as tx\non dd.tx_hash = tx.hash"}
{"prompt": "This query returns the amount of ETH burned for each day starting from August 5th, 2021 until today.", "completion": " SELECT date_trunc('day', time) AS \"Date\",\nSUM(gas_used*base_fee_per_gas)/1e18 AS \"Burned Ethereum\"\nFROM ethereum.\"blocks\"\nWHERE time >= '2021-08-05'\nAND time < date_trunc('day', NOW())\nGROUP BY \"Date\""}
{"prompt": "This SQL query returns a list of the top collectors, as well as the number of artworks they have bought, the amount of USD they have spent, and the amount of ETH they have spent.", "completion": " SELECT name,\n       count(*) AS artworks_bought,\n       sum(_amount / 1e18 * p.price) AS usd_spent,\n       sum(_amount / 1e18) AS eth_spent\nFROM\n  (SELECT evt_block_time,\n          \"_buyer\",\n          \"_amount\"\n   FROM superrare.\"SuperRareMarketAuction_evt_Sold\"\n   UNION ALL SELECT evt_block_time,\n                    \"_buyer\",\n                    \"_amount\"\n   FROM superrare.\"SuperRare_evt_Sold\"\n   UNION ALL SELECT evt_block_time,\n                    \"_bidder\",\n                    \"_amount\"\n   FROM superrare.\"SuperRareMarketAuction_evt_AcceptBid\"\n   UNION ALL SELECT evt_block_time,\n                    \"_bidder\",\n                    \"_amount\"\n   FROM superrare.\"SuperRare_evt_AcceptBid\"\n   UNION ALL SELECT block_time,\n                    substring(topic3\n                              FROM 13\n                              FOR 20),\n                    bytea2numeric(substring(DATA\n                                            FROM 33\n                                            FOR 32))\n   FROM ethereum.\"logs\"\n   WHERE contract_address = '\\x8c9f364bf7a56ed058fc63ef81c6cf09c833e656'\n     AND topic1 = '\\xea6d16c6bfcad11577aef5cc6728231c9f069ac78393828f8ca96847405902a9'\n     AND bytea2numeric(substring(DATA\n                                 FROM 33\n                                 FOR 32)) > 0\n   UNION ALL SELECT block_time,\n                    substring(topic3\n                              FROM 13\n                              FOR 20),\n                    bytea2numeric(substring(DATA\n                                            FROM 1\n                                            FOR 32))\n   FROM ethereum.\"logs\"\n   WHERE contract_address = '\\x65b49f7aee40347f5a90b714be4ef086f3fe5e2c'\n     AND topic1 IN ('\\x2a9d06eec42acd217a17785dbec90b8b4f01a93ecd8c127edd36bfccf239f8b6',\n                    '\\x5764dbcef91eb6f946584f4ea671217c686fa7e858ce4f9f42d08422b86556a9')\n   UNION ALL SELECT evt_block_time,\n                    _bidder,\n                    _amount\n   FROM superrare.\"SuperRareBazaar_evt_AcceptOffer\"\n   WHERE \"_currencyAddress\" = '\\x0000000000000000000000000000000000000000'\n   UNION ALL SELECT evt_block_time,\n                    _bidder,\n                    _amount\n   FROM superrare.\"SuperRareBazaar_evt_AuctionSettled\"\n   WHERE \"_currencyAddress\" = '\\x0000000000000000000000000000000000000000'\n   UNION ALL SELECT evt_block_time,\n                    _buyer,\n                    _amount\n   FROM superrare.\"SuperRareBazaar_evt_Sold\"\n   WHERE \"_currencyAddress\" = '\\x0000000000000000000000000000000000000000') a\nINNER JOIN prices.\"layer1_usd_eth\" p ON date_trunc('minute', a.evt_block_time) = p.minute\nLEFT JOIN superrare.usernames ON \"_buyer\" = address\nGROUP BY 1\nHAVING name != ''\nORDER BY 4 DESC"}
{"prompt": "This query returns the USD value of ETH stored in Authereum contracts.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8', '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea', '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046') -- Authereum Wallet Factorys\n\tand type = 'create'\n),\nperaddress as (\n    SELECT address, sum(amount) / 1e18 as amount\n    FROM (\n        SELECT \"from\" AS address, -value AS amount\n         FROM ethereum.traces\n         WHERE \"from\" IN (SELECT address FROM wallets)\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    UNION ALL\n        SELECT \"to\" AS address, value AS amount\n         FROM ethereum.traces\n         WHERE \"to\" IN (SELECT address FROM wallets )\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    ) t\n    group by 1\n)\nselect sum(amount) * (SELECT price FROM prices.usd WHERE symbol = 'ETH' ORDER BY minute desc LIMIT 1) as usd_value\nfrom peraddress"}
{"prompt": "This SQL query returns the number of DAOs deployed each month, as well as the total number of DAOs deployed.", "completion": " SELECT date_trunc('month', block_time) AS \"Month\",\n        COUNT(*) AS \"DAOs deployed\"\nFROM aragon.\"DAOFactory_evt_DeployDAO\" d\nLEFT JOIN ethereum.transactions tx\nON d.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This query returns the top 10 days over the past year where the ZRX price-to-earnings ratio was the highest.", "completion": " WITH ZRX_fees AS\n(\nSELECT \nday, \nfees_paid as \"protocol_fees\", \nsum(fees_paid) over (order by day) as \"cumulative_fees\"\nFROM \n(\n    SELECT\n    date_trunc('day', evt_block_time) as day,\n    sum(gas_price/1e18*150000*p.price) as fees_paid\n    FROM zeroex_v2.\"Exchange2.0_evt_Fill\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    INNER JOIN prices.usd p ON p.minute = date_trunc('day', block_time)\n    WHERE p.symbol = 'WETH'\n    GROUP BY 1\nUNION\n    SELECT\n    date_trunc('day', evt_block_time) as day,\n    sum(gas_price/1e18*150000*p.price) as fees_paid\n    FROM zeroex_v2.\"Exchange2.1_evt_Fill\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    INNER JOIN prices.usd p ON p.minute = date_trunc('day', block_time)\n    WHERE p.symbol = 'WETH'\n    GROUP BY 1\nUNION\n    SELECT\n    date_trunc('day', evt_block_time) as day,\n    sum(gas_price/1e18*150000*p.price) as fees_paid\n    FROM zeroex_v3.\"Exchange_evt_Fill\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    INNER JOIN prices.usd p ON p.minute = date_trunc('day', block_time)\n    WHERE p.symbol = 'WETH'\n    GROUP BY 1\n) AS fees\nORDER BY 1 desc\n),\n\nZRX_price AS \n(\nSELECT\nminute, \nprice\nFROM prices.usd\nWHERE symbol = 'ZRX'\n)\n\nSELECT\nday,\nsum(p.price/(cumulative_fees/100000000)) as ZRX_PE\nFROM ZRX_fees\nINNER JOIN ZRX_price p ON p.minute = day \nWHERE \"day\" > now() - interval '365 days'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n\n"}
{"prompt": "The SQL query calculates the outstanding DAI by subtracting the total amount of DAI burned from the total amount of DAI minted.", "completion": " \nwith mint AS(\nSELECT SUM(m.wad/1e18) as mint\nFROM maker.\"SAI_evt_Mint\" m),\n\nburn AS(\nSELECT SUM(wad/1e18) as burn FROM maker.\"SAI_evt_Burn\")\n\nSELECT mint-burn AS outstanding FROM mint, burn"}
{"prompt": "This SQL query returns the total USD value and time for all tokens traded on the 0x exchange over the past week.", "completion": " WITH usd_per_token AS\n  (SELECT price.symbol,\n        date_trunc('week', tx.block_time) as time,\n          CASE\n              WHEN price.symbol = 'USDC' THEN SUM(\"takerAssetFilledAmount\" / 1e6) ----don't multiply by anything as these assets are USD\n\n              WHEN price.symbol = 'TUSD' THEN SUM(\"takerAssetFilledAmount\" /1e18) --don't multiply by anything as these assets are USD\n\n              ELSE SUM(\"takerAssetFilledAmount\" /1e18 * price.average)\n          END AS total_usd_value\n   FROM zeroex.\"Exchange21_evt_Fill\" filled\n   INNER JOIN ethereum.transactions tx ON filled.tx_hash = tx.hash\n   INNER JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = price.time\n   AND substring(filled.\"takerAssetData\"\n                 FROM 17 FOR 40) = price.asset\n   GROUP BY 1, 2)\nSELECT SUM(total_usd_value), time\nFROM usd_per_token\nWHERE date_trunc('week', time) > now() - interval '1 week'\nGROUP BY 2\nORDER BY 2 desc;"}
{"prompt": "This query shows the number of blocks mined by a particular miner (0xaa5c4244f05c92781c4f259913319d8ba1acf05e) over time, grouped by week.", "completion": " select  date_trunc('week', time) as \"ym\", count(1) as blocks_mined\nfrom ethereum.blocks\nwhere \"miner\" = '\\xaa5c4244f05c92781c4f259913319d8ba1acf05e'\ngroup by \"ym\""}
{"prompt": "The following SQL query returns the total volume in USD, total revenue in USD, distinct traders, and distinct trades till date for Metamask DAU Ethereum.", "completion": " --Metamask DAU Ethereum til date\n    SELECT\n           SUM(usd_amount) AS total_volume_usd\n\n         , SUM(usd_amount)* .00875 AS total_revenue_usd\n         , COUNT(DISTINCT tx_from) AS distinct_traders_till_date\n         , COUNT(DISTINCT tx_hash) AS distinct_trades_till_date\n         \n      FROM   dex.\"trades\"\n     WHERE tx_to = '\\x881d40237659c251811cec9c364ef91dc08d300c'\n     --AND category = 'DEX'\n     --AND  usd_amount IS NOT NULL"}
{"prompt": "This query returns the total volume of sales for SuperRare over the past 30 days, in US dollars.", "completion": " SELECT sum(amount) AS volume\nFROM\n  (SELECT evt_block_time,\n          _amount / 1e18 * p.price AS amount\n   FROM\n     (SELECT evt_block_time,\n             _amount\n      FROM superrare.\"SuperRareMarketAuction_evt_Sold\"\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRare_evt_Sold\"\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRareMarketAuction_evt_AcceptBid\"\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRare_evt_AcceptBid\"\n      UNION ALL SELECT block_time,\n                       bytea2numeric(substring(DATA\n                                               FROM 33\n                                               FOR 32))\n      FROM ethereum.\"logs\"\n      WHERE contract_address = '\\x8c9f364bf7a56ed058fc63ef81c6cf09c833e656'\n        AND topic1 = '\\xea6d16c6bfcad11577aef5cc6728231c9f069ac78393828f8ca96847405902a9'\n        AND block_time >= '2020-12-08'\n      UNION ALL SELECT block_time,\n                       bytea2numeric(substring(DATA\n                                               FROM 1\n                                               FOR 32))\n      FROM ethereum.\"logs\"\n      WHERE contract_address = '\\x65b49f7aee40347f5a90b714be4ef086f3fe5e2c'\n        AND topic1 IN ('\\x2a9d06eec42acd217a17785dbec90b8b4f01a93ecd8c127edd36bfccf239f8b6',\n                       '\\x5764dbcef91eb6f946584f4ea671217c686fa7e858ce4f9f42d08422b86556a9')\n        AND block_time >= '2021-02-27'\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRareBazaar_evt_AcceptOffer\"\n      WHERE \"_currencyAddress\" = '\\x0000000000000000000000000000000000000000'\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRareBazaar_evt_AuctionSettled\"\n      WHERE \"_currencyAddress\" = '\\x0000000000000000000000000000000000000000'\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRareBazaar_evt_Sold\"\n      WHERE \"_currencyAddress\" = '\\x0000000000000000000000000000000000000000') a\n   INNER JOIN prices.\"layer1_usd_eth\" p ON date_trunc('minute', evt_block_time) = p.minute\n   AND evt_block_time > now() - interval '30 days') b"}
{"prompt": "This SQL query returns the total amount of Dai minted and burned each day since 2019-11-18.", "completion": " WITH mint AS\n(\nSELECT date_trunc('day', tx.block_time) AS day, SUM(wad/1e18) AS mint\nFROM makermcd.\"DAI_call_mint\" m\nLEFT JOIN ethereum.transactions tx ON tx.hash = m.call_tx_hash\nWHERE date_trunc('minute', tx.block_time) > '2019-11-18 16:00:00'\nAND m.call_success = 'true'\nGROUP BY 1\n),\n\nburn AS (\nSELECT date_trunc('day', tx.block_time) AS day, -SUM(wad/1e18) AS burn\nFROM makermcd.\"DAI_call_burn\" m\nLEFT JOIN ethereum.transactions tx ON tx.hash = m.call_tx_hash\nWHERE date_trunc('minute', tx.block_time) > '2019-11-18 16:00:00'\nAND m.call_success = 'true'\nGROUP BY 1\n)\n\nSELECT mint.day, mint, burn, mint + burn AS \"Net minted\" FROM mint\nLEFT JOIN burn ON mint.day = burn.day;"}
{"prompt": "This SQL query returns the total volume of transactions per month for the multisender contract. The query first selects the transaction hash, contract address, and amount from the logs table for transactions that involve the multisender contract. It then joins this information with the transactions table to get information on successful transactions. Finally, it groups the data by month and orders it from most recent to least recent.", "completion": " SELECT           \n    date_trunc('month', tx.block_time) AS time,\n    SUM(\n        t0.amount / POWER(10, decimals) * (\n            CASE\n                WHEN t0.contract_address = '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' THEN (\n                    SELECT p.price\n                    FROM prices.\"usd\" p\n                    WHERE p.contract_address is NULL\n                    ANd p.symbol = 'ETH'\n                    AND p.minute = date_trunc('minute', tx.block_time)\n                    LIMIT 1\n                )\n                ELSE (\n                    SELECT p.price\n                    FROM prices.\"usd\" p\n                    WHERE p.contract_address = contract_address\n                    AND p.minute = date_trunc('minute', tx.block_time)\n                    LIMIT 1\n                )\n            END\n        )\n    ) as usd\nFROM (\n    (\n        SELECT l.tx_hash, contract_address, bytea2numeric(data) as amount FROM ethereum.logs l\n        WHERE topic1 = '\\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n          AND topic3 = '\\x000000000000000000000000a5025faba6e70b84f74e9b1113e5f7f4e7f4859f'\n          AND length(data) = 32\n    )\n    UNION ALL\n    (\n        SELECT l.tx_hash, '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' as contract_address, t.value as amount FROM ethereum.logs l\n        LEFT JOIN ethereum.transactions t ON t.hash = l.tx_hash\n        WHERE topic1 = '\\x04afd2ce457d973046bd54f5d7d36368546da08b88be1bca8ae50e32b451da17'\n          AND substring(l.data from 63 for 64) = '\\xbeef'\n          AND length(l.data) = 64\n    )\n) t0\nLEFT JOIN ethereum.transactions tx ON tx.hash = t0.tx_hash AND tx.success\nLEFT JOIN erc20.\"tokens\" erc20 ON erc20.contract_address = t0.contract_address AND tx.success\nGROUP BY 1\nORDER BY 1 DESC"}
{"prompt": "The following SQL query counts the distinct number of buyers from the uniswap Exchange_evt_TokenPurchase and Exchange_evt_EthPurchase tables within the past 7 days, joining on the evt_tx_hash.", "completion": " SELECT COUNT(DISTINCT \"buyer\")\nFROM (SELECT *\n      FROM uniswap.\"Exchange_evt_TokenPurchase\"\n      UNION ALL \n      SELECT *\n      FROM uniswap.\"Exchange_evt_EthPurchase\") as unique_address\n      INNER JOIN ethereum.transactions tx ON unique_address.evt_tx_hash = tx.hash\n      WHERE tx.block_time > now() - interval '7 days'\n\n"}
{"prompt": "The SQL query returns the sum of all minted and burned DAI, as well as the sum of all DAI inbound and outbound from the VAT.", "completion": " WITH mint AS\n(\nSELECT SUM(wad/1e18) AS minted FROM makermcd.\"DAI_call_mint\"\nWHERE call_success = 'true'\n),\nburn AS\n(\nSELECT SUM(-wad/1e18) AS burned FROM makermcd.\"DAI_call_burn\"\nWHERE call_success = 'true'\n),\n\ndsrinbound AS(\nSELECT SUM(rad/1e45) as inb FROM makermcd.\"VAT_call_move\"\nWHERE dst = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success),\n\ndsroutbound AS(\n\nSELECT SUM(-rad/1e45) as outb FROM makermcd.\"VAT_call_move\"\nWHERE src = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\n)\n\nSELECT minted+burned+inb+outb AS \"DAI Outstanding\"\nFROM mint, burn, dsrinbound, dsroutbound\n"}
{"prompt": "This query returns the total number of Monolith contracts created each day, accumulated over time.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x95BEBe7bfc6aCc186C13D055D0Aacc2DE5f81502','\\xb24d47364163f909e64cf2cf7788d22c51cea851', '\\x85bb8a852c29d8f100cb97ecdf4589086d1be2dd') -- Monolith deployers\n\t    and type = 'create'\n),\ndata as (\n    select date_trunc('day', creation_time) AS \"day\", count(address) as created_wallets\n    from wallets\n    group by 1\n)\nselect \"day\", sum(created_wallets) over (order by \"day\" asc rows between unbounded preceding and current row) as created_wallets_running_total\nfrom data"}
{"prompt": "This SQL query returns a list of all Argent contracts sorted by the amount of ETH stored in each contract. The list includes the contract address, the amount of ETH stored, and the ranking of the contract by ETH amount.", "completion": " WITH wallets AS (\n    select substring(topic2 from 13 for 20) as \"address\", eb.time as creation_time\n\tfrom ethereum.logs el\n\tjoin ethereum.blocks eb \n\t\ton el.block_number = eb.\"number\"\t\n\twhere (\n\t    topic1 = '\\x5b03bfed1c14a02bdeceb5fa582eb1a5765fc0bc64ca0e6af4c20afc9487f081' -- WalletCreated event\n\t\tand contract_address = '\\x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020'  -- Argent Factory\n\t) OR (\n\t\ttopic1 = '\\xca0b7dde26052d34217ef1a0cee48085a07ca32da0a918609937a307d496bbf5' -- WalletCreated event with Guardian\n\t\tand contract_address = '\\x40C84310Ef15B0c0E5c69d25138e0E16e8000fE9'  -- Argent Factory new\n\t)\n),\nperaddress as (\n    SELECT address, sum(amount) / 1e18 as amount\n    FROM (\n        SELECT \"from\" AS address, -value AS amount\n         FROM ethereum.traces\n         WHERE \"from\" IN (SELECT address FROM wallets)\n         AND success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n    UNION ALL\n        SELECT \"to\" AS address, value AS amount\n         FROM ethereum.traces\n         WHERE \"to\" IN (SELECT address FROM wallets )\n         AND success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n    ) t\n    group by 1\n)\nselect ROW_NUMBER() OVER(ORDER BY amount desc) AS n, concat('https://etherscan.io/address/0',right(text(address),41)) as safe_address, amount as eth_amount\nfrom peraddress\norder by amount desc"}
{"prompt": "This query returns the number of users on each NFT marketplace.", "completion": " select platform,count(*) as users\nfrom (\nselect distinct platform, buyer as user\nfrom nft.trades\ngroup by 1,2\nUnion\nselect distinct platform, seller as user\nfrom nft.trades\ngroup by 1,2\n) a\ngroup by 1\norder by 2 desc\n"}
{"prompt": "This query returns the percentage of each day's total income that came from liquidations, as well as the percentage of all-time total income that came from liquidations.", "completion": " WITH liq_income AS \n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(art/1e18*0.1*p.price) as liq,\nsum(sum(art/1e18*0.1*p.price)) over (order by date_trunc('day', block_time)) as total_liq \nFROM makermcd.\"CAT_evt_Bite\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE p.symbol = 'SAI'\nGROUP BY 1\nORDER BY 1 desc\n),\n\ntotal_income AS \n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(wad/1e18*p.price) as total,\nsum(sum(wad/1e18*p.price)) over (order by date_trunc('day', block_time)) as all_time_total\nFROM maker.\"MKR_evt_Transfer\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE m.dst = '\\x69076e44a9C70a67D5b79d95795Aba299083c275' AND p.symbol = 'MKR'\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT\ntotal_income.day as day,\nsum(1-liq/total*100) as liq_percent_daily,\nsum(1-total_liq/all_time_total*100) as liq_percent_alltime\nFROM total_income\nFULL OUTER JOIN liq_income l ON total_income.day = l.day\nWHERE total_income.day > '11/18/19'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 90"}
{"prompt": "This query returns the total fees paid in ETH for each day in the given time period, ordered from most recent to least recent.", "completion": " SELECT\ndate_trunc('day', r.block_time) as day,\nsum(cumulative_gas_used*gas_price/1e18) as fees_gwei\nFROM ethereum.\"receipts\" r\nLEFT JOIN ethereum.\"transactions\" tx ON r.tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1\nLIMIT 10"}
{"prompt": "This SQL query returns information on users who have locked MGN tokens, including the user's address, the description of the pool they locked their tokens in, whether or not the pool is external, the amount of MGN tokens locked, the percentage of the total MGN tokens locked that the user has locked, and the time at which the user locked their tokens.", "completion": " /*\nSELECT * FROM \n-- gnosis.\"DutchExchange_call_postSellOrder\"\ngnosis.\"DutchExchange_call_postBuyOrder\"\nWHERE address = '\\x00ecd4635c80d47a8b5ffbfd2eb794e0ce6a8689'\n*/\n\nWITH \ntotal_mgn as (\n    SELECT SUM(amount/1e18) as total\n    FROM dxdao.\"TokenFRTProxy_call_mintTokens\"\n    WHERE success\n),\nknown_addresses as (\n    SELECT * FROM (VALUES \n        -- Pools\n        ('\\xf1d29a124622c06f7026f35553543c833102183b'::bytea, 'GNO MGN-pool Safe: pool 1', True),\n        ('\\x9a8341126d99edb43099374cc8183b1bfbce73ca'::bytea, 'GNO MGN-pool Safe: pool 2', True),\n        ('\\x305dc6d8bc5e3fd550a75909ab1ec04d73864525'::bytea, 'DAI MGN-pool Safe: pool 1', True),\n        ('\\x1fe6845ea68aa150b824857057aff018c910e929'::bytea, 'DAI MGN-pool Safe: pool 2', True)\n        \n        \n    ) as Temp (address, description, external)\n),\nregister_times as (\n    SELECT \n        register._beneficiary as user,\n        block.time as register_time\n    FROM dxdao.\"DxLockMgnForRep_evt_Register\" register\n    JOIN ethereum.\"transactions\" tx\n        ON register.tx_hash = tx.hash\n    JOIN ethereum.\"blocks\" block\n        ON block.number = tx.block_number\n)\nSELECT \n    -- SUM(amount/1e18) as MGNamount\n    mint.user,\n    known_addresses.description,\n    known_addresses.external,\n    sum(mint.amount / 1e18) as mgn,\n    -- total_mgn.total,\n    (100 * sum(mint.amount) / 1e18 / total_mgn.total) as percentage_total,\n    register_times.register_time\nFROM dxdao.\"TokenFRTProxy_call_mintTokens\" mint\nCROSS JOIN total_mgn\nLEFT OUTER JOIN known_addresses\n    ON mint.user = known_addresses.address\nLEFT OUTER JOIN register_times\n    ON mint.\"user\" = register_times.user\nGROUP BY\n    mint.user,\n    register_times.register_time,\n    total_mgn.total,\n    known_addresses.description,\n    known_addresses.external\nORDER BY\n    sum(mint.amount) desc"}
{"prompt": "This SQL query returns the number of vaults created per day.", "completion": " SELECT date_trunc('day', evt_block_time) AS day, COUNT(*) AS \"Vaults created\"\nFROM makermcd.\"CDP_MANAGER_evt_NewCdp\" cdp\nGROUP BY 1;"}
{"prompt": "This SQL query returns the sender, receiver, value (in CALVIN), and transaction hash of the top N largest CALVIN transactions.", "completion": " SELECT sender, receiver, value/1e4 as CALVIN_amount, tx_hash\n-- , tx_hash\nFROM erc20.\"Transfer\"\nWHERE\ncontract_address = '\\xdc8092aaf83e00ebf9b01a2e90b7b7ef867ba503'\nORDER by CALVIN_amount desc\nLIMIT {{Limit}}\n"}
{"prompt": "This SQL query returns all ethereum transactions where the \"to\" address is equal to the given address, ordered by block_time in descending order.", "completion": " WITH addresses(addr) \nAS (VALUES ('\\xAcf651Aad1CBB0fd2c7973E2510d6F63b7e440c9'))\n\nSELECT * FROM ethereum.transactions \nWHERE \"to\" IN (SELECT addr::bytea FROM addresses)\n/*0xAcf651Aad1CBB0fd2c7973E2510d6F63b7e440c9*/ \nLIMIT 10\nORDER BY block_time DESC;"}
{"prompt": "This query returns the total amount of Sai migrated on a given day.", "completion": " SELECT date_trunc('day', datetime), SUM(migrated) FROM\n(\nSELECT date_trunc('day', tx.block_time) AS datetime, SUM(wad/1e18) AS migrated FROM makermcd.\"ScdMcdMigration_call_swapSaiToDai\" m\nLEFT JOIN ethereum.transactions tx ON tx.hash = m.call_tx_hash\nWHERE call_success = TRUE AND date_trunc('minute', tx.block_time) > '2019-11-18 16:00:00'\nGROUP BY 1\n\nUNION\n\nSELECT date_trunc('day', tx.block_time) AS datetime, -SUM(wad/1e18) AS migrated FROM makermcd.\"ScdMcdMigration_call_swapDaiToSai\" n\nLEFT JOIN ethereum.transactions tx ON tx.hash = n.call_tx_hash\nWHERE call_success = TRUE AND date_trunc('minute', tx.block_time) > '2019-11-18 16:00:00'\nGROUP BY 1\n) a\nGROUP BY 1"}
{"prompt": "This SQL query returns the number of attempts to transfer ICON from the account a8015df1f65e1f53d491dc1ed35013031ad25034 in the past year.", "completion": " /**\n * The private key to a8015df1f65e1f53d491dc1ed35013031ad25034 has been leaked\n * and it holds 75k ICON worth around $20k. This is a graph of attempts of transfer()\n * to the ICON contract from this account for the past year.\n */\nSELECT date_trunc('month', block_time),\n       count(*)\nFROM ethereum.traces\nWHERE block_time >= now()::date - interval '1 year'\n  AND \"to\"='\\xb5a5f22694352c15b00323844ad545abb2b11028'\n  AND \"from\"='\\xa8015df1f65e1f53d491dc1ed35013031ad25034'\n  AND substring(\"input\" for 4) = '\\xa9059cbb'\nGROUP BY 1\n\n\n\n"}
{"prompt": "The query returns the sum of all the values in the \"migrated\" column from the \"ScdMcdMigration_call_swapSaiToDai\" and \"ScdMcdMigration_call_swapDaiToSai\" tables, where the call_success is TRUE.", "completion": " SELECT SUM(migrated) FROM\n(\nSELECT SUM(wad)/1e18 AS migrated FROM makermcd.\"ScdMcdMigration_call_swapSaiToDai\" a\nWHERE call_success = TRUE\nUNION\nSELECT -SUM(wad)/1e18 AS migrated FROM makermcd.\"ScdMcdMigration_call_swapDaiToSai\" b\nWHERE call_success = TRUE\n) c"}
{"prompt": "This SQL query returns all of the data from the Ethereum transactions table that match the given criteria. The criteria are that the \"to\" address is the given address and that the block number is greater than or equal to the given number. Additionally, the data returned must match the given substring.", "completion": " select /*substring(data,1,4) as method_id, tx.hash, tx.block_number,*/ distinct tx.data\nfrom ethereum.transactions tx\ninner join ethereum.receipts r\non tx.hash = r.tx_hash\nwhere tx.\"to\" = '\\x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c'\nand tx.block_number >= 8235058\nand substring(data,1,4) = '\\x188f9b5b'"}
{"prompt": "This SQL query returns the top 10 DAI holders by balance.", "completion": " WITH outbound AS\n  (SELECT \"src\",\n          SUM(wad/1e18) amt\n   FROM maker.\"SAI_evt_Transfer\"\n   GROUP BY 1),\n     inbound AS\n  (SELECT \"dst\",\n          SUM(wad/1e18) amt\n   FROM maker.\"SAI_evt_Transfer\"\n   GROUP BY 1)\nSELECT inbound.\"dst\" AS address,\n       CASE\n           WHEN outbound.amt IS NULL THEN inbound.amt\n           ELSE inbound.amt - outbound.amt\n       END AS balance\nFROM inbound\nLEFT JOIN outbound ON outbound.\"src\" = inbound.\"dst\"\nORDER BY balance DESC\nLIMIT 10;"}
{"prompt": "This query returns the sum of all amounts locked for reputation over time, starting from the earliest date in the data up until June 29th, 2019. The data is grouped by day, and the total amount locked for reputation is calculated for each day.", "completion": " \nWITH locks AS (\n    SELECT date_trunc('day', tx.block_time) as dt, SUM(_amount / 1e18) as amt\n    FROM dxdao.\"DxLockEth4Rep_evt_Lock\" lock\n    INNER JOIN ethereum.transactions tx ON lock.evt_tx_hash = tx.hash\n    GROUP BY 1\n),\ndates as (\n    SELECT generate_series(\n        (SELECT min(dt) FROM locks),\n        date_trunc('day', NOW()),\n        interval '1 day'\n    ) as dt\n)\nSELECT dates.dt,\n       sum(coalesce(amt, 0)) OVER (ORDER BY dates.dt)\nFROM dates \nLEFT JOIN locks l ON dates.dt = l.dt\nWHERE dates.dt < '2019-06-29'\nORDER BY 1 ASC"}
{"prompt": "This query returns the total number of Dapper contracts created each day, accumulated over time.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\xa78bbf97033e534c54b0a4fa62aa77b652ae4097', '\\xab76c6d00c603a7615d5459132c1745eb1fb4f6c') -- Dapper  WalletFactories \n\tand type = 'create'\n),\ndata as (\n    select date_trunc('day', creation_time) AS \"day\", count(address) as created_wallets\n    from wallets\n    group by 1\n)\nselect \"day\", sum(created_wallets) over (order by \"day\" asc rows between unbounded preceding and current row) as created_wallets_running_total\nfrom data"}
{"prompt": "This SQL query returns the total USD volume traded on Uniswap for each week over the past 24 weeks.", "completion": " SELECT date_trunc('week', ether.block_time) as Date,\n       SUM(eth/1e18 * p.price) as \"USD volume\"\nFROM ((SELECT evt_tx_hash, eth_sold AS eth, block_time  FROM uniswap.\"Exchange_evt_TokenPurchase\" pur\n        LEFT JOIN (SELECT hash,\n             block_time\n      FROM ethereum.transactions\n      WHERE block_time > now() - interval '24 weeks'\n        AND block_time < date_trunc('week', NOW())) tx\n        ON pur.evt_tx_hash = tx.hash)\n      UNION\n        (SELECT evt_tx_hash, eth_bought AS eth, block_time  FROM uniswap.\"Exchange_evt_EthPurchase\" pur\n        LEFT JOIN\n            (SELECT hash, block_time FROM ethereum.transactions\n            WHERE block_time > now() - interval '24 weeks'\n            AND block_time < date_trunc('week', NOW())) tx\n        ON pur.evt_tx_hash = tx.hash)\n        ) ether\nLEFT JOIN prices.usd p ON p.minute = date_trunc('minute', ether.block_time)\nWHERE p.symbol = 'ETH'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns the average slippage for the Dutch Exchange over time.", "completion": " with dutchX as (SELECT\n\n    date_trunc('day', block_time) as date,\n    (avg(\"sellVolume\" / \"buyVolume\") / avg(eth.average / dai.average) - 1)*100 as \"discount\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" dai \n\nWHERE \"sellToken\" = '\\x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' --dai\nAND \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', dai.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND dai.symbol = 'DAI'\nAND tx.success = true\n\nGROUP BY 1)\n\nSELECT AVG(discount) FROM dutchx;"}
{"prompt": "This SQL query returns a list of the most profitable NFT traders, as well as their profit/loss in ETH, ETH received, ETH spent, total number of trades, and total trading volume in ETH.", "completion": " WITH sales AS(\nSELECT seller, sum(original_amount), sum(usd_amount) AS usd_amount, count(*) as total\nFROM NFT.trades\nWHERE original_currency = 'ETH'\nGROUP BY seller), \n\nbuys AS(\nSELECT buyer, sum(original_amount), \nsum(original_amount) AS usd_amount,\ncount(*) as total\nFROM NFT.trades\nWHERE original_currency = 'ETH'\nGROUP BY buyer),\n\nens as (\nSELECT distinct on (address)\nname, address\nFROM (\nSELECT distinct on (name) \nname, address, updated_at\nFROM labels.labels\nWHERE \"type\" = 'ens name'\nORDER BY name, updated_at desc\n) temp\nORDER BY address, updated_at desc\n)\n\nSELECT CASE WHEN ens.name IS NOT NULL \nTHEN CONCAT('<a href=\"https://etherscan.io/address/0', substring(sales.seller::text from 2),'\" target=\"_blank\" >', CONCAT(ens.name, '.eth') , '</a>')\nELSE CONCAT('<a href=\"https://etherscan.io/address/0', substring(sales.seller::text from 2),'\" target=\"_blank\" >', CONCAT('0', substring(sales.seller::text from 2)) , '</a>')\nEND as \"Wallet\",\n(sales.sum - buys.sum) AS \"profit/loss (ETH)\",\nsales.sum AS \"ETH Received\",\nbuys.sum AS \"ETH Spent\",\nCASE WHEN\nbuys.sum < 0.25 THEN 0\nELSE ((sales.sum - buys.sum)/buys.sum) END AS \"P/L % (ETH)\",\nbuys.total + sales.total as \"Total # of trades\",\nbuys.sum+sales.sum as \"Total trading volume (ETH)\",\nCONCAT('<a href=\"https://etherscan.io/address/0', substring(sales.seller::text from 2),'\" target=\"_blank\" >', CONCAT('0', substring(sales.seller::text from 2)) , '</a>') as \"Wallet Address\"\n\nFROM sales\nJOIN buys\nON sales.seller = buys.buyer\nJOIN ens\nON sales.seller = ens.address\nORDER BY 2 DESC"}
{"prompt": "This SQL query returns a list of addresses that have made more than 100 unique transfers of STORJ tokens, as well as the total number of unique transfers made by each address. The results are ordered by the total number of transfers, with the addresses that have made the most transfers appearing first.", "completion": " WITH countSends AS\n  (SELECT COUNT (DISTINCT tx_hash) AS sends,\n                \"from\"\n   FROM storj.\"CentrallyIssuedToken_evt_Transfer\"\n   GROUP BY 2 )\nSELECT *\nFROM countSends\nWHERE sends > 100\nORDER BY sends DESC;"}
{"prompt": "The SQL query selects the sum of 1 and the block number from the Ethereum transactions table where the \"from\" value is equal to a certain address and the value is equal to 40. The query groups the results by block number and orders the results by block number in ascending order.", "completion": " select \nsum(1) as count, block_number\nfrom ethereum.transactions\nwhere \"from\" = '\\x4272c298f23947d617b9d04b62a717d55483cfc7'\nand (value/1e12) = 40\ngroup by block_number\norder by block_number asc"}
{"prompt": "This query returns the average monthly mint price and total mint volume for all non-fungible tokens (NFTs) over the past 360 days.", "completion": " -- ignore uniswap NFTs\nWITH\n  contracts_to_ignore AS (\n    SELECT\n      DISTINCT address as address\n    FROM\n      ethereum.contracts\n    WHERE\n      INITCAP(namespace) = 'Uniswap_v3'\n      OR INITCAP(namespace) = 'Ethereumnameservice'\n      OR address IN ('\\x687f506a6c55497e59819d9b36a3cf39c32bbc97', '\\xc36442b4a4522e871399cd717abdd847ab11fe88', '\\x58a3c68e2d3aaf316239c003779f71acb870ee47', '\\x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85')\n  ) --mint events\n,\n  mints AS (\n    SELECT\n      evt_tx_hash,\n      contract_address\n    FROM\n      erc721.\"ERC721_evt_Transfer\" erc\n    WHERE\n      erc.\"from\" = '\\x0000000000000000000000000000000000000000'\n      AND erc.\"to\" <> '\\x0000000000000000000000000000000000000000'\n      AND contract_address NOT IN (\n        SELECT\n          address\n        FROM\n          contracts_to_ignore\n      )\n      AND contract_address NOT IN ('\\x687f506a6c55497e59819d9b36a3cf39c32bbc97', '\\xc36442b4a4522e871399cd717abdd847ab11fe88', '\\x58a3c68e2d3aaf316239c003779f71acb870ee47', '\\x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85')\n      AND erc.evt_block_time >= now() - interval '360 days'\n  ) -- need to deduplicate mint transactions\n,\n  mint_txns AS (\n    SELECT\n      MIN(t.block_time) as block_time,\n      evt_tx_hash,\n      AVG(t.value / 1e18) AS total_spent,\n      contract_address\n    FROM\n      ethereum.transactions t\n      INNER JOIN mints ON t.hash = mints.evt_tx_hash --WHERE evt_tx_hash = '\\x7e565ca881496085f27a56edf6d247e2dc70c4e3c535fe6446a1e04d8145648d'\n    WHERE\n      t.value > 0 AND\n      t.block_time >= now() - interval '360 days'\n    GROUP BY\n      evt_tx_hash,\n      contract_address --ORDER BY RANDOM()\n  ) --mint vol each month\n/*SELECT\n    contract_address, sum(total_spent) as ts\nFROM mint_txns\nGROUP BY contract_address\nORDER BY ts DESC*/\nSELECT\n  DATE_TRUNC('month', block_time) as timescale,\n  AVG(total_spent) as avg_mint_price,\n  SUM(total_spent) as total_mint_volume\nFROM\n  mint_txns\nGROUP BY\n  timescale\nORDER BY\n  timescale DESC, total_mint_volume DESC\n"}
{"prompt": "This SQL query returns four statistics related to the Ethereum Name Service (ENS): the number of unique domains generated, the number of unique addresses participated, the amount of ETH spent, and the notional USD value spent at the current ETH price.", "completion": " SELECT COUNT (DISTINCT label) AS unique_domains_generated, COUNT (DISTINCT owner) AS unique_addresses_participated, SUM (tx.value/1e18) eth_spent, \n\n(SUM(tx.value/1e18)*(SELECT p.price FROM prices.\"usd\" p\n                        WHERE p.symbol = 'ETH'\n                        ORDER BY minute DESC\n                        LIMIT 1)) AS notional_usd_spent_at_current_eth_price\n\nFROM ethereumnameservice.\"ENSRegistry_evt_NewOwner\" r\nLEFT JOIN ethereum.transactions tx\nON tx.hash = r.evt_tx_hash;"}
{"prompt": "This query returns the number of distinct subjects that have been attested to in a given week, as well as the cumulative total for all weeks.", "completion": " --SELECT count(DISTINCT subject) FROM bloom.\"AttestationLogic_evt_TraitAttested\"\nWITH attestations AS\n  (SELECT date_trunc('week', tx.block_time) AS week,\n          count(*)\n   FROM bloom.\"AttestationLogic_evt_TraitAttested\" a,\n        ethereum.transactions tx\n   WHERE tx.hash = a.tx_hash\n   GROUP BY week)\nSELECT attestations.week AS week,\n       attestations.count AS Weekly,\n       sum(attestations.count) OVER (ORDER BY attestations.week) AS Cumulative\nFROM attestations"}
{"prompt": "The following SQL query will return the number of unique accounts that have taken a borrow from the Compound v1 smart contract, grouped by week. The data is ordered chronologically.", "completion": " SELECT date_trunc('week', tx.block_time) AS week,   -- Get the week from block_time in the transactions table\n       COUNT (DISTINCT b.account) AS borrowers      -- Count the unique account from the Borrow taken event\nFROM compoundv1.\"MoneyMarket_evt_BorrowTaken\" b,      -- The table for the event we are interested in\n     ethereum.transactions tx                       -- Table with Ethereum transactions to get time\nWHERE tx.hash = b.tx_hash                           -- Join the smart contract event and transactions table on the tx-hash\nGROUP BY week                                       -- Count accounts per week\nORDER BY week;                                      -- Present data chronologically "}
{"prompt": "This SQL query returns the average discount for DAI tokens auctioned for MKR tokens, grouped by day.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    avg(\"sellVolume\" / \"buyVolume\") as dutchXprice,\n    avg(mkr.average / dai.average) as marketPrice,\n    (avg(\"sellVolume\" / \"buyVolume\") / avg(mkr.average / dai.average) - 1)*100 as \"discount\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" mkr, coincap.\"tokens/usd\" dai \n\nWHERE \"sellToken\" = '\\x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' --dai\nAND \"buyToken\" = '\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2' --mkr\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', mkr.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', dai.time) = date_trunc('minute', tx.block_time)\nAND mkr.symbol = 'MKR'\nAND dai.symbol = 'DAI'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "This SQL query retrieves all data from the \"Aggregator_call_oracles\" table in the chainlink database.", "completion": " select * from chainlink.\"Aggregator_call_oracles\""}
{"prompt": "This query returns the ratio of winnings to deposits for the top 10 weeks, in descending order.", "completion": " WITH deposit AS \n(SELECT \ndate_trunc('week', block_time) week,\nsum(\"amount\"/1e18) deposits\nFROM pooltogether_v2.\"Pool3_evt_Deposited\" s\nLEFT JOIN ethereum.\"transactions\" tx ON s.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10),\n\nwinnings AS \n(\nSELECT \ndate_trunc('week', block_time) week,\nsum(\"winnings\"/1e18) winnings\nFROM pooltogether_v2.\"Pool3_evt_Rewarded\" s\nLEFT JOIN ethereum.\"transactions\" tx ON s.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n)\n\nSELECT deposit.\"week\", sum(\"winnings\")/sum(\"deposits\") as \"winnings deposits ratio\"\nFROM deposit\nLEFT JOIN winnings w ON deposit.week = w.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10 "}
{"prompt": "This SQL query shows the total amount of ETH and USD for successful Axie Infinity auctions, grouped by week.", "completion": " SELECT date_trunc('week', tx.block_time),\n        SUM(\"_totalPrice\"/1e18) AS eth_amount,\n        SUM(\"_totalPrice\"/1e18 * price.price) usd_amount\nFROM axieinfinity.\"AxieClockAuction_evt_AuctionSuccessful\" s\nLEFT JOIN ethereum.transactions tx ON tx.hash = s.evt_tx_hash\nLEFT JOIN prices.usd price ON date_trunc('minute', tx.block_time) = price.minute\nWHERE symbol = 'WETH'\nGROUP BY 1;\n\n\n"}
{"prompt": "This SQL query returns the day, name, and sum of total deposits for each name partitioned by day and ordered by day and name.", "completion": " select day, name, sum(total) over (partition by name order by day,name asc rows between unbounded preceding and current row) from \n(SELECT date_trunc('day', block_time) AS day,\n       (case\n       when encode(contract_address, 'hex') = 'f61718057901f84c4eec4339ef8f0d86d2b45600' then 'ySUSD'\n       when encode(contract_address, 'hex') = 'd6ad7a6750a7593e092a9b218d66c0a814a3436e' then 'yUSDC'\n       when encode(contract_address, 'hex') = '16de59092dae5ccf4a1e6439d611fd0653f0bd01' then 'yDAI'\n       when encode(contract_address, 'hex') = '83f798e925bcd4017eb265844fddabb448f1707d' then 'yUSDT'\n       when encode(contract_address, 'hex') = '04aa51bbcb46541455ccf1b8bef2ebc5d3787ec9' then 'yBTC'\n       when encode(contract_address, 'hex') = '73a052500105205d34daf004eab301916da8190f' then 'yTUSD'\n       end) as name,\n       sum(_amount/(case \n       when encode(contract_address, 'hex') = '83f798e925bcd4017eb265844fddabb448f1707d' then 1e6\n       when encode(contract_address, 'hex') = 'd6ad7a6750a7593e092a9b218d66c0a814a3436e' then 1e6\n       when encode(contract_address, 'hex') = '04aa51bbcb46541455ccf1b8bef2ebc5d3787ec9' then 1e8\n       else 1e18 end)) as total\nFROM iearn_v2.\"yToken_call_deposit\" yci\nLEFT JOIN ethereum.\"transactions\" tx ON yci.call_tx_hash = tx.hash\nGROUP BY 1,2) a;"}
{"prompt": "This SQL query returns the date, the sum of the amounts of ERC20 tokens traded, and the symbol for those tokens, for all trades made by a specific set of addresses over time.", "completion": " WITH data as (\nSELECT \ndate_trunc('day', tx.block_time) as datetime,\ne.from as user_address,\ne.value/1e18 as amount,\nt.symbol,\ne.evt_tx_hash\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\nWHERE e.to in ('\\x8888888883585b9a8202Db34D8b09d7252bfc61C', '\\x37304b0ab297f13f5520c523102797121182fb5b', '\\x888888e88e027e5585fa504954dad6246271aa81')\n-- AND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n)\n\nSELECT data.datetime, sum(data.amount), data.symbol\nFROM data\nGROUP BY 1, 3\n"}
{"prompt": "This SQL query returns the address and number of successful minting attempts for each RebalancingSetToken contract. The results are sorted by the number of minting attempts, in descending order.", "completion": " select address, count(*) FROM setprotocol.\"RebalancingSetToken_call_mint\" where success group by 1 order by 2 desc;"}
{"prompt": "This SQL query returns the top 20 ERC20 keepers by revenue, for the Compound v2 protocol. The revenue is calculated by summing the collateral liquidated in USD for each keeper.", "completion": " WITH liquidations AS\n(\nSELECT\ndate_trunc('day', block_time) as day,\n\"liquidator\", sum(\"seizeTokens\"/1e13*p.price*0.05) as collateral_liquidated_usd FROM compound_v2.\"cErc20_evt_LiquidateBorrow\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nGROUP BY 1,2\nORDER BY 1 desc\nLIMIT 5000\n)\n\nSELECT \"liquidator\", sum(\"collateral_liquidated_usd\") as revenue FROM liquidations\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 20"}
{"prompt": "This SQL query returns the total amount of KNC burnt per month in USD.", "completion": " SELECT\n    date_trunc('month', tx.block_time) AS time,\n    SUM(_value * (\n            SELECT p.price\n            FROM prices.\"usd\" p\n            WHERE p.contract_address = knc.contract_address\n            AND p.minute = date_trunc('minute', tx.block_time)\n            LIMIT 1\n        )\n    ) / 1e18 as usd_burnt\nFROM kyber.\"KyberNetworkCrystal_evt_Burn\" knc\nLEFT JOIN ethereum.transactions tx ON tx.hash = knc.evt_tx_hash AND tx.success\nGROUP BY 1\nORDER BY 1 DESC"}
{"prompt": "This SQL query retrieves the following data for each listed (tradable) token:\n\n- token_id\n- token_address (encoded as hexadecimal)\n- symbol\n- decimals\n- date_listed", "completion": " SELECT\n    token_id,\n    CONCAT('0x', ENCODE(tokens.token, 'hex')) as token_address,\n    symbol,\n    decimals,\n    add_date as date_listed\nFROM gnosis_protocol.\"view_tokens\" tokens\nORDER BY token_id asc;"}
{"prompt": "This SQL query retrieves data from the \"cErc20_call_borrow\" table in the \"compound_v2\" database, and limits the results to 10 rows.", "completion": " select * from compound_v2.\"cErc20_call_borrow\"\nlimit 10"}
{"prompt": "This query returns the total ETH spent on gas, in ETH and USD, for a given ETH address.", "completion": " with usd AS(\nSELECT average AS \"last\"\nFROM coincap.\"tokens/usd\"\nWHERE symbol = 'WETH'\nORDER BY time DESC\nLIMIT 1)\n\nSELECT sum((a.gas_price * b.gas_used)/1e18) as \"Total ETH spent on gas\",\nSUM(((a.gas_price * b.gas_used)/1e18)*usd.\"last\") AS \"Current USD value of ETH spent\"\nFROM usd, ethereum.transactions a\nINNER JOIN ethereum.receipts b ON a.hash = b.tx_hash\nWHERE a.\"from\" = '\\x{{ eth_address }}'"}
{"prompt": "The following SQL query returns a table with data on the number of transactions made by users, and groups them into categories based on the number of transactions. The categories are \"Shrimp (> 1k)\", \"Plankton (> 100)\", \"Plankton (> 50)\", \"Plankton (> 20)\", \"Plankton (> 10)\", \"Plankton (>1)\", and \"One Timer User\". The table also lists the number of users in each category.", "completion": " WITH \n\naccounts as (\n        SELECT \n            DISTINCT(`to`) as accts\n        FROM arbitrum.traces\n        WHERE success = true \n),\n\ntransactions_count as (\n        SELECT\n            ac.accts, \n            COUNT(at.hash) as num_transactions\n        FROM \n        accounts ac \n        INNER JOIN \n        arbitrum.transactions at \n            ON ac.accts = at.`from`\n        GROUP BY 1 \n        ORDER BY 2 DESC \n), \n\ncount_profile as (\n        SELECT\n            CASE\n                WHEN num_transactions >= 1000 THEN 'Shrimp (> 1k)'\n                WHEN num_transactions >= 100 AND num_transactions < 1000 THEN 'Plankton (> 100)'\n                WHEN num_transactions >= 50 AND num_transactions < 100 THEN 'Plankton (> 50)'\n                WHEN num_transactions >= 20 AND num_transactions < 100 THEN 'Plankton (> 20)'\n                WHEN num_transactions >= 10 AND num_transactions < 20 THEN 'Plankton (> 10)'\n                WHEN num_transactions > 1 AND num_transactions < 10 THEN 'Plankton (>1)'\n                WHEN num_transactions = 1 THEN 'One Timer User'\n            END as `Transactions Profile`, \n            COUNT(accts) as `No of Users`\n        FROM \n        transactions_count \n        GROUP BY 1 \n        ORDER BY 2 DESC \n)\n\nSELECT * FROM count_profile\n\n\n\n\n\n  \n "}
{"prompt": "This query returns the total amount of stablecoin deposited to Kucoin each week, starting from June 1st, 2021. The data is ordered by the total amount deposited, with the highest amounts appearing first.", "completion": " SELECT  \"to\",\n        date_trunc('week', block_time) as week,\n        sum(amount) AS amount\nFROM stablecoin.\"transfer\"\nWHERE \"to\" in ('\\x689c56aef474df92d44a1b70850f808488f9769c', '\\xa1d8d972560c2f8144af871db508f0b0b10a3fbf', \n        '\\x4ad64983349c49defe8d7a4686202d24b25d0ce8', '\\x1692e170361cefd1eb7240ec13d048fd9af6d667',\n        '\\xd6216fc19db775df9774a6e33526131da7d19a2c', '\\xe59cd29be3be4461d79c0881d238cbe87d64595a',\n        '\\x899b5d52671830f567bf43a14684eb14e1f945fe', '\\xf16e9b0d03470827a95cdfd0cb8a8a3b46969b91',\n        '\\xcad621da75a66c7a8f4ff86d30a2bf981bfc8fdd')\nAND block_time > '2021-06-01' \nGROUP BY 1,2 \nORDER BY 3 DESC"}
{"prompt": "This SQL query calculates the total number of TrueFi users over time. It does this by first counting the number of unique users who have joined the TrueFi pool or borrowed from it on each day, and then sums these values up over time.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(evt_block_time)) AS date,\n                staker AS account\n         FROM truefi.\"TrueFiPool_evt_Joined\"\n         GROUP BY 2\n         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,\n                          borrower AS account\n         FROM truefi.\"TrueFiPool_evt_Borrow\"\n         GROUP BY 2) a\n      GROUP BY 2) b\n   GROUP BY 1\n   ORDER BY 1) c"}
{"prompt": "This SQL query retrieves data on the latest 1000 DAI/ETH trades from the Uniswap exchange, including the time of the trade, the action taken (buy or sell), the amount of ETH involved, the amount of DAI involved, the price of the trade, and the 'bubble size' (a measure of the amount of ETH involved in the trade). The data is ordered by time, with the most recent trades appearing first.", "completion": " (\nSELECT \n    tx.block_time AS time,\n    'sell' as action,\n    eth_sold / 10^18 as eth_amount,\n    tokens_bought / 10^18 as dai_amount,\n    tokens_bought  / eth_sold as price,\n    2 * sqrt(eth_sold / 10^18) as bubble_size\nFROM\n    uniswap.\"DAIExchange_evt_TokenPurchase\" tp,\n    ethereum.transactions tx\nWHERE tp.tx_hash = tx.hash\nORDER BY time desc\nLIMIT 1000\n)\nUNION\n(\nSELECT \n    tx.block_time AS time,\n    'buy' as action,\n    eth_bought / 10^18 as eth_amount,\n    tokens_sold / 10^18 as dai_amount,\n    tokens_sold  / eth_bought as price,\n    2 * sqrt(eth_bought / 10^18) as bubble_size\nFROM\n    uniswap.\"DAIExchange_evt_EthPurchase\" tp,\n    ethereum.transactions tx\nWHERE tp.tx_hash = tx.hash\nORDER BY time desc\nLIMIT 1000\n)\nORDER BY time desc\nLIMIT 1000\n\n"}
{"prompt": "This query returns the sum of the makerAmount column divided by 1e18, the makerToken column, and the symbol column from the airswap.Exchange_evt_Filled table. It joins this table with the coincap.tokens/usd table on the asset column. Finally, it groups the results by the makerToken and symbol columns and orders them by the sum of the makerAmount column in descending order.", "completion": " SELECT SUM(\"makerAmount\" / 1e18), \"makerToken\", t.symbol\nFROM airswap.\"Exchange_evt_Filled\" f\nINNER JOIN coincap.\"tokens/usd\" t\nOn t.asset = f.\"makerToken\"\nGROUP BY 2, 3\nORDER BY 1 DESC\nLIMIT 1000"}
{"prompt": "This SQL query returns the number of blocks and the block size for each day over the past 28 days where the block type is 0.", "completion": " SELECT date_trunc('day', b.call_block_time), \"blockSize\", COUNT(*) as \"Number of blocks/Block size\"\nFROM loopring.\"DEXBetaV1_call_commitBlock\" b\nWHERE \"blockType\" = 0 AND b.call_block_time > now() - interval '28 days'\nGROUP BY 1, \"blockSize\";"}
{"prompt": "This SQL query calculates the total amount of rewards available from Erasure Bay over time. It does this by first calculating the amount of Dai available for each request, and then summing the rewards for each request.", "completion": " WITH dai_amount AS\n  (SELECT address,\n          sum(amount)/1e18 AS amount\n   FROM\n     (SELECT \"to\" AS address,\n             value AS amount\n      FROM erc20.\"ERC20_evt_Transfer\"\n      WHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n        AND \"to\" IN\n          (SELECT contract_address\n           FROM erasure_bay.\"view_request_data\")\n      UNION ALL SELECT \"from\" AS address, -value AS amount\n      FROM erc20.\"ERC20_evt_Transfer\"\n      WHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n        AND \"from\" IN\n          (SELECT contract_address\n           FROM erasure_bay.\"view_request_data\")) e\n   GROUP BY address)\nSELECT date, sum(dai_reward) OVER (\n                                   ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS amount\nFROM\n  (SELECT *\n   FROM\n     (SELECT r.block_time AS date,\n             dai_reward\n      FROM erasure_bay.\"view_request_data\" r\n      LEFT JOIN erasure_bay.\"view_deposit_stake\" d ON r.contract_address = d.contract_address\n      WHERE\n          (SELECT amount\n           FROM dai_amount\n           WHERE address = r.contract_address) > 0\n        OR fulfiller IS NOT NULL\n      UNION ALL SELECT d.block_time AS date, -dai_reward AS dai_reward\n      FROM erasure_bay.\"view_request_data\" r\n      LEFT JOIN erasure_bay.\"view_deposit_stake\" d ON r.contract_address = d.contract_address\n      WHERE fulfiller IS NOT NULL ) AS table1\n   ORDER BY date) AS table2"}
{"prompt": "This SQL query returns the number of distinct users who made deposits to the Pool Together contract on a weekly basis, ordered from most recent to least recent.", "completion": " SELECT\n    date_trunc('week', tx.block_time)\n    , COUNT(DISTINCT dai.src) as num_distinct_user_deposits\nFROM makermcd.\"DAI_evt_Transfer\" dai\nLEFT JOIN ethereum.\"transactions\" tx ON dai.evt_tx_hash = tx.hash\nWHERE dai.dst = '\\x29fe7d60ddf151e5b52e5fab4f1325da6b2bd958'\nAND dai.src != '\\x0000000000000000000000000000000000000000'\nGROUP BY 1\nORDER BY 1 DESC"}
{"prompt": "This query returns the total value of Ethereum transactions made to Kraken wallets in the past 100 hours, grouped by hour.", "completion": " -- KRAKEN wallets incoming ETH\n\nSELECT date_trunc('hour', block_time) AS TIME,\n       sum(value/1e18)\nFROM ethereum.transactions\nWHERE \"to\" = '\\x2910543Af39abA0Cd09dBb2D50200b3E800A63D2'\n  OR \"to\" = '\\x0A869d79a7052C7f1b55a8EbAbbEa3420F0D1E13'\n  OR \"to\" = '\\xe853c56864a2ebe4576a807d26fdc4a0ada51919'\n  OR \"to\" = '\\x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0'\n  OR \"to\" = '\\xFa52274DD61E1643d2205169732f29114BC240b3'\n  OR \"to\" = '\\x53d284357ec70cE289D6D64134DfAc8E511c8a3D'\n  OR \"to\" = '\\xA2a8f158aed54CE9A73d41EEEc23Bf3a51b5654D'\nGROUP BY TIME\nORDER BY TIME DESC\nLIMIT 100"}
{"prompt": "This SQL query returns the total amount of CNSL tokens redeemed by each address.", "completion": " with transfers as \n(SELECT\nsender as address, value as CNSL_amount\nFROM erc20.\"Transfer\"\nWHERE\ncontract_address = '\\xea0bea4d852687c45fdc57f6b06a8a92302baabc'\nAND receiver =  '\\x0a9d7329ad9bdf90154d4e19655f312e32ebd8c1'\n-- '\\x4389d757fa071fd714fd74afdcc7da384c9a7ede'\n-- AND sender != '\\x0'\n)\nSELECT address, sum(CNSL_amount)/1e18 as CNSL_amount\nFROM transfers\n\n-- WHERE address != '\\x4389d757fa071fd714fd74afdcc7da384c9a7ede'\nGROUP BY 1\nORDER by 2 desc"}
{"prompt": "This query returns the total amount of deposits for each asset on the dYdX platform for the current year. The query sorts the deposits by the block time, and then calculates the sum of all deposits for each asset type.", "completion": " with data as (\n    SELECT eth.block_time AS ttime,\n       eth.hash AS \"txHash\",\n       eth.from AS \"depositerAddress\",\n        CASE dep.\"market\"::integer \n            WHEN 0 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 1 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 2 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 6 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 6, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e6)::decimal\n                END\n                            WHEN 3 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n        END AS \"depositAmount\",\n       CASE dep.\"market\"::integer \n       WHEN 0 THEN\n        'ETH'::text\n       WHEN 1 THEN\n        'SAI'::text\n       WHEN 2 THEN\n        'USDC'::text\n         WHEN 3 THEN\n        'DAI'::text\n       END AS \"Asset\"\nFROM dydx.\"SoloMargin_evt_LogDeposit\" dep\nJOIN ethereum.transactions eth ON eth.hash = dep.evt_tx_hash\nWHERE date_trunc('minute', eth.block_time) >= date_trunc('year', now())\n-- add ~  - interval '1 day'  ~ here to shift by any days/weeks or months if desired \nORDER BY eth.block_time DESC)\n\nSELECT\n  data.ttime,\n  sum(\"depositAmount\") over (partition by \"Asset\" order by data.ttime) AS \"sum\",\n  \"Asset\"\nfrom data"}
{"prompt": "This SQL query returns the average gas limit per block for the last 50 recent blocks.", "completion": " /**\n * Get the average gas limit per block for the last 50 recent blocks\n */\nSELECT block_time,\n       min(gas_price) / 10^9 AS min_gas_price,\n       avg(gas_price) / 10^9 AS avg_gas_price,\n       max(gas_price) / 10^9 AS max_gas_price\nFROM ethereum.transactions\nGROUP BY block_time\nORDER BY block_time DESC\nLIMIT 200"}
{"prompt": "This SQL query returns the number of conditional tokens transferred on each day, ordered by date.", "completion": " select date_trunc('day', block_time), count(*)\nFROM gnosis_sight.\"ConditionalTokens_evt_TransferSingle\" s, ethereum.transactions tx\nWHERE s.evt_tx_hash = tx.hash\nGROUP BY 1 ORDER BY 1;"}
{"prompt": "This SQL query shows the success rate of liquidations for the cEther contract on the Ethereum blockchain. The success rate is calculated as the number of successful liquidations divided by the total number of liquidations attempted. The data is grouped by day and limited to the last 300 days.", "completion": " WITH successful AS \n(\nSELECT\ndate_trunc('day', block_time) as day,\ncount(\"call_tx_hash\") as success\nFROM compound_v2.\"cEther_call_liquidateBorrow\" s\nLEFT JOIN ethereum.\"transactions\" tx on s.call_tx_hash = tx.hash\nWHERE call_success = true\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 300),\n\ntotal AS \n(SELECT\ndate_trunc('day', block_time) as day,\ncount(\"call_tx_hash\") as total\nFROM compound_v2.\"cEther_call_liquidateBorrow\" t\nLEFT JOIN ethereum.\"transactions\" tx on t.call_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 300)\n\nSELECT successful.\"day\",sum(\"success\")/sum(\"total\") as success_rate\nFROM successful\nLEFT JOIN total on successful.day = total.day\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 300"}
{"prompt": "This query calculates the USD value of all transfers in Uniswap. It does this by first getting the ETH amount for each transfer, then multiplying it by the latest ETH/USD price from the prices.usd table. Finally, it sums up all the USD values for each transfer.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    eth_amount*2 AS amount\n     FROM uniswap.\"Exchange_evt_AddLiquidity\" tr\nUNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    -eth_amount*2 AS amount\n     FROM uniswap.\"Exchange_evt_RemoveLiquidity\" tr \n)\n\nSELECT sum(amount/1e18 * (SELECT price\n                                                            FROM prices.usd\n                                                            WHERE symbol = 'WETH'\n                                                            ORDER BY minute desc\n                                                            LIMIT 1)) AS usd_value\nFROM transfers\n"}
{"prompt": "This query returns the total number of users of the Harvest Finance platform over time, starting from August 31, 2020. The data is grouped by date, and the total number of users is calculated for each day.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(block_time)) AS date,\n                \"from\" AS account\n         FROM ethereum.\"transactions\"\n         WHERE \"to\" = '\\xF8ce90c2710713552fb564869694B2505Bfc0846'\n           AND block_time >= '2020-08-31'\n           AND success\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "This query returns the total amount of ETH that has been sent to or from the specified address. The amount is calculated by taking the value of the transaction and dividing it by 1e18.", "completion": " SELECT SUM(amount) as balance\nFROM (\n    SELECT \"from\" as address, -value/1e18 as amount\n     FROM ethereum.traces\n     WHERE \"from\" = '\\xa26e80e7Dea86279c6d778D702Cc413E6CFfA777'\n     AND tx_success = true\n     AND call_type != 'delegatecall'\nUNION ALL\n    SELECT \"to\" as address, value/1e18 as amount\n     FROM ethereum.traces\n     WHERE \"to\" = '\\xa26e80e7Dea86279c6d778D702Cc413E6CFfA777'\n     AND tx_success = true\n     AND call_type != 'delegatecall'\n) t"}
{"prompt": "This query returns data on the minting and burning of DAI and SAI tokens. It includes information on the total amount of each token minted or burned, as well as the net amount (minted minus burned) for each token. The data is grouped by day, and ordered from most recent to least recent.", "completion": " SELECT date_trunc('day', block_time) AS day,\n       ROUND(SUM(c.dai_minted + c.dai_burned)) AS dai_net,\n       ROUND(SUM (SUM(c.dai_minted + c.dai_burned)) OVER (ORDER BY date_trunc('day', block_time))) as dai_total,\n       ROUND(SUM(c.sai_minted + c.sai_burned)) AS sai_net,\n       ROUND(SUM (SUM(c.sai_minted + c.sai_burned)) OVER (ORDER BY date_trunc('day', block_time))) as sai_total,\n       ROUND(SUM(c.dai_minted)) as dai_minted,\n       ROUND(SUM(c.dai_burned)) as dai_burned,\n       ROUND(SUM(c.sai_minted)) as sai_minted,\n       ROUND(SUM(c.sai_burned)) as sai_burned\nFROM (\n    SELECT call_tx_hash as tx_hash,\n        wad/1e18 AS dai_minted,\n        0 AS dai_burned,\n          0 AS sai_minted,\n          0 AS sai_burned\n    FROM makermcd.\"DAI_call_mint\"\n    WHERE call_success = TRUE\n  UNION ALL\n    SELECT call_tx_hash as tx_hash,\n        0 AS dai_minted,\n        -wad/1e18 AS dai_burned,\n          0 AS sai_minted,\n          0 AS sai_burned\n    FROM makermcd.\"DAI_call_burn\"\n    WHERE call_success = TRUE\n  UNION ALL\n    SELECT evt_tx_hash as tx_hash,\n          0 AS dai_minted,\n          0 AS dai_burned,\n          wad/1e18 AS sai_minted,\n          0 AS sai_burned\n    FROM maker.\"SAI_evt_Mint\" \n  UNION ALL\n    SELECT evt_tx_hash as tx_hash,\n          0 AS dai_minted,\n          0 AS dai_burned,\n        0 AS sai_minted,\n        -wad/1e18 AS sai_burned\n    FROM maker.\"SAI_evt_Burn\"\n    ) c\nLEFT JOIN ethereum.transactions tx ON tx.hash = c.tx_hash\n-- WHERE c.block_time <= date_trunc('day', NOW())\n--   AND c.block_time > date_trunc('day', NOW()) - interval '{{ days }} days'\nGROUP BY day\nORDER BY day DESC"}
{"prompt": "This query returns the number of distinct users who have placed either a buy or sell order on the Dutch X exchange in the past week.", "completion": " SELECT count(DISTINCT \"user\")\nFROM (SELECT *\n      FROM gnosis.\"DutchExchange_evt_NewSellOrder\"\n      UNION ALL \n      SELECT *\n      FROM gnosis.\"DutchExchange_evt_NewBuyOrder\") as unique_address\n      INNER JOIN ethereum.transactions tx ON unique_address.tx_hash = tx.hash\n          WHERE tx.block_time > date_trunc('week', current_date)::date - 7 \nAND tx.block_time < date_trunc('week', current_date)::date\n\n"}
{"prompt": "This SQL query returns the average price of a trade on the Uniswap decentralized exchange for the past 30 days, compared to the average price of the same trade on centralized exchanges (CEXs). The query groups the data by day, in order to show the average price for each day over the past month.", "completion": " SELECT date_trunc('day', tx.block_time) as time,\n       AVG((pay_amt / buy_amt)*d.average) AS price,\n       AVG(p.average) as CEXprice\nFROM oasisdex.\"eth2dai_evt_LogTrade\" trade\nLEFT JOIN ethereum.transactions tx ON tx.hash = trade.tx_hash\nLEFT JOIN coincap.\"tokens/usd\" p ON date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\nLEFT JOIN coincap.\"tokens/usd\" d ON date_trunc('minute', d.time) = date_trunc('minute', tx.block_time)\nWHERE pay_gem = '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359' --dai sold\nAND p.symbol = 'WETH'\nAND d.symbol = 'DAI'\nAND p.time::date > now() - interval '30 days'\nGROUP BY 1\nORDER BY 1 DESC"}
{"prompt": "This query returns the number of new InstaDApp wallets created each month, as well as the growth rate of new wallets created month over month.", "completion": " SELECT date_trunc('month', tx.block_time) AS Month,\nCOUNT(evt_tx_hash) AS \"New wallets\",\n100 * (count(distinct evt_tx_hash) - lag(count(distinct evt_tx_hash), 1) over (order by date_trunc('month', tx.block_time))) / lag(count(distinct evt_tx_hash), 1) over (order by date_trunc('month', tx.block_time)) as growth\nFROM instadapp_v2.\"InstaRegistry_evt_Created\" c\nLEFT JOIN ethereum.transactions tx ON c.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query calculates the cumulative net supply of a given token over a period of time. It does this by looking at the mints, redeems, and interest accrued for that token during that time period.", "completion": " WITH mint AS\n  ( SELECT DISTINCT date_trunc('week', block_time) AS week,\n                    token_symbol,\n                    sum(\"mint_amount_usd\") OVER (PARTITION BY token_symbol\n                                                 ORDER BY date_trunc('week', block_time)) AS cumulative_mint\n   FROM compound.\"view_mint\"\n   WHERE block_time > now() - interval '40 weeks'\n   ORDER BY 1,\n            2 ),\n     redeem AS\n  ( SELECT DISTINCT date_trunc('week', block_time) AS week,\n                    token_symbol,\n                    sum(\"redeem_amount_usd\") OVER (PARTITION BY token_symbol\n                                                   ORDER BY date_trunc('week', block_time)) AS cumulative_redeem\n   FROM compound.\"view_redeem\"\n   WHERE block_time > now() - interval '40 weeks'\n   ORDER BY 1,\n            2 ),\n     interest AS\n  ( SELECT DISTINCT date_trunc('week', block_time) AS week,\n                    token_symbol,\n                    sum(interest_accumulated_usd) OVER (PARTITION BY token_symbol\n                                                        ORDER BY date_trunc('week', block_time)) AS cumulative_interest\n   FROM compound.\"view_accrue_interest\"\n   WHERE block_time > now() - interval '40 weeks' )\nSELECT m.week,\n       m.token_symbol,\n       m.cumulative_mint - r.cumulative_redeem + i.cumulative_interest AS cumulative_net_supply\nFROM mint m\nJOIN redeem r ON m.week = r.week\nAND m.token_symbol = r.token_symbol\nJOIN interest i ON i.week = m.week\nAND m.token_symbol = i.token_symbol\nORDER BY 1,\n         2;"}
{"prompt": "This SQL query selects the hour, evt_tx_hash, and \"protocolFeePaid\" from the zeroex_v3.\"Exchange_evt_Fill\" table, left joins the ethereum.\"transactions\" table on evt_tx_hash = tx.hash, groups by 1, 2, 3, orders by 3 desc, and limits the results to 30.", "completion": " SELECT\ndate_trunc('hour', block_time) as hour,\nevt_tx_hash,\n\"protocolFeePaid\"\nFROM zeroex_v3.\"Exchange_evt_Fill\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1,2,3\nORDER BY 3 desc\nLIMIT 30"}
{"prompt": "This query returns the total amount of ETH spent on SuperRare in USD terms, cumulatively.", "completion": " SELECT date, sum(amount) OVER (\n                               ORDER BY date ASC ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS amount_usd\nFROM\n  (SELECT evt_block_time AS date,\n          _amount / 1e18 * p.price AS amount\n   FROM\n     (SELECT evt_block_time,\n             _amount\n      FROM superrare.\"SuperRareMarketAuction_evt_Sold\"\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRare_evt_Sold\"\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRareMarketAuction_evt_AcceptBid\"\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRare_evt_AcceptBid\"\n      UNION ALL SELECT block_time,\n                       bytea2numeric(substring(DATA\n                                               FROM 33\n                                               FOR 32))\n      FROM ethereum.\"logs\"\n      WHERE contract_address = '\\x8c9f364bf7a56ed058fc63ef81c6cf09c833e656'\n        AND topic1 = '\\xea6d16c6bfcad11577aef5cc6728231c9f069ac78393828f8ca96847405902a9'\n      UNION ALL SELECT block_time,\n                       bytea2numeric(substring(DATA\n                                               FROM 1\n                                               FOR 32))\n      FROM ethereum.\"logs\"\n      WHERE contract_address = '\\x65b49f7aee40347f5a90b714be4ef086f3fe5e2c'\n        AND topic1 in ('\\x2a9d06eec42acd217a17785dbec90b8b4f01a93ecd8c127edd36bfccf239f8b6',\n                       '\\x5764dbcef91eb6f946584f4ea671217c686fa7e858ce4f9f42d08422b86556a9')\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRareBazaar_evt_AcceptOffer\"\n      WHERE \"_currencyAddress\" = '\\x0000000000000000000000000000000000000000'\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRareBazaar_evt_AuctionSettled\"\n      WHERE \"_currencyAddress\" = '\\x0000000000000000000000000000000000000000'\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRareBazaar_evt_Sold\"\n      WHERE \"_currencyAddress\" = '\\x0000000000000000000000000000000000000000') a\n   INNER JOIN prices.\"layer1_usd_eth\" p ON date_trunc('minute', evt_block_time) = p.minute) b"}
{"prompt": "This SQL query returns data on wash sales (transactions where the seller and buyer are the same person) for NFT marketplaces. It includes the platform, total sales, wash sales, real sales, and wash sales share.", "completion": " with \nos_remove AS (SELECT call_tx_hash AS hash\n                    FROM opensea.\"WyvernExchange_call_atomicMatch_\"\n                    WHERE (addrs[4] = '\\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'\n                           OR addrs[11] = '\\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')\n                    AND call_success\n                    GROUP BY 1\n                    HAVING count(DISTINCT CASE WHEN addrs[7] = '\\x0000000000000000000000000000000000000000'\n                        THEN '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ELSE addrs[7]\n                        END) > 1),\n                        \nraw as(\nselect platform,\nsum(usd_amount) as totalsales, count(*) as txn\nfrom nft.trades\nwhere tx_hash not in (select hash from os_remove)\ngroup by 1\n)\n\nselect a.platform, \nb.\"totalsales\",\nsum(a.\"sum\") as wash_sales,\n(b.\"totalsales\"-sum(a.\"sum\")) as real_sales,\n(sum(a.\"sum\")/b.\"totalsales\") as wash_sales_share\nfrom (\nselect platform,\nnft_token_id,\ncount(distinct tx_hash),\nsum(usd_amount),\nseller, buyer\nfrom nft.trades l1\nwhere buyer <>'\\x641927e970222b10b2e8cdbc96b1b4f427316f16' \nand seller <>'\\x641927e970222b10b2e8cdbc96b1b4f427316f16'and\ntx_hash not in (select hash from os_remove )\n\ngroup by 1,2,5,6) a\nleft join raw b on a.platform=b.platform\nwhere count > 1\ngroup by 1,2\norder by 2 desc\n"}
{"prompt": "This query returns the total amount of ETH locked for Rep over time. It does this by first calculating the sum of ETH locked for Rep on each day, then joining that to a table of all days and calculating the running total.", "completion": " \nWITH locks AS (\n    SELECT date_trunc('day', tx.block_time) as dt, SUM(_amount / 1e18) as amt\n    FROM dxdao.\"DxLockEth4Rep_evt_Lock\" lock\n    INNER JOIN ethereum.transactions tx ON lock.tx_hash = tx.hash\n    GROUP BY 1\n),\ndates as (\n    SELECT generate_series(\n        (SELECT min(dt) FROM locks),\n        date_trunc('day', NOW()),\n        interval '1 day'\n    ) as dt\n)\nSELECT dates.dt,\n       sum(coalesce(amt, 0)) OVER (ORDER BY dates.dt)\nFROM dates \nLEFT JOIN locks l ON dates.dt = l.dt\nORDER BY 1 ASC"}
{"prompt": "The query returns the number of artworks sold each month on the SuperRare platform. The data is taken from the \"SuperRareMarketAuction_evt_Sold\", \"SuperRare_evt_Sold\", \"SuperRareMarketAuction_evt_AcceptBid\", \"SuperRare_evt_AcceptBid\", \"logs\" and \"SuperRareBazaar_evt_Sold\" tables.", "completion": " SELECT date_trunc('month', evt_block_time) AS MONTH,\n       count(*) AS artworks_sold\nFROM\n  (SELECT evt_block_time\n   FROM superrare.\"SuperRareMarketAuction_evt_Sold\"\n   UNION ALL SELECT evt_block_time\n   FROM superrare.\"SuperRare_evt_Sold\"\n   UNION ALL SELECT evt_block_time\n   FROM superrare.\"SuperRareMarketAuction_evt_AcceptBid\"\n   UNION ALL SELECT evt_block_time\n   FROM superrare.\"SuperRare_evt_AcceptBid\"\n   UNION ALL SELECT block_time\n   FROM ethereum.\"logs\"\n   WHERE contract_address = '\\x8c9f364bf7a56ed058fc63ef81c6cf09c833e656'\n     AND topic1 = '\\xea6d16c6bfcad11577aef5cc6728231c9f069ac78393828f8ca96847405902a9'\n     AND bytea2numeric(substring(DATA\n                                 FROM 33\n                                 FOR 32)) > 0\n   UNION ALL SELECT block_time\n   FROM ethereum.\"logs\"\n   WHERE contract_address = '\\x65b49f7aee40347f5a90b714be4ef086f3fe5e2c'\n     AND topic1 in ('\\x2a9d06eec42acd217a17785dbec90b8b4f01a93ecd8c127edd36bfccf239f8b6',\n                    '\\x5764dbcef91eb6f946584f4ea671217c686fa7e858ce4f9f42d08422b86556a9')\n   UNION ALL SELECT evt_block_time\n   FROM superrare.\"SuperRareBazaar_evt_AcceptOffer\"\n   UNION ALL SELECT evt_block_time\n   FROM superrare.\"SuperRareBazaar_evt_AuctionSettled\"\n   WHERE _amount > 0\n   UNION ALL SELECT evt_block_time\n   FROM superrare.\"SuperRareBazaar_evt_Sold\") a\nGROUP BY 1\nORDER BY 1"}
{"prompt": "This query retrieves the total amount of ETH signed for each day in the Uniswap MKR/ETH liquidity pool.", "completion": " SELECT\n    ddate,\n    SUM(eth_signed / 10^18) OVER(ORDER BY ddate ROWS UNBOUNDED PRECEDING)\nFROM\n(SELECT\n    date_trunc('day', tx.block_time) AS ddate,\n    SUM(eth_signed) AS eth_signed\n FROM (\n    (SELECT tx_hash, eth_amount AS eth_signed\n     FROM uniswap.\"MKRExchange_evt_AddLiquidity\")\n    UNION\n    (SELECT tx_hash, -eth_amount AS eth_signed\n     FROM uniswap.\"MKRExchange_evt_RemoveLiquidity\")\n    UNION\n    (SELECT tx_hash, eth_sold AS eth_signed\n     FROM uniswap.\"MKRExchange_evt_TokenPurchase\")\n    UNION\n    (SELECT tx_hash, -eth_bought AS eth_signed\n     FROM uniswap.\"MKRExchange_evt_EthPurchase\")\n    ) AS events\n JOIN ethereum.transactions tx ON events.tx_hash = tx.hash\n GROUP BY ddate\n) AS foo2\nORDER BY ddate\n"}
{"prompt": "This query returns the number of safes that were created using the v1.0.0 version of the software.", "completion": " SELECT count(*) as \"Safes (v.1.0.0 only)\"\nFROM gnosis_safe.\"Safev1.0.0_call_setup\" safe\nINNER JOIN ethereum.transactions tx ON safe.call_tx_hash = tx.hash\nLIMIT 1000\n"}
{"prompt": "This query returns the average Maker price and the total Maker burned in US dollars for each day over the past year.", "completion": " SELECT\ndate_trunc('day', block_time) AS day,\nAVG(p.price) as MKR_price,\nsum(wad/1e18*p.price) as MKR_burn_$,\nsum(wad/1e18) as MKR_burn, \nsum(sum(wad/1e18*p.price)) over (order by date_trunc('day', block_time)) as all_time_MKR_earnings_$\nFROM maker.\"MKR_evt_Transfer\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE m.dst = '\\x69076e44a9C70a67D5b79d95795Aba299083c275' AND p.symbol = 'MKR'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 365"}
{"prompt": "This query shows the number of times a contract called xfLobbyEnter was called, from various addresses. The contract is only beneficial to the Origin address (ie: Richard Heart), so this query is interesting to see if anyone else is calling it.", "completion": " SELECT \"from\", count(*) as times_called\nFROM ethereum.traces t\nWHERE t.\"to\" = '\\x2b591e99afe9f32eaa6214f7b7629768c40eeb39' /* HEX Contract Address */\n  AND t.block_number >= 9041184\n  AND t.tx_success = TRUE\n  and t.input = '\\0xce7d1f77' '\\*'\ngroup by \"from\"\norder by times_called desc\n\n-- this is interesting to see who is calling xfLobbyFlush\n-- because the *only* beneficiary is the Origin address (ie: Richard Heart)\n-- there is no bounty paid so nobody (apart from Richard Heart) has incentive\n-- to call it."}
{"prompt": "This SQL query returns the sum of USD volume for the Kyber project over the last 24 hours.", "completion": " SELECT \"Project\", SUM(usd_volume) FROM  \n \n(\n\nWITH tx AS (\n    SELECT hash, date_trunc('minute', block_time) as minute\n    FROM ethereum.transactions\n    WHERE block_time > now() - interval '1 days'\n),\n\nprices AS (\n   (\n   SELECT minute, contract_address, symbol, price FROM prices.usd WHERE minute > now() - interval '1 days'\n   UNION\n   SELECT generate_series(now() - interval '1 days', now(), '1 minute'),\n    '\\x6B175474E89094C44Da98b954EedeAC495271d0F'::bytea as contract_address, 'DAI' AS symbol, 1 as price\n    )\n),\n\ntokens AS(\n\nSELECT * FROM erc20.tokens \n\n), kyber_fee_mapping AS (\n    SELECT evt_tx_hash,\n        evt_index,\n        \"ethWeiValue\" /1e18 AS value,\n        (SELECT count(*)\n         FROM kyber.\"FeeBurner_evt_AssignBurnFees\"\n         WHERE evt_tx_hash = trade.evt_tx_hash\n         AND evt_index < trade.evt_index) AS burnFees\n    FROM kyber.\"Network_evt_KyberTrade\" trade\n), kyber_intermediate_volume AS (\n    SELECT evt_tx_hash, (value * (burnFees - lag(burnFees, '1', '0') OVER (PARTITION BY evt_tx_hash ORDER BY evt_index))) AS ethvolume\n    FROM kyber_fee_mapping f\n    ORDER BY evt_tx_hash\n), kyber_volume AS (\n    SELECT evt_tx_hash, SUM(ethvolume) as sumeth\n    FROM kyber_intermediate_volume\n    GROUP BY 1\n)\n\n    SELECT 'Kyber' AS \"Project\",\n            SUM(sumeth * p.price) AS usd_volume\n    FROM tx \n    INNER JOIN kyber_volume ON kyber_volume.evt_tx_hash = tx.hash\n    INNER JOIN prices p ON tx.minute = p.minute\n    WHERE p.symbol = 'ETH'\n    \n    ) AS kyber\n\n  GROUP BY 1\n   ;\n   "}
{"prompt": "This is a table of daily DAI loan repayments. It includes repayments and liquidations.", "completion": " -- Table of daily DAI loan repayments\n\nWITH repay AS (\n\n    SELECT sum(\"repayAmount\"/1e18) AS totalRepay, date_trunc('day', tx.block_time) AS daytime\n    FROM compoundv2.\"cErc20_evt_RepayBorrow\" repay FULL OUTER JOIN ethereum.transactions tx\n    ON repay.tx_hash = tx.hash\n    WHERE address = '\\xf5dce57282a584d2746faf1593d3121fcac444dc'\n    GROUP BY 2\n\n), liquidate AS (\n    SELECT sum(\"repayAmount\"/1e18) AS totalliquidate, date_trunc('day', tx.block_time) AS daytime\n    FROM compoundv2.\"cErc20_evt_LiquidateBorrow\" liquid FULL OUTER JOIN ethereum.transactions tx\n    ON liquid.tx_hash = tx.hash\n    WHERE address = '\\xf5dce57282a584d2746faf1593d3121fcac444dc'\n    GROUP BY 2\n)\n\n    SELECT repay.daytime, repay.totalrepay, liquidate.totalliquidate, repay.totalrepay + liquidate.totalliquidate AS repaySum\n    FROM repay FULL OUTER JOIN liquidate\n    ON repay.daytime = liquidate.daytime\n    ORDER BY 1 DESC\n    \n\n    \n    \n    \n    \n    "}
{"prompt": "This SQL query shows the total value of trades made in a given week, denominated in USD. It does this by first looking at all the \"Exchange21_evt_Fill\" events (which represent trades made on the Exchange21 decentralized exchange), then joining that with data about the ethereum transactions in which those trades were made, and then joining that with data about prices from the CoinCap \"tokens/usd\" dataset.\n\nThe query groups the data by price symbol and by week, and for each group calculates the total value of trades made, in USD. The value of each trade is calculated by taking the amount of the taker asset filled (i.e. the amount traded), and dividing by 1e6 for USDC trades, 1e18 for TUSD trades, or by 1e18 times the average price for all other trades.", "completion": " SELECT price.symbol,\n          date_trunc('week', tx.block_time) AS time,\n          CASE\n              WHEN price.symbol = 'USDC' THEN SUM(\"takerAssetFilledAmount\" / 1e6) ----don't multiply by anything as these assets are USD\n\n              WHEN price.symbol = 'TUSD' THEN SUM(\"takerAssetFilledAmount\" /1e18) --don't multiply by anything as these assets are USD\n\n              ELSE SUM(\"takerAssetFilledAmount\" /1e18 * price.average)\n          END AS total_usd_value\n   FROM zeroex.\"Exchange21_evt_Fill\" filled\n   INNER JOIN ethereum.transactions tx ON filled.tx_hash = tx.hash\n   INNER JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = price.time\n   AND substring(filled.\"takerAssetData\"\n                 FROM 17) = price.asset\n    WHERE tx.block_time < date_trunc('week', current_date)::date\n   GROUP BY 1,\n            2;"}
{"prompt": "This query returns the sum of all values in the \"HumanStandardToken_evt_Transfer\" table, divided by 10^18, limited to 10 results.", "completion": " select sum(_value) / (10^18) from spankchain.\"HumanStandardToken_evt_Transfer\" limit 10"}
{"prompt": "This SQL query returns the date and sum of the amount of wNXM locked in the arNXM vault for each date.", "completion": " SELECT date, sum(amount) OVER (\n                               ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS wnxm\nFROM\n  (SELECT evt_block_time AS date,\n          \"wAmount\" / 1e18 AS amount\n   FROM armor_fi.\"arNXMVault_evt_Deposit\"\n   UNION ALL SELECT evt_block_time,\n                    \"wAmount\" / -1e18\n   FROM armor_fi.\"arNXMVault_evt_Withdrawal\") a"}
{"prompt": "This SQL query returns the number of distinct owners who have registered a name with the Ethereum Name Service (ENS). This includes owners who have registered a name using the ETHRegistrarController_v2, Registrar_old, or BaseRegistrar contracts.", "completion": " \nSELECT COUNT(distinct owner) AS \"Participants\"\nFROM\n(\n(SELECT owner FROM ethereumnameservice.\"%ETHRegistrarController_v2._evt_NameRegistered\")\nUNION ALL\n(SELECT owner FROM ethereumnameservice.\"Registrar_old_evt_HashRegistered\")\nUNION ALL\n(SELECT owner FROM ethereumnameservice.\"BaseRegistrar_evt_NameRegistered\")\n) AS owners\n\n\n"}
{"prompt": "This SQL query returns the first 10 rows from the \"HybridExchange_evt_Match\" table in the hydroprotocol database.", "completion": " SELECT *\nFROM hydroprotocol.\"HybridExchange_evt_Match\"\nLIMIT 10"}
{"prompt": "The 1inch Traders Distribution by Total Volume table shows the distribution of users by total volume traded. The table is sorted by volume, with the largest volume traders at the top.", "completion": " SELECT\n    POWER(2, ROW_NUMBER() OVER ())/100 as idx,\n    volume as volume_from,\n    FLOOR(POWER(2.0, LOG(2.0, cast(volume AS numeric)) + 1)) - 1 as volume_to,\n    users\nFROM (\n    SELECT\n        FLOOR(POWER(2.0, FLOOR(LOG(2.0, cast(1 + volume AS numeric))))) as volume,\n        COUNT(*) as users\n    FROM (\n        SELECT\n            CONCAT('0x', ENCODE(tx_from, 'hex')) as sender,\n            COUNT(*) as trades,\n            SUM(usd_amount)*100 AS volume\n        FROM dex.trades\n        WHERE project = '1inch'\n        GROUP BY 1\n        HAVING SUM(usd_amount) > 0\n    ) tt\n    GROUP BY 1\n    ORDER BY 1\n) ttt\nWHERE volume > 0\n"}
{"prompt": "This SQL query retrieves data on all successful token transactions from the Ethereum blockchain, specifically those related to the \"Transfer\" event and the DAI token contract. The data includes the sender and receiver addresses of each transaction, the value of the transaction, and the block height at which the transaction took place. The query is limited to the 10 most recent transactions.", "completion": " /* SELECT * FROM ethereum.traces WHERE block_number = 9372027 AND tx_success = true ORDER BY block_number DESC */\nSELECT topic2 AS sender, topic3 AS receiver, bytea2numeric(data)/1e18 AS value, block_number\nFROM ethereum.logs\nWHERE topic1='\\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' -- Transfer\nAND contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f' -- DAI\nORDER BY block_number DESC\nLIMIT 10"}
{"prompt": "This query returns the minimum value for each column, the standard deviation for each column, and the average value for each column for the past 365 days.", "completion": " SELECT  \nmin(ampl) as ampl_Low,\nmin(ust) as ust_Low,\nmin(alc) as alc_low,\nmin(usdd) as usdd_low,\nmin(frax) as frax_low,\nstddev_samp(ampl) as ampl_sd,\nstddev_samp(ust) as ust_sd,\nstddev_samp(alc) as alc_sd,\nstddev_samp(usdd) as usdd_sd,\nstddev_samp(frax) as frax_sd\nFROM (\nSELECT\n    date_trunc('hour',minute) as time, \n    AVG(CASE \"contract_address\" WHEN '\\xd46ba6d942050d489dbd938a2c909a5d5039a161' then price end) as \"ampl\",\n    AVG(CASE \"contract_address\" WHEN '\\xa47c8bf37f92aBed4A126BDA807A7b7498661acD' then price end) as \"ust\",\n    AVG(CASE \"contract_address\" WHEN '\\x0c10bf8fcb7bf5412187a595ab97a3609160b5c6' then price end) as \"usdd\",\n    AVG(CASE \"contract_address\" WHEN '\\x853d955acef822db058eb8505911ed77f175b99e' then price end) as \"frax\",\n    AVG(CASE \"contract_address\" WHEN '\\xBC6DA0FE9aD5f3b0d58160288917AA56653660E9' then price end) as \"alc\"\nFROM prices.\"usd\"\nWHERE contract_address IN (\n('\\xD46bA6D942050d489DBd938a2C909A5d5039A161'), --AMPL\n('\\xa47c8bf37f92aBed4A126BDA807A7b7498661acD'), --UST\n('\\x853d955acef822db058eb8505911ed77f175b99e'), --FRAX\n('\\x0c10bf8fcb7bf5412187a595ab97a3609160b5c6'), --USDD\n--('\\x674C6Ad92Fd080e4004b2312b45f796a192D27a0'), --USDN\n('\\xBC6DA0FE9aD5f3b0d58160288917AA56653660E9') --Alchemix\n)\nAND minute > now() - interval '365 days'\ngroup by time\n)tt"}
{"prompt": "This SQL query calculates the total value of tickets bought from the Pool_evt_BoughtTickets table.", "completion": " SELECT SUM(\"totalPrice\" / 1e18)\nFROM pooltogether.\"Pool_evt_BoughtTickets\""}
{"prompt": "The following SQL query returns the sum of value/1e18 AS stuck_eth, and the \"to\" address for all transactions where the \"to\" address is also present in the traces table as a create transaction that was successful. The result is grouped by the \"to\" address.", "completion": " SELECT sum(value/1e18) AS stuck_eth,\n       \"to\"\nFROM ethereum.transactions\nWHERE \"to\" IN\n    (SELECT address\n     FROM ethereum.traces\n     WHERE TYPE='create'\n       AND tx_success = TRUE\n      )\nGROUP BY \"to\""}
{"prompt": "This query gets number of voters, number of tokens, and first reveal timestamp for each vote request, noted by \"voteid\". The query also gets a list of tokens minted by timestamp and a list of resolved prices.", "completion": " \n-- This query gets number of voters, number of tokens, and first reveal timestamp for each vote request, noted by \"voteid\". \nSELECT \n    MIN(date_trunc('minute', block_time)) as day,\n    COUNT(DISTINCT voter) as voters, \n    SUM(\"numTokens\"/1e18) as \"numTokens\", \n    CONCAT(identifier,time,\"roundId\") as voteid\nFROM umaproject.\"Voting_evt_VoteRevealed\" as dat\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY voteid\n\n-- This query gets a list of tokens minted by timestamp. \n/*\nSELECT date_trunc('minute', block_time) as day, mints.value/1e18 as tokenCount\nFROM umaproject.\"VotingToken_call_mint\" as mints \n        INNER JOIN ethereum.\"transactions\" as tx ON call_tx_hash = tx.hash\nORDER BY day \n*/\n\n-- This query gets a list of resolved prices. \n/* \nSELECT \n    price/1e18 as resolved, \n    CONCAT(identifier,time,\"resolutionRoundId\") as voteid, \n    evt_tx_hash\nFROM umaproject.\"Voting_evt_PriceResolved\"\n*/ "}
{"prompt": "This query returns the number of RebalancingSetToken_evt_Transfer events that occurred each week, along with the corresponding block time.", "completion": " SELECT \ndate_trunc('week', tx.block_time) weekly,\nCOUNT(tx_hash)\nFROM setprotocol.\"RebalancingSetToken_evt_Transfer\" s\nLEFT JOIN ethereum.\"transactions\" tx ON s.tx_hash = tx.hash\nGROUP BY 1\n"}
{"prompt": "This SQL query returns the number of unique lenders and borrowers on the dYdX platform for each week, ordered by week.", "completion": " SELECT\ndate_trunc('week', block_time) week,\ncount(distinct \"accountOwner\")\nFROM dydx.\"SoloMargin_evt_LogDeposit\" d\nLEFT JOIN ethereum.\"transactions\" tx ON d.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1\nLIMIT 10 "}
{"prompt": "This SQL query returns the average price of SNX tokens bought on Uniswap per day, for the 5 most recent days.", "completion": " SELECT date_trunc('day', tx.block_time),\nAVG(eth_sold/tokens_bought)\nFROM uniswap.\"Exchange_evt_TokenPurchase\" t\nLEFT JOIN ethereum.transactions tx\nON t.evt_tx_hash = tx.hash\nWHERE contract_address = '\\x3958B4eC427F8fa24eB60F42821760e88d485f7F' --SNX exchange address\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 5"}
{"prompt": "Please select all data from the ethereum transactions table where the block time is equal to or greater than 01/01/19 00:00:00 and block_time is equal to or less than 01/02/19 00:00:00.", "completion": " SELECT *\nFROM ethereum.\"transactions\"\nWHERE block_time >= '01/01/19 00:00:00'\nAND block_time <= '01/02/19 00:00:00'"}
{"prompt": "The query returns the total value locked in the Visor Finance protocol for each minute since 2021-05-16. The value is calculated by multiplying the amount of each token deposited or withdrawn from the protocol by the price of that token in US dollars at the time.", "completion": " WITH hypervisors AS\n  (SELECT substring(DATA\n                    FROM 109\n                    FOR 20) AS contract,\n          substring(DATA\n                    FROM 13\n                    FOR 20) AS token0,\n          substring(DATA\n                    FROM 45\n                    FOR 20) AS token1\n   FROM ethereum.logs\n   WHERE topic1 = '\\x16682fe0a2ffae99e47dc4431cb60eb5afccc35b1d4a4d0184d4516ed6031bbd'),\n     deposits_and_withdrawals AS\n  (SELECT block_time,\n          token0,\n          bytea2numeric(substring(DATA\n                                  FROM 33\n                                  FOR 32)) AS amount0,\n          token1,\n          bytea2numeric(substring(DATA\n                                  FROM 65\n                                  FOR 32)) AS amount1\n   FROM ethereum.logs logs\n   INNER JOIN hypervisors ON logs.contract_address = contract\n   AND topic1 = '\\x4e2ca0515ed1aef1395f66b5303bb5d6f1bf9d61a353fa53f73f8ac9973fa9f6'\n   AND block_time >= '2021-05-16'\n   UNION ALL SELECT block_time,\n                    token0, -bytea2numeric(substring(DATA\n                                                     FROM 33\n                                                     FOR 32)) AS amount0,\n                             token1, -bytea2numeric(substring(DATA\n                                                              FROM 65\n                                                              FOR 32)) AS amount1\n   FROM ethereum.logs logs\n   INNER JOIN hypervisors ON logs.contract_address = contract\n   AND topic1 = '\\xebff2602b3f468259e1e99f613fed6691f3a6526effe6ef3e768ba7ae7a36c4f'\n   AND block_time >= '2021-05-16'),\n     amounts AS\n  (SELECT block_time,\n          token0 AS token,\n          amount0 / 10^decimals AS amount\n   FROM deposits_and_withdrawals\n   INNER JOIN erc20.tokens ON contract_address = token0\n   WHERE amount0 != 0\n   UNION ALL SELECT block_time,\n                    token1,\n                    amount1 / 10^decimals\n   FROM deposits_and_withdrawals\n   INNER JOIN erc20.tokens ON contract_address = token1\n   WHERE amount1 != 0)\nSELECT block_time,\n       sum(amount) OVER (\n                         ORDER BY block_time)\nFROM\n  (SELECT block_time,\n          amount * price AS amount\n   FROM amounts\n   INNER JOIN prices.usd ON contract_address = token\n   AND date_trunc('minute', block_time) = MINUTE\n   AND MINUTE >= '2021-05-16') a"}
{"prompt": "Get the sum of all USD amounts from trades that have a fill status of true and a block time greater than or equal to now minus 30 days.", "completion": " select sum(usd_amount)\nfrom hashflow.trades\nwhere fill_status is true\n    and block_time >= now() - interval '30d'"}
{"prompt": "The following SQL query returns the average price of an ERC721 token over time. The price is calculated by taking the price of an ERC721 token divided by 1e18.", "completion": " WITH token AS\n  (SELECT call_tx_hash AS tx_hash,\n          CASE\n              WHEN addrs[7] = '\\x0000000000000000000000000000000000000000' THEN '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n              ELSE addrs[7]\n          END AS token_address\n   FROM opensea.\"WyvernExchange_call_atomicMatch_\" a)\nSELECT date, avg(amount) OVER (\n                               ORDER BY date ROWS BETWEEN 999 PRECEDING AND CURRENT ROW) AS eth\nFROM\n  (SELECT om.evt_block_time AS date,\n          om.price / 1e18 AS amount\n   FROM opensea.\"WyvernExchange_evt_OrdersMatched\" om\n   INNER JOIN erc721.\"ERC721_evt_Transfer\" nft ON nft.evt_tx_hash = om.evt_tx_hash\n   INNER JOIN token ON token.tx_hash = om.evt_tx_hash\n   AND nft.contract_address = '{{NFT project contract address}}'\n   AND token.token_address = '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2') a"}
{"prompt": "This query returns the number of unique ETHLend holders.", "completion": " SELECT COUNT(DISTINCT _holder) FROM ethlend.\"LoanDataController_call_getCollateralAmount\";"}
{"prompt": "This query returns the total volume of 0x trades for each taker token in 2019.", "completion": " WITH usd_per_token AS\n  (SELECT price.symbol as symbol,\n          CASE\n              WHEN price.symbol = 'USDC' THEN SUM(\"takerAssetFilledAmount\" / 1e6) ----don't multiply by anything as these assets are USD\n\n              WHEN price.symbol = 'TUSD' THEN SUM(\"takerAssetFilledAmount\" /1e18) --don't multiply by anything as these assets are USD\n\n              ELSE SUM(\"takerAssetFilledAmount\" /1e18 * price.average)\n          END AS total_usd_value\n   FROM zeroex.\"Exchange_evt_Fill\" filled\n   INNER JOIN ethereum.transactions tx ON filled.tx_hash = tx.hash\n   INNER JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = price.time\n   AND substring(filled.\"takerAssetData\"\n                 FROM 17 FOR 40) = price.asset\n    WHERE date_part('year', tx.block_time) = '2019'\n   GROUP BY price.symbol)\nSELECT symbol, SUM(total_usd_value) AS Volume\nFROM usd_per_token \nGROUP BY 1;"}
{"prompt": "This SQL query returns the number of unique Compound borrowers per week, as well as the week that the borrowing took place.", "completion": " SELECT date_trunc('week', tx.block_time) AS week,   -- Get the week from block_time in the transactions table\n       COUNT (DISTINCT b.account) AS borrowers      -- Count the unique account from the Borrow taken event\nFROM compound.\"MoneyMarket_evt_BorrowTaken\" b,      -- The table for the event we are interested in\n     ethereum.transactions tx                       -- Table with Ethereum transactions to get time\nWHERE tx.hash = b.tx_hash                           -- Join the smart contract event and transactions table on the tx-hash\nGROUP BY week                                       -- Count accounts per week\nORDER BY week;                                      -- Present data chronologically "}
{"prompt": "This query returns the number of Gnosis Safe transactions per day, ordered by day.", "completion": " SELECT block_time::date AS DAY,\n       count(*) AS num_tx\nFROM ethereum.transactions txs\nINNER JOIN\n  (SELECT tx_hash\n   FROM gnosis_safe.\"Safev1.0.0_call_execTransaction\"\n   UNION ALL SELECT tx_hash\n   FROM gnosis_safe.\"Safev0.1.0_call_execTransaction\") safe_tx ON txs.hash = safe_tx.tx_hash\nGROUP BY DAY\nORDER BY DAY ASC"}
{"prompt": "This query returns the last 100 transactions made to the CDP Saver smart contract, along with any associated data from the Maker \"SaiTub_call_wipe\" table.", "completion": " WITH defi_saver_txns AS (\n    SELECT\n        tx.*\n    FROM\n        ethereum.transactions tx\n    WHERE tx.to = '\\x65114af041a921180220b300b3cb4aebad04601a'\n),\ndefi_saver_wipes AS (\n    SELECT\n        saver_txns.*,\n        wipes.*\n    FROM defi_saver_txns saver_txns\n    LEFT JOIN maker.\"SaiTub_call_wipe\" wipes\n    ON saver_txns.hash = wipes.call_tx_hash\n)\nSELECT\n    *\nFROM defi_saver_wipes\nORDER BY block_time DESC\nLIMIT 100"}
{"prompt": "This query returns the number of addresses that have poolholdings greater than 1000.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    -tr.value AS amount,\n    contract_address\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address =  '\\xf99d58e463a2e07e5692127302c20a191861b4d6'\nUNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount,\n      contract_address\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     where contract_address = '\\xf99d58e463a2e07e5692127302c20a191861b4d6'\n),\ntransferAmounts AS (\n    SELECT address,\n    \n    sum(amount)/1e18 as poolholdings FROM transfers \n    \n    GROUP BY 1\n    ORDER BY 2 DESC\n)\n\nSELECT COUNT(address)\nFROM transferAmounts \nWHERE poolholdings > 1000"}
{"prompt": "This query returns the total number of lenders and borrowers for each week over the past 40 weeks.", "completion": " WITH supply AS\n(\nSELECT\ndate_trunc('week', block_time) as week,\ncount(distinct \"minter\") as lenders FROM compound_v2.\"cErc20_evt_Mint\" s\nLEFT JOIN ethereum.\"transactions\" tx on s.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 40),\n\nborrow AS \n(\nSELECT\ndate_trunc('week', block_time) as week,\ncount(distinct \"borrower\") as borrowers FROM compound_v2.\"cErc20_evt_Borrow\" b\nLEFT JOIN ethereum.\"transactions\" tx on b.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 40)\n\nSELECT supply.\"week\",sum(\"lenders\") as lenders,sum(\"borrowers\") as borrowers\nFROM supply\nLEFT JOIN borrow ON supply.week = borrow.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 40\n"}
{"prompt": "This query returns the number of trades that have been made on the Dutch Exchange in the past week.", "completion": " SELECT count(*)\nFROM (SELECT *\n      FROM gnosis.\"DutchExchange_evt_NewSellOrder\"\n      UNION ALL \n      SELECT *\n      FROM gnosis.\"DutchExchange_evt_NewBuyOrder\") as unique_address\n      INNER JOIN ethereum.transactions tx ON unique_address.tx_hash = tx.hash\n      WHERE tx.block_time > date_trunc('week', current_date)::date - 7 \n        AND tx.block_time < date_trunc('week', current_date)::date\n\n"}
{"prompt": "This SQL query returns the total deposit amount for each asset on dYdX for the current year. The data is ordered by time, with the most recent data appearing first.", "completion": " with data as (\n    SELECT eth.block_time AS ttime,\n       eth.hash AS \"txHash\",\n       eth.from AS \"depositerAddress\",\n        CASE dep.\"market\"::integer \n            WHEN 0 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 1 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 2 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 6 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 6, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e6)::decimal\n                END\n                            WHEN 3 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n        END AS \"depositAmount\",\n       CASE dep.\"market\"::integer \n       WHEN 0 THEN\n        'ETH'::text\n       WHEN 1 THEN\n        'SAI'::text\n       WHEN 2 THEN\n        'USDC'::text\n         WHEN 3 THEN\n        'DAI'::text\n       END AS \"Asset\"\nFROM dydx.\"SoloMargin_evt_LogDeposit\" dep\nJOIN ethereum.transactions eth ON eth.hash = dep.evt_tx_hash\nWHERE date_trunc('minute', eth.block_time) >= date_trunc('month', now())\n-- add ~  - interval '1 day'  ~ here to shift by any days/weeks or months if desired \nORDER BY eth.block_time DESC)\n\nSELECT\n  data.ttime,\n  sum(\"depositAmount\") over (partition by \"Asset\" order by data.ttime) AS \"sum\",\n  \"Asset\"\nfrom data"}
{"prompt": "This query returns the volume of USDC deposits for each day in the past 7 days. The volume is calculated by multiplying the amount of each deposit by the price of USDC in USD at the time the deposit was made.", "completion": " SELECT date_trunc('days', tx.block_time) AS Date,\n      SUM(amount/1e6*p.price) AS volume\nFROM (\n     select call_tx_hash,amount,asset_address from (\n\t\tselect \n\t\t  cast(subactions->>'actionType' as integer) as action_type,\n\t\t  substring((subactions->'encodedParams')::text, 28, 40) as asset_address,\n\t\t  hex2numeric(substring((subactions->'encodedParams')::text, 68, 64)) as amount,\n\t\t  call_tx_hash\n\t\t from (select  jsonb_array_elements(actions) as subactions, call_tx_hash from hydroprotocol.\"Margin_call_batch\") a ) b where b.action_type = 5 and asset_address = 'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'\n    ) deposits\nINNER JOIN\n     (SELECT hash,\n             block_time\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '7 days'\n        AND block_time < date_trunc('day', NOW())) tx ON deposits.call_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'USDC'\nGROUP BY 1\nORDER by 1"}
{"prompt": "This query returns the total number of Memorial Crystals minted for each day.", "completion": " select id as \"\uba54\ubaa8\ub9ac\uc5bc \ud06c\ub9ac\uc2a4\ud0c8\", \r\n       \"date\" as \"\uc77c\uc790\", \r\n       sum(\"cnt\") over(partition by id order by \"date\") as \"\uac74\uc218\"\r\nfrom\r\n(\r\nselect id,\r\n       date_trunc('day', evt_block_time) as \"date\", \r\n       count(\"value\") as \"cnt\"\r\n--22.07.11. \ubbfc\ud305\uc758 \uacbd\uc6b0\ub9cc \ub098\uc624\ub294 \ud14c\uc774\ube14 \ud655\uc778\r\nfrom erc1155.\"ERC1155_evt_TransferSingle\"\r\nwhere  1=1\r\n   --Desperado: Crystal\r\n   and contract_address='\\x82C289CD41a793f1AAe5b2cA9FC63C219Ea8ed81'\r\n   --\ubbfc\ud305 \uc2e4\uc218\uc774\uae30 \ub54c\ubb38\uc5d0 \uc81c\uc678\r\n   and evt_block_time not between to_timestamp('2022-06-02 00:01', 'yyyy-mm-dd hh24:mi') and  to_timestamp('2022-06-03 00:00', 'yyyy-mm-dd hh24:mi')\r\n   --\ubbfc\ud305\r\n   and \"from\"='\\x0000000000000000000000000000000000000000'\r\n   --burn \uc81c\uc678\r\n   and \"to\" <> '\\x0000000000000000000000000000000000000000'\r\ngroup by 1, 2\r\norder by 1, 2\r\n) t\r\norder by 1, 2;"}
{"prompt": "This SQL query returns the sum of trade values in US dollars for each month, for all trades that have been successful.", "completion": " SELECT date_trunc('month', tx.block_time),\n       SUM((\"tradeValues\"[1]) / 1e18 * price.average)\nFROM idex.\"IDEX1_call_trade\" t\nINNER JOIN ethereum.transactions tx ON t.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = price.time\nWHERE price.asset = \"tradeAddresses\"[1]\nAND tx.block_time < date_trunc('month', current_date)::date\n--AND date_part('month', tx.block_time) > '06'\nAND t.success = true\nGROUP BY 1\nORDER BY 1;\n\n-- what about USDC?"}
{"prompt": "This SQL query retrieves data from the \"IDEX1_call_trade\" table on the idex database, limiting the results to 10 rows.", "completion": " SELECT * FROM idex.\"IDEX1_call_trade\" LIMIT 10"}
{"prompt": "This SQL query calculates the success rate of MakerDAO's liquidation process over a period of 50 weeks. The success rate is defined as the number of successful liquidations divided by the total number of liquidations attempted.", "completion": " WITH successful AS \n(\nSELECT\ndate_trunc('week', block_time) week,\ncount(\"call_tx_hash\") as success\nFROM maker.\"SaiTub_call_bite\" s\nLEFT JOIN ethereum.\"transactions\" tx on s.call_tx_hash = tx.hash\nWHERE call_success = true\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50),\n\ntotal AS \n(SELECT\ndate_trunc('week', block_time) week,\ncount(\"call_tx_hash\") as total\nFROM maker.\"SaiTub_call_bite\" t\nLEFT JOIN ethereum.\"transactions\" tx on t.call_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50)\n\nSELECT successful.\"week\",sum(\"success\")/sum(\"total\") as success_rate\nFROM successful\nLEFT JOIN total on successful.week = total.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This SQL query will select the distinct date and time of a block, the token symbol, and the sum of the mint amount in USD over a period of 39 weeks. The data will be ordered by the date and time of the block and the token symbol.", "completion": " SELECT distinct\ndate_trunc('week', block_time),\ntoken_symbol,\n--SUM(\"mint_amount_usd\") as weekly_mint,\nsum(\"mint_amount_usd\") over (partition by token_symbol order by date_trunc('week', block_time)) as cumulative_mint\nFROM dune_user_generated.\"compound_view_mint\"\nWHERE block_time > now() - interval '39 weeks' \n--GROUP BY 1,2, mint_amount_usd, block_time \nORDER BY 1,2;\n\n-- See data table examples:\n--SELECT * FROM dune_user_generated.\"compound_view_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_borrow\" when format is decided\n--SELECT * FROM dune_user_generated.\"compound_view_repay_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_repay_borrow\" when format is decided"}
{"prompt": "The following SQL query returns the total amount of OWL spent each day on safe creation and safe transactions. The data is grouped by day and tx_type (safe creation or safe transaction), and ordered by day and tx_type.", "completion": " SELECT\n    date_trunc('day', \"block_time\") as day,\n    case \n    \twhen tr.\"to\" = '\\x07f455f30e862e13e3e3d960762cb11c4f744d52' then 'safe_creation' \n    \twhen tr.\"to\" = '\\x4d953115678b15ce0b0396bcf95db68003f86fb5' then 'safe_transaction' else 'unknown' end as tx_type,\n    sum(tr.value) / 1e18 as owl_amount\nFROM erc20.\"ERC20_evt_Transfer\" tr \njoin erc20.tokens \n    on tr.contract_address = tokens.contract_address\njoin ethereum.transactions et\n    on et.hash = evt_tx_hash\nwhere tr.\"to\" in ('\\x07f455f30e862e13e3e3d960762cb11c4f744d52', '\\x4d953115678b15ce0b0396bcf95db68003f86fb5') -- relay service accounts for creation and transactions\n\tand tokens.contract_address = '\\x1A5F9352Af8aF974bFC03399e3767DF6370d82e4' -- OWL token address\ngroup by 1,2\norder by 1 asc, 2"}
{"prompt": "Get the market token address for the SoloMargin call.", "completion": " select * from dydx.\"SoloMargin_call_getMarketTokenAddress\""}
{"prompt": "This query returns the total amount of FRT minted by each user, as well as the timestamp of when they registered.", "completion": " SELECT\n    -- SUM(amount/1e18) as MGNamount\n    m.user,\n    SUM(m.amount * 1e-18) as MGN,\n    block.time as register_time\nFROM \n    dxdao.\"TokenFRTProxy_call_mintTokens\" m\nINNER JOIN dxdao.\"DxLockMgnForRep_evt_Register\" r\n    ON m.\"user\" = r._beneficiary\nJOIN ethereum.\"transactions\" tx\n    ON r.tx_hash = tx.hash\nJOIN ethereum.\"blocks\" block\n    ON block.number = tx.block_number\nGROUP BY \n    m.user, \n    block.time"}
{"prompt": "This SQL query returns the total amount of DAI minted and burned in each hour, as well as the cumulative total of DAI minted and burned over time.", "completion": " SELECT date_trunc('hour', block_time) AS TIME,\n       sum(c.migrated),\n       SUM (SUM(c.migrated)) OVER (ORDER BY date_trunc('hour', block_time)) as TOTAL\n\nFROM\n  (SELECT block_time,\n          wad/1e18 AS migrated\n   FROM makermcd.\"DAI_call_mint\" a\n   LEFT JOIN ethereum.transactions tx ON tx.hash = a.call_tx_hash\n   WHERE call_success = TRUE\n   UNION ALL SELECT block_time, -wad/1e18 AS migrated\n   FROM makermcd.\"DAI_call_burn\" b\n   LEFT JOIN ethereum.transactions tx ON tx.hash = b.call_tx_hash\n   WHERE call_success = TRUE) c\nGROUP BY time\nORDER BY time DESC"}
{"prompt": "This SQL query returns data on the number of ETH buyers and the total amount of ETH bought on Uniswap over the past 7 days.", "completion": " WITH tx AS (SELECT hash, block_time FROM ethereum.\"transactions\"\nWHERE block_time > now() - interval '7 days'\n)\n\nSELECT date_trunc('day', tx.block_time),\nCOUNT (DISTINCT buyer),\nSUM(eth_bought / 1e18)\nFROM uniswap.\"Exchange_evt_EthPurchase\" p\nINNER JOIN tx\nON p.tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1;\n\n"}
{"prompt": "This query returns the number of transactions made with Authereum contracts.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8', '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea', '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046') -- Authereum Wallet Factorys\n\tand type = 'create'\n)\nselect count(distinct et.tx_hash) as transactions\nfrom ethereum.traces et\njoin wallets \n    on wallets.address = et.\"from\"\nwhere et.\"to\" in ('\\x20af9e54a3670ef6a601bca1f1ec22b1f93cbe23','\\x2e1723d1dfa2947f0d08d5c5d214b71def4f951f','\\x79fee076b1bcd4054dff0b4364c26899492198dc','\\x211deb5c0a28a213fcf5976ac22c70ff96b9004c','\\x185c46c8d3ef5155f3678e69c827db7a2116a6cd','\\xd8cab604bdd8cbb7c3eb0c26f7dc3abffb005a92','\\xae1710e83211decb356f031a9346a24ef55055e0') -- AuthereumAccount versions\n    and call_type = 'delegatecall'\n    and tx_success = TRUE\n    and error is null\n    and substring(\"input\" for 4) in ('\\x26aa4655', '\\xd5553b88') -- executeMultipleAuthKeyMetaTransactions and executeMultipleLoginKeyMetaTransactions\n"}
{"prompt": "This query returns the number of distinct user deposits made each week to the Pool Together contract.", "completion": " -- SELECT \n-- s.*\n-- , tx.*\n-- FROM pooltogether_v2.\"Pool3_evt_Withdrawn\" s\n-- LEFT JOIN ethereum.\"transactions\" tx ON s.evt_tx_hash = tx.hash\n\nSELECT\n    date_trunc('week', tx.block_time)\n    , COUNT(DISTINCT dai.dst) as num_distinct_user_deposits\nFROM makermcd.\"DAI_evt_Transfer\" dai\nLEFT JOIN ethereum.\"transactions\" tx ON dai.evt_tx_hash = tx.hash\nWHERE dai.src = '\\x29fe7d60ddf151e5b52e5fab4f1325da6b2bd958'\nAND dai.dst != '\\x5d3a536e4d6dbd6114cc1ead35777bab948e3643'\nGROUP BY 1"}
{"prompt": "This SQL query returns the number of unique borrowers for each week in the past 10 weeks.", "completion": " SELECT date_trunc('week', block_time) AS \"week\",\n        COUNT(distinct borrower) AS \"Unique borrowers\"\nFROM compound.\"view_borrow\"\nWHERE block_time > now() - interval '10 weeks' \nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns the total ETH deposited in the DefiZap contracts over the past 7 days.", "completion": " WITH zaps_eth as (SELECT \ne.from as user_address, \ne.to as Zap_address,\ne.value/1e18 as eth_amount,\ne.gas_price/1e9 as gas_price,\ne.block_time as block_time\nFROM ethereum.\"transactions\" e\nwhere e.to in ('\\x52fc6455f258760705e70f70160b06619bfe0adb','\\xd17cda470bd0237fae82ef254c84d06d0e4cc02f','\\x8dfcb49766c0296e4373a0300b52c3637614db59','\\x929a10efda7099865dad8286aee8715078902d51','\\x19627796b318e27c333530ad67c464cfc37596ec','\\x1ee8c303f5ab9b36bc30b9345dec7e9a748fa693','\\x04b35ef193e2357328ae79914569721a7ffd6146','\\xebd5e23927891fbfda10487ccc9a1a1a7b9a4210','\\x20ef0c900f8e7ec3a1a89a761f0670ae9e3dd709','\\x408609f5acab253d41cb5dfce913ff367937313b','\\x8e8b9cf6d411b6c8dacc63c306f2691ed195d91d','\\x13240b97c40d7e306cedf3adc9cb057cec74c361','\\x3b122c376e472ae6ae7a4739bebf7b68e045b285','\\xd3eba712988df0f8a7e5073719a40ce4cbf60b33','\\xe3385df5b47687405a02fc24322dedb7df381852','\\xecb53d65816444dbbf6a326b8df959caeda3faf9','\\x606563f8dc27f316b77f22d14d9cd025b4f70469','\\x21091c5ea13854ab0965090dc4fc20280f1a5730','\\xe4b7b00a802834bea733f06a0a24a869f2765df7','\\x4ebee4cf5ba7de81f222fefa4e5d0c30c4968fff')\nAND\ne.success = 'true' \nAND date_trunc('minute', e.block_time) >= date_trunc('day', now()) - interval '1 week'\n\n\n)\n\nSELECT date_trunc('day', zaps_eth.block_time) as Date, sum(eth_amount) as eth\nfrom zaps_eth\nGROUP BY 1\nORDER BY Date DESC\n-- LIMIT 50"}
{"prompt": "This SQL query selects the quote asset and the sum of the price and quantity of all trades for each asset.", "completion": " select trades.quote_asset,SUM(trades.price*trades.quantity) from trades group by trades.quote_asset"}
{"prompt": "This SQL query returns the total value of all Kyber trades in USD, the number of trades made, and the day on which the trades were made, for the past {{ days }} days.", "completion": " \nWITH kyber_fee_mapping AS (\n    SELECT evt_tx_hash,\n        evt_index,\n        \"ethWeiValue\" /1e18 AS value,\n        (SELECT count(1)\n         FROM kyber.\"FeeBurner_evt_AssignBurnFees\"\n         WHERE evt_tx_hash = trade.evt_tx_hash\n         AND evt_index < trade.evt_index) AS burnFees\n    FROM kyber.\"Network_evt_KyberTrade\" trade\n), kyber_intermediate_volume AS (\n    SELECT evt_tx_hash, (value * (burnFees - lag(burnFees, '1', '0') OVER (PARTITION BY evt_tx_hash ORDER BY evt_index))) AS ethvolume\n    FROM kyber_fee_mapping f\n    ORDER BY evt_tx_hash\n)\n\nSELECT date_trunc('day', block_time) AS day,\n    SUM(ethvolume * p.price) AS usd,\n    count(1) AS trades\nFROM ethereum.transactions txs \nINNER JOIN kyber_intermediate_volume v ON v.evt_tx_hash = txs.hash\nINNER JOIN prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 p ON p.minute = date_trunc('minute', block_time)\nWHERE block_time >= date_trunc('day', now()) - interval '{{ days }} days'\n  AND block_time < date_trunc('day', now())\nGROUP BY 1\n\n"}
{"prompt": "This query returns the total number of distinct users who have made a swap on the Totle platform.", "completion": " SELECT COUNT(DISTINCT(tx.\"from\")) FROM ( \n    select * from totle.\"TotlePrimary_evt_LogSwap\" UNION ALL\n    SELECT * FROM totle.\"TotlePrimary2.1_evt_LogSwap\"\n) swap LEFT JOIN ethereum.transactions tx on tx.hash = swap.evt_tx_hash;"}
{"prompt": "The following SQL query returns the average price of the Numerai token (NMR) in USD, and the total USD value of Numerai tokens staked, grouped by week.", "completion": " SELECT date_trunc('week', tx.block_time) AS date,\n        AVG(p.price) AS \"NMR/USD price\",\n       SUM(\"totalAmountStaked\" / 1e18 * p.price) as \"USDstaked\"\nFROM numerai.\"NumeraireBackend_evt_Staked\" s\nINNER JOIN ethereum.transactions tx\nON s.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p\nON p.minute = date_trunc('minute', tx.block_time)\nAND p.symbol = 'NMR'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns the average discount of WETH/DAI prices on the DutchX exchange over time. The data is grouped by day.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    (avg(\"sellVolume\" / \"buyVolume\") / avg(eth.average / dai.average) - 1)*100 as \"discount\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" dai \n\nWHERE \"sellToken\" = '\\x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' --dai\nAND \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', dai.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND dai.symbol = 'DAI'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "This query returns the balance of a token for each address. The balance is calculated by subtracting the amount of tokens sent from the amount of tokens received.", "completion": " WITH outbound AS\n  (SELECT a.\"from\",\n          SUM(a.value/1e18) amt\n   FROM numerai.\"NumeraireBackend_evt_Transfer\" a LEFT JOIN ethereum.transactions b -- Replace with transfer event for relevant project\n   ON a.tx_Hash = b.hash\n   WHERE success = true\n   GROUP BY 1),\n     inbound AS\n  (SELECT a.\"to\",\n          SUM(a.value/1e18) amt\n    FROM numerai.\"NumeraireBackend_evt_Transfer\" a LEFT JOIN ethereum.transactions b -- Replace with transfer event for relevant project\n   ON a.tx_Hash = b.hash\n   WHERE success = true\n   GROUP BY 1)\nSELECT inbound.\"to\",\n       CASE\n           WHEN outbound.amt IS NULL THEN inbound.amt\n           ELSE inbound.amt - outbound.amt\n       END AS balance\nFROM inbound\nLEFT JOIN outbound\nON outbound.\"from\" = inbound.\"to\"\nORDER BY balance DESC;"}
{"prompt": "This query finds the net DAI minted by day. DAI minted per day is subtracted from DAI burned per day to find the net.", "completion": " \n-- Find the net DAI minted by day (DAI minted per day - DAI burned per day)\n\n\nWITH mint AS (\n    SELECT sum(mint.wad / 1e18) AS minted, date_trunc('day',tx.block_time) AS DayTime\n    FROM maker.\"SAI_evt_Mint\" mint \n    INNER JOIN ethereum.transactions tx\n    ON mint.tx_hash = tx.hash\n    GROUP BY 2\n), burn AS (\n    SELECT sum(burn.wad / 1e18) AS burned, date_trunc('day', tx.block_time) AS DayTime\n    FROM maker.\"SAI_evt_Burn\" burn \n    INNER JOIN ethereum.transactions tx\n    ON burn.tx_hash = tx.hash\n    GROUP BY 2\n)\n\nSELECT mint.daytime, mint.minted, burn.burned, mint.minted - burn.burned AS net\n    FROM mint, burn\n    WHERE mint.daytime = burn.daytime\n    ORDER BY 1 ASC"}
{"prompt": "This SQL query returns the \"to\" addresses and the number of times each address appears in the Ethereum blockchain traces. The addresses are sorted in descending order by the number of appearances.", "completion": " SELECT \"to\", count(*) \nFROM ethereum.traces \nWHERE \"to\" IN ('\\xAC6072986E985aaBE7804695EC2d8970Cf7541A2', '\\xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A', '\\xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A')\nGROUP BY 1\nORDER BY 2 DESC;"}
{"prompt": "This SQL query counts the total number of swaps from two different tables.", "completion": " SELECT count(*) FROM ( \n    select * from totle.\"TotlePrimary_evt_LogSwap\" UNION ALL\n    SELECT * FROM totle.\"TotlePrimary2.1_evt_LogSwap\"\n) swap;"}
{"prompt": "This query will select the first item from the table.", "completion": " SELECT 1;"}
{"prompt": "This SQL query retrieves the first 10 rows from the ethereum.transactions table.", "completion": " SELECT *\nFROM ethereum.transactions\nLIMIT 10"}
{"prompt": "This query returns the total amount of funds that have been received by a specific address from all ERC20 token contracts. The query specifically excludes transfers from two known addresses ('\\x8888888883585b9a8202db34d8b09d7252bfc61c' and '\\x0000000000000000000000000000000000000000') and only includes transfers to the specific address ('\\x701dd73aaae8dca5c1b522a16591927e56dbf58c'). Finally, the query groups the data by token symbol and returns the total funding amount for each token.", "completion": " WITH txns as (SELECT \ncontract_address,\nevt_tx_hash,\nvalue/1e18 as value \nFROM erc20.\"ERC20_evt_Transfer\" e\nWHERE\n\ne.from != '\\x8888888883585b9a8202db34d8b09d7252bfc61c'\nand\ne.from != '\\x0000000000000000000000000000000000000000'\nand\ne.to = '\\x701dd73aaae8dca5c1b522a16591927e56dbf58c'\n\n\n-- and \n-- e.contract_address = 'x6b175474e89094c44da98b954eedeac495271d0f'\n\n-- UNION\n-- (SELECT\n-- contract_address,\n-- evt_tx_hash,\n-- - value/1e18 as value\n-- FROM erc20.\"ERC20_evt_Transfer\" e\n-- WHERE\n-- e.from = '\\x701dd73aaae8dca5c1b522a16591927e56dbf58c'\n-- and \n-- e.to = '\\x8888888883585b9a8202db34d8b09d7252bfc61c'\n-- and\n-- e.contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n-- )\n)\n\nSELECT\nerc.symbol,\nSUM(txns.value) as total_fundings\nFROM txns\nJOIN erc20.tokens erc on (erc.contract_address = txns.contract_address)\nGROUP by 1\n\n\n"}
{"prompt": "This SQL query is for an analysis of the Ethereum blockchain before and after the \"Merge\" (an event that is scheduled to happen on September 15, 2022). The analysis includes data on the number of transactions, the number of unique senders and receivers, the percentage of successful transactions, the average gas price, the average block time, the number of blocks, and the size of the blockchain.", "completion": " WITH merge AS (\nselect\n    '2022-09-15' as expected_date\n),\n\n\ndata AS (\nSELECT\n    date_trunc('day', block_time) as time,\n    count(distinct hash) AS transactions,\n    count(distinct `from`) AS senders,\n    count(distinct `to`) AS receivers,\n    count(distinct hash) FILTER (where success = true)/count(distinct hash) AS pct_success_txs,\n    AVG(gas_price/1e9) as avg_gas_price\nfrom ethereum.transactions\nwhere block_time >= '2021-01-01'\nand date_trunc('day', block_time) < date_trunc('day', now())\nGROUP BY time\n\nUNION\n\nSELECT\n    explode(sequence(date_trunc('day', now()), '2022-11-01'::TIMESTAMP, interval 1 day)) AS time,\n    null AS transactions,\n    null AS senders,\n    null AS receivers,\n    null AS pct_success_txs,\n    null AS avg_gas_price\n),\n\ndata_blocks AS (\nSELECT\n    date_trunc('day', time) AS dt,\n    86400/COUNT(distinct number) AS avg_block_time,\n    COUNT(distinct number) as blocks,\n    avg(size) as size\nFROM ethereum.blocks\nwhere time >= '2021-01-01'\nand date_trunc('day', time) < date_trunc('day', now())\nGROUP BY dt\n\nUNION\n\nSELECT\n    explode(sequence(date_trunc('day', now()), '2022-11-01'::TIMESTAMP, interval 1 day)) AS dt,\n    null AS avg_block_time,\n    null AS blocks,\n    null as size\n)\n\nSELECT\n    *\nFROM (\nSELECT\n    time,\n    transactions,\n    senders,\n    receivers,\n    pct_success_txs,\n    avg_gas_price,\n    \n    avg_block_time,\n    blocks,\n    size,\n    null as MergeLine\nFROM data\nLEFT JOIN data_blocks ON dt = time\n\nunion \n\nselect \n    date_trunc('day', expected_date) as time, \n    null as transactions,\n    null as senders,\n    null as receivers,\n    null as pct_success_txs,\n    null as avg_gas_price,\n    \n    null as avg_block_time,\n    null as blocks,\n    null as size,\n    1e8 as MergeLine\nFROM merge\n)ggg"}
{"prompt": "This query returns the number of ENS domains registered each week, as well as the cumulative total.", "completion": " WITH a AS (\n\n(SELECT node, label, evt_tx_hash FROM ethereumnameservice.\"ENSRegistryWithFallback_evt_NewOwner\")\nUNION ALL\n(SELECT node, label, evt_tx_hash FROM ethereumnameservice.\"ENSRegistry_evt_NewOwner\")\n\n),\n\nfirst AS (\n\nSELECT node, label, min(block_time) as block_time FROM\na\nLEFT JOIN ethereum.transactions tx ON tx.hash = a.evt_tx_hash\nGROUP BY 1, 2\n\n)\n\nSELECT date_trunc('week', block_time) week,\n        COUNT(*) \"Names created\", \n        SUM (COUNT(*)) OVER (ORDER BY date_trunc('week', block_time)) AS cumulative_names_created\nFROM first\nGROUP BY 1;"}
{"prompt": "This query calculates the correlation between the number of transactions involving the tokens LUNA and UST.", "completion": " WITH \n    luna AS(\n    SELECT \n        date_trunc('month', block_time) AS time_1,\n        COUNT (*) AS luna_count\n    FROM \n        dex.trades\n    WHERE \n        \"token_a_symbol\" = 'LUNA' OR \"token_b_symbol\" = 'LUNA' \n    GROUP BY 1\n),\n    ust AS (\n    SELECT \n        date_trunc('month', block_time) AS time_2,\n        COUNT (*) AS ust_count\n    FROM \n        dex.trades\n     WHERE \n        \"token_a_symbol\" = 'UST' OR \"token_b_symbol\" = 'UST'\n    GROUP BY 1\n),\n\nresults AS (\n    SELECT \n        time_1,\n        luna_count,\n        ust_count,\n        CORR(luna_count,ust_count) OVER (ORDER BY a.luna_count) AS \"Running Pearson Correlation\"\n    FROM \n    (\n    SELECT *\n    FROM \n        luna\n    JOIN \n        ust ON luna.time_1 = ust.time_2\n    )A\n    )\nselect * from results"}
{"prompt": "This SQL query will return the total ETH volume traded on Uniswap for each month over the past 6 months.", "completion": " SELECT date_trunc('month', ether.block_time) as Date,\n       SUM(eth/1e18) as \"ETH volume\"\nFROM ((SELECT evt_tx_hash, eth_sold AS eth, block_time  FROM uniswap.\"Exchange_evt_TokenPurchase\" pur\n        LEFT JOIN (SELECT hash,\n             block_time\n      FROM ethereum.transactions\n      WHERE block_time > date_trunc('month', NOW()) - interval '6 months'\n        AND block_time < date_trunc('month', NOW())) tx\n        ON pur.evt_tx_hash = tx.hash)\n      UNION\n        (SELECT evt_tx_hash, eth_bought AS eth, block_time  FROM uniswap.\"Exchange_evt_EthPurchase\" pur\n        LEFT JOIN\n            (SELECT hash, block_time FROM ethereum.transactions\n            WHERE block_time > date_trunc('month', NOW()) - interval '6 months'\n            AND block_time < date_trunc('month', NOW())) tx\n        ON pur.evt_tx_hash = tx.hash)\n        ) ether\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query creates a view called \"ascend_pivot\" which contains data on users' addresses, the day and volume of their activity, and their ranking.", "completion": " \ncreate or replace view dune_user_generated.ascend_pivot as \nwith \n\nlbp_orders as (select * from dune_user_generated.temple_trading_orders tx where order_type in ('buy', 'sell') \nand block_time>='2022-09-06 13:00' and other_symbol in ('FRAX', 'DAI', 'FEI')),\n\ndd as (SELECT date_trunc('day', dd):: date dd FROM generate_series ( '2022-09-06'::timestamp, now(), '1 day'::interval) dd),\n\nlbp_orders_aug as (\nselect o.wallet::bytea address, temple_amount, block_time from lbp_orders o \nunion all\nselect o.wallet::bytea address, 0, dd.dd from lbp_orders o, dd\n)\n\n(select o.address, date_trunc('day', block_time) dayd, sum(temple_amount) volume \nfrom lbp_orders_aug o where address not in (select address from dune_user_generated.temple_wallet_db where wallet_name='Bot')\ngroup by 1,2);\n\nselect rankedq.ranked, t.* from (select * from crosstab('select address, dayd, volume from dune_user_generated.ascend_pivot order by 1,2,3') \nas ct(address bytea, \nday01 double precision, \nday02 double precision, \nday03 double precision, \nday04 double precision,\nday05 double precision,\nday06 double precision,\nday07 double precision,\nday08 double precision,\nday09 double precision,\nday10 double precision,\nday11 double precision,\nday12 double precision\n)) t left join (select *, row_number() over (order by temple_unstaked_balance desc) ranked from dune_user_generated.temple_wallets_ascend w where wallet_type='User-owned Wallet') rankedq \non t.address=rankedq.address order by rankedq.ranked asc"}
{"prompt": "This query will set the value to the concatenation of the symbol and double quotes, and then select all entries from the prices table, ordering them by minute in descending order and limiting the results to the 5 most recent entries.", "completion": " set value =  CONCAT(CONCAT('\"', {{SYMBOL}}),'\"')\n\nSELECT *\nFROM prices.value\n-- WHERE \nORDER by minute desc\nLIMIT 5"}
{"prompt": "This SQL query will select all data from the ethereum.blocks table where the value of the block parameter is set to -1 or any other number. If the block parameter is set to -1, it will not filter the data. If the block parameter is set to any other number, it will use that number to filter the data. The query will return a maximum of 10 results.", "completion": " -- If you input -1 as the block parameter value it will not filter,\n-- but any other number it will use to filter\nSELECT * FROM ethereum.blocks \nWHERE {{ block }}::text = 'all' or number = {{ block }} LIMIT 10;"}
{"prompt": "This query returns the total amount of OWL tokens transferred to the SAFE network for safe creation and transactions.", "completion": " SELECT\n    --date_trunc('day', \"block_time\") as day,\n   -- case \n   -- \twhen tr.\"to\" = '\\x07f455f30e862e13e3e3d960762cb11c4f744d52' then 'safe_creation' \n   -- \twhen tr.\"to\" = '\\x4d953115678b15ce0b0396bcf95db68003f86fb5' then 'safe_transaction' else 'unknown' end as tx_type,\n    sum(tr.value) / 1e18 as owl_amount\nFROM erc20.\"ERC20_evt_Transfer\" tr \njoin erc20.tokens \n    on tr.contract_address = tokens.contract_address\njoin ethereum.transactions et\n    on et.hash = evt_tx_hash\nwhere tr.\"to\" in ('\\x07f455f30e862e13e3e3d960762cb11c4f744d52', '\\x4d953115678b15ce0b0396bcf95db68003f86fb5') -- relay service accounts for creation and transactions\n\tand tokens.contract_address = '\\x1A5F9352Af8aF974bFC03399e3767DF6370d82e4' -- OWL token address"}
{"prompt": "This query returns the total volume of SOL/USDC swaps for each day in the specified time period, as well as the total fees associated with those swaps.", "completion": " SELECT\nblock_date as date,\nsum(abs(post_token_balance.amount - pre_token_balance.amount)) as volume_usdc,\nsum(abs(post_token_balance.amount - pre_token_balance.amount)) * {{Fee Rate}} as total_fees\nFROM\n  solana.transactions LATERAL VIEW explode(pre_token_balances) p1 AS pre_token_balance LATERAL VIEW explode(post_token_balances) p2 AS post_token_balance\nWHERE\n  pre_token_balance.account = '2JTw1fE2wz1SymWUQ7UqpVtrTuKjcd6mWwYwUJUCh2rq'   -- USDC address of the contract : https://solscan.io/account/HJPjoWUrhoZzkNfRpHuieeFk9WcZWjwy6PBjZ81ngndJ\n  AND post_token_balance.amount - pre_token_balance.amount != 0\n  AND post_token_balance.account = pre_token_balance.account\n  AND cast(log_messages AS string) LIKE '%Swap%'\n  AND block_date >= (CURRENT_DATE - '{{Days Lookback}} days':: INTERVAL)\n GROUP BY date\n ORDER BY date"}
{"prompt": "This SQL query returns the number of distinct sender addresses for each day in the past 60 days, ordered by day in descending order.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\ncount(distinct sender)\nFROM pooltogether.\"MCDAwarePool_evt_Deposited\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1 \nORDER BY 1 desc\nLIMIT 60"}
{"prompt": "This SQL query returns the total amount of gas paid by users on the OpenSea marketplace each month, starting from May 2020. The gas price and gas used for each transaction is taken from the ethereum.transactions table, and the block time for each transaction is used to group the results by month.", "completion": " SELECT date_trunc('month', block_time) AS date,\n       sum(gas_price * gas_used) / 1e18 AS gas\nFROM wyvern.\"WyvernExchange_evt_OrdersMatched\"\nINNER JOIN ethereum.transactions tx ON evt_tx_hash = tx.hash\nWHERE evt_block_time >= '2020-05-01'\n  AND block_time >= '2020-05-01'\nGROUP BY date"}
{"prompt": "This SQL query returns the average discount of DAI auctions for WETH over time. The discount is calculated as the difference between the average price of the token on DutchX and the average price of the token on the market.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    avg(\"sellVolume\" / \"buyVolume\") as \"DutchX price\",\n    avg(eth.average / dai.average) as \"Market price\",\n    (avg(\"sellVolume\" / \"buyVolume\") / avg(eth.average / dai.average) - 1)*100 as \"discount\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" dai \n\nWHERE \"sellToken\" = '\\x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' --dai\nAND \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', dai.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND dai.symbol = 'DAI'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "This SQL query returns the following information:\n\n- The user address from which the ERC20 tokens were transferred\n- The amount of tokens transferred\n- The symbol of the ERC20 token\n- The transaction hash of the event", "completion": " SELECT \ne.from as user_address,\nvalue/1e18 as amount,\nt.symbol,\ne.evt_tx_hash\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n\n\n\n"}
{"prompt": "This query will select all data from the \"cErc20_evt_LiquidateBorrow\" table in the compound_v2 database.", "completion": " SELECT\n *\nFROM compound_v2.\"cErc20_evt_LiquidateBorrow\"\n"}
{"prompt": "The following SQL query retrieves the total amount of USDC borrowed from the Compound contract on a monthly basis. The data is ordered by date, with the most recent month appearing first.", "completion": " SELECT \ndate_trunc('month', tx.block_time) as date,\nsum(\"borrowAmount\" / 1e6)\nFROM compound_v2.\"cErc20_evt_Borrow\" b LEFT JOIN ethereum.transactions tx\nON b.evt_tx_hash = tx.hash\nWHERE contract_address = '\\x39aa39c021dfbae8fac545936693ac917d5e7563' --cUSDC address\nGROUP BY 1\nORDER BY 1;\n"}
{"prompt": "This query returns the date and the sum of wrapped BTC minted for each week. The minted BTC is calculated by taking the amount from the event and dividing it by 100,000,000. The query joins the event data with the transaction data so that we can get the block time for each event. Finally, the data is grouped by week.", "completion": " SELECT date_trunc ('week', tx.block_time) date, \n        SUM (wbtc_mint.amount/100000000) wbtc_minted\nFROM wrappedbtc.\"WBTC_evt_Mint\" wbtc_mint\nLEFT JOIN ethereum.transactions tx\nON tx.hash = wbtc_mint.evt_tx_hash\nGROUP BY 1"}
{"prompt": "This query returns the number of unique users who have made a successful transaction to the specified address, grouped by day.", "completion": " SELECT date_trunc('day', block_time) AS date,\n       COUNT(DISTINCT \"from\") AS COUNT\nFROM ethereum.\"transactions\"\nWHERE \"to\" = '\\x7Be8076f4EA4A4AD08075C2508e481d6C946D12b'\n  AND \"success\" = TRUE\nGROUP BY 1\nORDER BY 1 DESC;"}
{"prompt": "This SQL query returns the number of ethereum traces per week where the address is not null.", "completion": " SELECT date_trunc('week', block_time), count(*) \nFROM ethereum.traces\nWHERE address IS NOT NULL\nGROUP BY 1;"}
{"prompt": "This query returns a list of all executed trades, including the batch ID, block time, order ID, sell token, buy token, sell amount, buy amount, price, trader, and solution transaction link.", "completion": " -- Note: this query does not yet include reverted trades. \nSELECT\n    solution.\"batchId\",\n    transactions.\"block_time\", \n    trades.\"orderId\",\n    sell_token.\"symbol\" as \"sellToken\",\n    buy_token.\"symbol\" as \"buyToken\",\n  --  sell_token.\"token\" as \"sellTokenAddress\",\n  --  buy_token.\"token\" as \"buyTokenAddress\",\n    \"executedSellAmount\"/10^(sell_token.\"decimals\") as \"sellAmount\",\n    \"executedBuyAmount\"/10^(buy_token.\"decimals\") as \"buyAmount\",\n    ((\"executedBuyAmount\"/10^(buy_token.\"decimals\"))/(\"executedSellAmount\"/10^(sell_token.\"decimals\"))) as Price,\n    CONCAT('0x', ENCODE(trades.\"owner\", 'hex')) as trader,\n    CONCAT('https://etherscan.io/tx/','0x', ENCODE(trades.\"evt_tx_hash\", 'hex')) as Solution_tx_Link\nFROM gnosis_protocol.\"BatchExchange_evt_Trade\" trades\nJOIN gnosis_protocol.\"view_tokens\" buy_token\n    ON trades.\"buyToken\" = buy_token.\"token_id\"\nJOIN gnosis_protocol.\"view_tokens\" sell_token\n    ON trades.\"sellToken\" = sell_token.\"token_id\"\nJOIN ethereum.\"transactions\" transactions\n    ON transactions.hash = trades.evt_tx_hash\n    AND transactions.success = true\nJOIN gnosis_protocol.\"BatchExchange_call_submitSolution\" solution\n    ON solution.call_tx_hash=transactions.hash\nORDER BY \"block_time\" desc;"}
{"prompt": "The query will return the number of prices added by Tellor over the last 5 days.", "completion": " SELECT \nCOUNT(m.call_success)/5 as NumOfPricesAddedByTellor\nFROM tellor.\"TellorMaster_call_submitMiningSolution\" as m\n;"}
{"prompt": "This query returns the USD volume for IDEX trades over the past 24 weeks, grouped by week.", "completion": " SELECT date_trunc('week', tx.block_time) as Date,\n       SUM((eth) * p.price) as \"USD volume\"\nFROM ((SELECT call_tx_hash, \"tradeValues\"[1]/1e18 AS eth FROM idex.\"IDEX1_call_trade\"\n        WHERE \"tradeAddresses\"[1] = '\\x0000000000000000000000000000000000000000'\n        AND call_success = true)\n        UNION\n        (SELECT call_tx_hash, \"tradeValues\"[2]/1e18 AS eth FROM idex.\"IDEX1_call_trade\"\n        WHERE \"tradeAddresses\"[2] = '\\x0000000000000000000000000000000000000000'\n        AND call_success = true)) total\n    INNER JOIN (SELECT hash, block_time FROM ethereum.transactions tx\n                WHERE tx.block_time > now() - interval '24 weeks'\n                AND block_time < date_trunc('week', NOW())) tx\n    ON total.call_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This query returns the number of accounts that have a balance of Magnolia tokens that is greater than 0.", "completion": " WITH balances AS\n  (WITH outbound AS\n     (SELECT a.\"from\",\n             SUM(a.value/1e18) amt\n      FROM dxdao.\"TokenFRTProxy_evt_Transfer\" a\n      LEFT JOIN ethereum.transactions b -- Replace with transfer event for relevant project\n ON a.tx_Hash = b.hash\n      WHERE success = TRUE\n      GROUP BY 1),\n        inbound AS\n     (SELECT a.\"to\",\n             SUM(a.value/1e18) amt\n      FROM dxdao.\"TokenFRTProxy_evt_Transfer\" a\n      LEFT JOIN ethereum.transactions b -- Replace with transfer event for relevant project\n ON a.tx_Hash = b.hash\n      WHERE success = TRUE\n      GROUP BY 1) SELECT inbound.\"to\" as account,\n                         CASE\n                             WHEN outbound.amt IS NULL THEN inbound.amt\n                             ELSE inbound.amt - outbound.amt\n                         END AS balance\n   FROM inbound\n   LEFT JOIN outbound ON outbound.\"from\" = inbound.\"to\"\n   ORDER BY balance DESC)\nSELECT COUNT(balances.account) \nFROM balances\nWHERE balances.balance > 0\n;"}
{"prompt": "This SQL query counts the number of distinct borrowers for both cEther and cErc20 tokens on the Compound v2 platform.", "completion": " SELECT COUNT (DISTINCT e.borrower) AS EthBorrowers,\n             COUNT (DISTINCT t.borrower) AS TokenBorrowers\nFROM compoundv2.\"cEther_evt_Borrow\" e,\n     compoundv2.\"cErc20_evt_Borrow\" t"}
{"prompt": "This SQL query calculates the total USD value of all AirSwap trades made in the past 24 weeks, grouped by week.", "completion": " WITH per_token AS\n  (SELECT price.symbol,\n          date_trunc('week', tx.block_time) AS TIME,\n          CASE\n              WHEN price.symbol = 'USDC' THEN SUM(\"takerAmount\" / 1e6) --USDC ERC20 has only 6 decimals\n              ELSE SUM(\"takerAmount\" /1e18 * price.average)\n          END AS total_usd_value\n   FROM airswap.\"Exchange_evt_Filled\" filled\n   INNER JOIN\n     (SELECT hash, block_time\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '24 weeks'\n        AND block_time < date_trunc('week', NOW())) tx ON filled.tx_hash = tx.hash\n   INNER JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = price.time\n   WHERE \"takerToken\" = price.asset\n   GROUP BY 1,\n            2)\nSELECT TIME,\n       SUM(total_usd_value) AS volume\nFROM per_token\nGROUP BY 1;"}
{"prompt": "This query returns the date, value, and transaction hash for all successful calls to the burnSynths function where the currency key is equal to 'sUSD' or NULL, and the value is greater than or equal to 10000. The results are ordered by date, with the most recent results appearing first. Only the first 25 results are returned.", "completion": " SELECT date_trunc('day', block_time) as day, (amount/1e18) as value, call_tx_hash\r\nFROM synthetix.\"Synthetix_call_burnSynths\" f\r\nINNER JOIN ethereum.transactions txs ON txs.hash = f.call_tx_hash \r\nWHERE \r\n\t\t( \"currencyKey\" = '\\x7355534400000000000000000000000000000000000000000000000000000000' OR \"currencyKey\" = NULL)\r\n\tAND call_success = true\r\n\tAND (amount/1e18) >= 10000\r\nORDER BY day DESC\r\nLIMIT 25"}
{"prompt": "This SQL query returns the top 10 lenders and borrowers on the Compound platform for the past week.", "completion": " SELECT\ndate_trunc('week', block_time) as week,\ncount(distinct \"minter\") FROM compound_v2.\"cErc20_evt_Mint\" c\nLEFT JOIN ethereum.\"transactions\" tx on c.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This SQL query returns the total USD volume of Saturn Network transactions for each week, ordered from most recent to oldest. The volume is calculated by multiplying the value of each transaction (in ETH) by the USD price of ETH at the time the transaction was made.", "completion": " SELECT date_trunc('week', block_time) AS date,\n       SUM(tx.value / 1e18 * p.price) AS volume_usd\nFROM ethereum.transactions AS tx\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE ( tx.to = '\\x2F99BE0AdF2ABD64b6813a414f3a27aACe42A9bf' )\nor ( tx.to = '\\xaA5bBD5A177A588b9F213505cA3740b444Dbd586')\nor ( tx.to = '\\x1f0D1dE1558582Ad6f13763f477119A1455502af')\nor (tx.to = '\\x13f64609bf1ef46f6515f8cd3115433a93a00dc6')\n  AND tx.success = TRUE\n  AND p.symbol = 'ETH' \nGROUP BY 1\nORDER BY 1 DESC;"}
{"prompt": "This SQL query calculates the total amount of each type of yToken deposited in the iearn.finance.v2 contract, and returns the results as 'total' and the name of the yToken.", "completion": " select sum(_amount/1e18) as total, 'ySUSD' as name from iearn_v2.\"yToken_call_deposit\" where encode(contract_address, 'hex') = 'f61718057901f84c4eec4339ef8f0d86d2b45600'\nunion\nselect sum(_amount/1e6) as total, 'yUSDC' as name from iearn_v2.\"yToken_call_deposit\" where encode(contract_address, 'hex') = 'd6ad7a6750a7593e092a9b218d66c0a814a3436e'\nunion\nselect sum(_amount/1e18) as total, 'yDAI' as name from iearn_v2.\"yToken_call_deposit\" where encode(contract_address, 'hex') = '16de59092dae5ccf4a1e6439d611fd0653f0bd01'\nunion \nselect sum(_amount/1e6) as total, 'yUSDT' as name from iearn_v2.\"yToken_call_deposit\" where encode(contract_address, 'hex') = '83f798e925bcd4017eb265844fddabb448f1707d'\nunion\nselect sum(_amount/1e18) as total, 'yTUSD' as name from iearn_v2.\"yToken_call_deposit\" where encode(contract_address, 'hex') = '73a052500105205d34daf004eab301916da8190f'\n"}
{"prompt": "This query returns the date and total quantity of rebalancing sets issued on the Set Protocol Exchange Issuance Module, grouped by date.", "completion": " select tx.block_time::date, sum(\"_rebalancingSetQuantity\")/1e18 \nfrom setprotocol.\"RebalancingSetExchangeIssuanceModule_call_issueRebalancingSetWi\" s\ninner join ethereum.transactions tx on s.tx_hash = tx.hash\nwhere s.success\ngroup by 1;"}
{"prompt": "How many distinct users have made a sell order for WETH (ETH) on the DutchX exchange where the amount of ETH being sold is greater than 5 ETH?", "completion": " \n\nSELECT \n    COUNT ( DISTINCT\n    \"user\")\n    \nFROM gnosis.\"DutchExchange_evt_NewSellOrder\" \n\nWHERE \"sellToken\" = '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH\n--AND \"buyToken\" = '\\x543ff227f64aa17ea132bf9886cab5db55dcaddf' -- GEN\nAND \"amount\" > 5000000000000000000 -- 5 ETH\n; \n\n/*\n\nSELECT\n\n    SUM(\"buyVolume\" / 1e18) as \"Tokens Sold\"\n    FROM gnosis.\"DutchExchange_evt_AuctionCleared\" \n\nWHERE \"buyToken\" = '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' --WETH\n\n; */"}
{"prompt": "This SQL query returns the success rate of liquidations for the dYdX (Solo Margin) protocol for the past 50 weeks.", "completion": " WITH successful AS \n(\nSELECT\ndate_trunc('week', block_time) week,\ncount(\"call_tx_hash\") as success\nFROM dydx.\"LiquidatorProxyV1ForSoloMargin_call_liquidate\" s\nLEFT JOIN ethereum.\"transactions\" tx on s.call_tx_hash = tx.hash\nWHERE call_success = true\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50),\n\ntotal AS \n(SELECT\ndate_trunc('week', block_time) week,\ncount(\"call_tx_hash\") as total\nFROM dydx.\"LiquidatorProxyV1ForSoloMargin_call_liquidate\" t\nLEFT JOIN ethereum.\"transactions\" tx on t.call_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50)\n\nSELECT successful.\"week\",sum(\"success\")/sum(\"total\") as success_rate\nFROM successful\nLEFT JOIN total on successful.week = total.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This SQL query selects all data from the \"CAT_evt_Bite\" table and returns the first 10 results.", "completion": " SELECT * FROM makermcd.\"CAT_evt_Bite\"\nLIMIT 10"}
{"prompt": "This query returns the top 10 addresses that hold the most DSR (Debt Service Reserve) tokens. DSR is a type of collateral that is used by the Maker Protocol.", "completion": " WITH inbound AS\n(\n    SELECT \n    \"src\" as address,\n    sum(rad/1e45) as amount FROM makermcd.\"VAT_call_move\"\n    where dst = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\n    AND call_success\n    GROUP BY 1\n\nUNION ALL\n    SELECT \n    \"dst\" as address,\n    sum(-rad/1e45) as amount FROM makermcd.\"VAT_call_move\"\n    WHERE src = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\n    AND call_success\n    GROUP BY 1\n)\n\nSELECT \ninbound.address,\nsum(amount) as DSR_holdings\nFROM inbound\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 10\n    "}
{"prompt": "This SQL query returns the total amount of ETH stored in Authereum contracts.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8', '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea', '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046') -- Authereum Wallet Factorys\n\tand type = 'create'\n),\nperaddress as (\n    SELECT address, sum(amount) / 1e18 as amount\n    FROM (\n        SELECT \"from\" AS address, -value AS amount\n         FROM ethereum.traces\n         WHERE \"from\" IN (SELECT address FROM wallets)\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    UNION ALL\n        SELECT \"to\" AS address, value AS amount\n         FROM ethereum.traces\n         WHERE \"to\" IN (SELECT address FROM wallets )\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    ) t\n    group by 1\n)\nselect sum(amount)\nfrom peraddress"}
{"prompt": "This SQL query returns a list of all Dapper contracts sorted by the amount of ETH stored in each contract. The query includes the contract address and the amount of ETH stored.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\xa78bbf97033e534c54b0a4fa62aa77b652ae4097', '\\xab76c6d00c603a7615d5459132c1745eb1fb4f6c') -- Dapper  WalletFactories \n\tand type = 'create'\n-- \tlimit 10000\n),\nperaddress as (\n    SELECT address, sum(amount) / 1e18 as amount\n    FROM (\n        SELECT \"from\" AS address, -value AS amount\n         FROM ethereum.traces\n         join wallets\n         \ton \"from\" = wallets.address and creation_block_number <= block_number\n         WHERE -- \"from\" IN (SELECT address FROM wallets)\n         tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n         and block_number >= 7249926 -- blocknumber of first dapper contract\n    UNION ALL\n        SELECT \"to\" AS address, value AS amount\n         FROM ethereum.traces\n         join wallets\n         \ton \"to\" = wallets.address and creation_block_number <= block_number\n         WHERE --\"to\" IN (SELECT address FROM wallets )\n         tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n         and block_number >= 7249926 -- blocknumber of first dapper contract\n    ) t\n    group by 1\n)\nselect ROW_NUMBER() OVER(ORDER BY amount desc) AS n, concat('https://etherscan.io/address/0',right(text(address),41)) as address, amount as eth_amount\nfrom peraddress\norder by amount desc"}
{"prompt": "This SQL query returns the batch ID, block time, objective function, and solution submitter for all successful Gnosis Protocol Exchange transactions.", "completion": " SELECT\n\"batchId\",\n\"block_time\",\n\"claimedObjectiveValue\"/(10^18)/(10^18) as objectiveFunction,\n--CONCAT('0x', ENCODE(\"from\", 'hex')) as solution_submitter,\nCONCAT('https://etherscan.io/address/0',right(text(\"from\"),41)) as solution_submitter,\n--CONCAT ('0x', ENCODE (\"hash\", 'hex')) as transaction_hash,\nCONCAT('https://etherscan.io/tx/0x',right(text(\"hash\"),64)) as solution_submission\nFROM gnosis_protocol.\"BatchExchange_call_submitSolution\" tokens\nJOIN ethereum.transactions \n    ON tokens.call_tx_hash = transactions.hash\nWHERE call_success IN (true)\nORDER BY \"batchId\" desc;"}
{"prompt": "The following SQL query calculates the sum of all Ethereum spent on the ENS registry, multiplied by the current ETH/USD price.", "completion": " SELECT SUM(tx.value/1e18)*(SELECT price FROM prices.layer1_usd_eth ORDER BY 1 DESC LIMIT 1) AS notional_usd_spent_at_current_eth_price\nFROM ethereumnameservice.\"ENSRegistry_evt_NewOwner\" r\nLEFT JOIN ethereum.transactions tx\nON tx.hash = r.evt_tx_hash\n"}
{"prompt": "This query returns the price of WETH in USD at the time when the most recent event of type \"Lock\" occurred in the DxLockEth4Rep contract.", "completion": " SELECT p.time, p.average * c.amount as price\nFROM coincap.\"tokens/usd\" p\nINNER JOIN (\n    SELECT sum(_amount / 1e18) as amount FROM dxdao.\"DxLockEth4Rep_evt_Lock\") c\nON TRUE\nWHERE p.symbol='WETH'\nAND p.time=(SELECT MAX(time) FROM coincap.\"tokens/usd\" WHERE symbol='WETH');"}
{"prompt": "This query returns the number of unique borrowers and suppliers on Compound for each week.", "completion": " WITH borrowers as (SELECT date_trunc('week', tx.block_time) AS week,\n          count(DISTINCT b.account) as uniqueBorrowers\nFROM compoundv1.\"MoneyMarket_evt_BorrowTaken\" b\nLEFT JOIN ethereum.transactions tx \nON tx.hash = b.tx_hash \nGROUP BY week\n),\nsuppliers as (\nSELECT date_trunc('week', tx.block_time) AS week,\n        count(DISTINCT s.account) as uniqueSuppliers\nFROM compoundv1.\"MoneyMarket_evt_SupplyReceived\" s \nLEFT JOIN ethereum.transactions tx \nON tx.hash = s.tx_hash \nGROUP BY week\n)\n\nSELECT borrowers.week,\n    SUM(borrowers.uniqueBorrowers) as uniqueBorrowers,\n    SUM(suppliers.uniqueSuppliers) as uniqueSuppliers\nFROM borrowers, suppliers\nWHERE borrowers.week = suppliers.week\nGROUP BY borrowers.week\n\n\n"}
{"prompt": "This SQL query returns the total USD value of all ERC20 bets made in the current year, grouped by hour and symbol.", "completion": " WITH data as (\nSELECT \ndate_trunc('hour', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ncase \nwhen t.symbol= 'WETH' THEN e.value/1e18 * p_weth.price\nWHEN t.symbol = 'DAI' THEN e.value/1e18\nend\nas usd_value,\nt.symbol,\ne.evt_tx_hash\n-- p_weth.price as  curr_weth_price,\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\nJOIN prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 p_weth on (p_weth.symbol = t.symbol AND p_weth.minute = date_trunc('minute', tx.block_time))\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n\nUNION (\nSELECT \ndate_trunc('hour', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ne.value/1e18 as usd_value,\nt.symbol,\ne.evt_tx_hash\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\n-- AND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n)\n)\n\nSELECT data.datetime, sum(usd_value) as total_usd_value, data.symbol\nFROM data \nWHERE date_trunc('year', data.datetime) >= date_trunc('year', now())\nGROUP BY 1, 3\n\n\n"}
{"prompt": "This query returns the total amount of Dai minted and burned, broken down by day, for the past 3 months.", "completion": " WITH mint_erc AS\n(\nSELECT date_trunc('day', call_block_time) AS day, SUM(wad/1e18) AS mint\nFROM makermcd.\"DAI_call_mint\" m\nWHERE m.call_success\nAND call_block_time > now() - interval '3 months'\nGROUP BY 1\n)\n\n, mint_dsr AS (\nSELECT date_trunc('day', call_block_time) AS day, SUM(\"rad\"/1e45) AS mint\nFROM makermcd.\"VAT_call_move\"\nWHERE call_success = 'true'\nAND dst = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND rad>0\nAND call_block_time > now() - interval '3 months'\nGROUP BY 1\n)\n\n, burn_erc AS (\nSELECT date_trunc('day', call_block_time) AS day, -SUM(wad/1e18) AS burn\nFROM makermcd.\"DAI_call_burn\" m\nWHERE m.call_success\nAND call_block_time > now() - interval '3 months'\nGROUP BY 1\n)\n\n, burn_dsr AS (\n\nSELECT date_trunc('day', call_block_time) AS day, -SUM(\"rad\"/1e45) AS burn\nFROM makermcd.\"VAT_call_move\"\nWHERE call_success = 'true'\nAND src = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND rad>0\nAND call_block_time > now() - interval '3 months'\nGROUP BY 1\n)\n\nSELECT  me.day,\n        SUM(me.mint + md.mint) AS mint,\n        SUM(be.burn + bd.burn) AS burn,\n        SUM(me.mint + md.mint + be.burn + bd.burn) AS \"Net minted\"\nFROM mint_erc me\nLEFT JOIN burn_erc be ON me.day = be.day\nLEFT JOIN mint_dsr md ON me.day = md.day\nLEFT JOIN burn_dsr bd ON me.day = bd.day\nGROUP BY 1\nORDER BY 1\n;"}
{"prompt": "This SQL query returns the block time, transaction hash, and number of owners for each safe creation event, ordered by day, in descending order. Only the first 1000 results are returned.", "completion": " SELECT block_time::date as day, safe.call_tx_hash, array_length(_owners, 1) as ownernumber\nFROM gnosis_safe.\"Safev1.0.0_call_setup\" safe\nINNER JOIN ethereum.transactions tx ON safe.call_tx_hash = tx.hash\norder by day desc\nLIMIT 1000"}
{"prompt": "This SQL query returns the average price of RDN tokens auctioned for WETH, the average price of ETH, and theRDN discount (the difference between the two) over time.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    avg(\"buyVolume\" / \"sellVolume\") as \"DutchX price\",\n    avg(rdn.average / eth.average) as \"Market price\",\n    (avg(rdn.average / eth.average) / avg(\"buyVolume\" / \"sellVolume\") - 1)*100 as \"RDN discount\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" rdn \n\nWHERE \"sellToken\" = '\\x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6' --rdn\nAND \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', rdn.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND rdn.symbol = 'RDN'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "This SQL query calculates the total sum of DONUT tokens that have been transferred to and from the contract address over time. It groups the data by hour, and orders it in descending order.", "completion": " SELECT date_trunc('hour', c.block_time) AS TIME,\n       sum(c.value),\n       sum(SUM (c.value)) OVER (ORDER BY date_trunc('hour', c.block_time)) AS TOTAL\nFROM\n  (SELECT block_time,\n          b.value/1e18 AS value\n   FROM erc20.\"ERC20_evt_Transfer\" b\n   INNER JOIN ethereum.transactions tx ON tx.hash = b.evt_tx_hash\n   WHERE contract_address = '\\xc0f9bd5fa5698b6505f643900ffa515ea5df54a9' -- Donut\n     AND b.\"from\" = '\\x0000000000000000000000000000000000000000'\n   \n   UNION ALL SELECT block_time, -d.value/1e18 AS value\n   FROM erc20.\"ERC20_evt_Transfer\" d\n   INNER JOIN ethereum.transactions tx ON tx.hash = d.evt_tx_hash\n   WHERE contract_address = '\\xc0f9bd5fa5698b6505f643900ffa515ea5df54a9' -- Donut\n     AND d.\"to\" = '\\x0000000000000000000000000000000000000000') c\nGROUP BY c.block_time\nORDER BY c.block_time DESC"}
{"prompt": "This query returns the time and ETH value for all \"PunkBought\" events that occurred in the last 3 months, where the value was between 1 and 500 ETH.", "completion": " select\n  date_trunc('hour', evt_block_time) as time,\n  (value / 1e18) as eth_value\nfrom\n  cryptopunks.\"CryptoPunksMarket_evt_PunkBought\"\nwhere\n  evt_block_time > now() - interval '3 months'\n  and value > 1\n  and value < 500 * 1e18\norder by\n  1 desc"}
{"prompt": "This SQL query calculates the fees paid by users of the 0x protocol on the Ethereum network. The fees are calculated for each day, starting from December 1st, 2019. The fees are cumulative, meaning that the total fees paid on each day is the sum of the fees paid on all previous days.", "completion": " WITH fees AS \n(\n    SELECT\n    date_trunc('day', evt_block_time) as day,\n    sum(gas_price/1e18*150000*p.price) as fees_paid\n    FROM zeroex_v2.\"Exchange2.0_evt_Fill\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    LEFT JOIN prices.usd p ON p.minute = date_trunc('day', evt_block_time)\n    WHERE p.symbol = 'WETH'\n    GROUP BY 1\nUNION\n    SELECT\n    date_trunc('day', evt_block_time) as day,\n    sum(gas_price/1e18*150000*p.price) as fees_paid\n    FROM zeroex_v2.\"Exchange2.1_evt_Fill\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    LEFT JOIN prices.usd p ON p.minute = date_trunc('day', evt_block_time)\n    WHERE p.symbol = 'WETH'\n    GROUP BY 1\nUNION\n    SELECT\n    date_trunc('day', evt_block_time) as day,\n    sum(\"protocolFeePaid\"/1e18*p.price) as fees_paid\n    FROM zeroex_v3.\"Exchange_evt_Fill\"\n    LEFT JOIN prices.usd p ON p.minute = date_trunc('day', evt_block_time)\n    WHERE p.symbol = 'WETH'\n    GROUP BY 1\n) \n\nSELECT \nday, \nsum(fees_paid) as \"protocol_fees\", \nsum(sum(fees_paid)) over (order by day) as \"cumulative_fees\"\nFROM fees\nWHERE day > '12/1/19'\nGROUP BY 1\nORDER BY 1 desc\n\n\n"}
{"prompt": "This SQL query returns the price of NXM in USD and ETH for the past 24 hours.", "completion": " WITH freq AS\n  (SELECT evt_tx_hash,\n          count(*)\n   FROM erc20.\"ERC20_evt_Transfer\"\n   WHERE contract_address = '\\xd7c49cee7e9188cca6ad8ff264c1da2e69d4cf3b'\n     AND evt_block_time >= now() - interval '1 day'\n   GROUP BY 1)\nSELECT tx.block_time AS date,\n       (tx.value / 1e18) / (erc.value / 1e18) * p.price AS price_usd,\n       (tx.value / 1e18) / (erc.value / 1e18) AS price_eth\nFROM erc20.\"ERC20_evt_Transfer\" erc\nINNER JOIN freq f ON erc.evt_tx_hash = f.evt_tx_hash\nAND f.count = 1\nINNER JOIN ethereum.\"transactions\" tx ON erc.evt_tx_hash = tx.hash\nAND tx.block_time >= now() - interval '1 day'\nAND tx.value != 0\nINNER JOIN prices.\"layer1_usd_eth\" p ON p.minute = date_trunc('minute', tx.block_time)\nAND p.minute >= now() - interval '1 day'\nWHERE erc.contract_address = '\\xd7c49cee7e9188cca6ad8ff264c1da2e69d4cf3b'\n  AND (erc.\"from\" = '\\x0000000000000000000000000000000000000000'\n       OR erc.\"to\" = '\\x0000000000000000000000000000000000000000')\n  AND erc.value != 0\n  AND tx.block_time >= now() - interval '1 day'"}
{"prompt": "This query will select all of the columns from the tokens table.", "completion": " select * from tokens"}
{"prompt": "This query returns the sum of all trade amounts in Kyber Network for each day, in USD, for the past 10 days.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\nsum(\"actualSrcAmount\"/1e18)\nFROM kyber.\"NetworkProxy_evt_ExecuteTrade\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n\nSELECT * FROM prices.usd\nLIMIT 10"}
{"prompt": "ThisSQL query calculates the average price of MKR tokens during WETH auctions on the DutchX exchange, as well as the average market price of MKR tokens and the percentage difference between the two (the \"MKR discount\").", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    avg(\"sellVolume\" / \"buyVolume\") as \"DutchX price\",\n    avg(mkr.average / eth.average) as \"Market price\",\n    (avg(mkr.average / eth.average) / avg(\"sellVolume\" / \"buyVolume\") - 1)*100 as \"MKR discount\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" mkr \n\nWHERE \"sellToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND \"buyToken\" = '\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2' --mkr\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', mkr.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND mkr.symbol = 'MKR'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "This SQL query returns the date, actual quantity, and set ID for the top 10 issuance events of rebalancing sets.", "completion": " SELECT DATE(block_time),\n       setp.\"_rebalancingSetQuantity\"/POWER(10, 18) AS actual_quantity,\n       setp.\"_rebalancingSetAddress\" AS set_id\n  FROM setprotocol.\"RebalancingSetExchangeIssuanceModule_call_issueRebalancingSetWi\" AS setp\n       INNER JOIN ethereum.\"transactions\" AS eth\n       ON (eth.hash = setp.tx_hash)\n LIMIT 10"}
{"prompt": "This query returns the total value of all transactions made to a specific Ethereum address over time.", "completion": " SELECT date_trunc('day', block_time) AS TIME,\n       SUM(c.value),\n       SUM (SUM(c.value)) OVER (\n                                ORDER BY date_trunc('day', block_time)) AS total\nFROM\n  (SELECT block_time,\n          value/1e18 AS value\n   FROM ethereum.transactions\n   WHERE \"to\" = '\\x2910543Af39abA0Cd09dBb2D50200b3E800A63D2'\n     --OR \"to\" = '\\x0A869d79a7052C7f1b55a8EbAbbEa3420F0D1E13'\n     --OR \"to\" = '\\xe853c56864a2ebe4576a807d26fdc4a0ada51919'\n     --OR \"to\" = '\\x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0'\n     --OR \"to\" = '\\xFa52274DD61E1643d2205169732f29114BC240b3'\n     --OR \"to\" = '\\x53d284357ec70cE289D6D64134DfAc8E511c8a3D'\n     --OR \"to\" = '\\xA2a8f158aed54CE9A73d41EEEc23Bf3a51b5654D'\n   UNION SELECT block_time, -value/1e18 AS value\n   FROM ethereum.transactions\n   WHERE \"from\" = '\\x2910543Af39abA0Cd09dBb2D50200b3E800A63D2' \n   --OR \"from\" = '\\x0A869d79a7052C7f1b55a8EbAbbEa3420F0D1E13'\n   --OR \"from\" = '\\xe853c56864a2ebe4576a807d26fdc4a0ada51919'\n   --OR \"from\" = '\\x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0'\n   --OR \"from\" = '\\xFa52274DD61E1643d2205169732f29114BC240b3' \n   --OR \"from\" = '\\x53d284357ec70cE289D6D64134DfAc8E511c8a3D'\n   --OR \"from\" = '\\xA2a8f158aed54CE9A73d41EEEc23Bf3a51b5654D'\n ) c\nGROUP BY TIME\nORDER BY TIME DESC\n\n\nSELECT sum(value/1e18) as value1\nFROM erc20.\"ERC20_evt_Transfer\"\nWHERE contract_address = '\\xc0f9bd5fa5698b6505f643900ffa515ea5df54a9' -- Donut\nAND \"from\" = '\\x0000000000000000000000000000000000000000'\nLIMIT 1000"}
{"prompt": "This SQL query returns the total amount of WBTC supplied and borrowed on the Compound platform for each week over the past 50 weeks.", "completion": " WITH supply AS\n(\nSELECT\ndate_trunc('week', block_time) week,\nsum(\"mintAmount\"/1e8*p.price) as wbtc_supplied FROM compound_v2.\"cErc20_evt_Mint\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE m.contract_address = '\\xC11b1268C1A384e55C48c2391d8d480264A3A7F4' AND p.symbol = 'WBTC'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50\n),\n\nborrow AS\n(\nSELECT\ndate_trunc('week', block_time) week,\nsum(\"borrowAmount\"/1e8*p.price) as wbtc_borrowed FROM compound_v2.\"cErc20_evt_Borrow\" b\nLEFT JOIN ethereum.\"transactions\" tx ON b.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE b.contract_address = '\\xC11b1268C1A384e55C48c2391d8d480264A3A7F4' AND p.symbol = 'WBTC'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50)\n\nSELECT supply.\"week\", sum(\"wbtc_supplied\") as wbtc_supply, sum(\"wbtc_borrowed\") as wbtc_borrow\nFROM supply\nLEFT JOIN borrow ON supply.week = borrow.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This query returns the number of trades made by each user on the 1inch.exchange platform, as well as the volume of those trades.", "completion": " SELECT\n    ROW_NUMBER() OVER () as idx,\n    trades as volume_from,\n    FLOOR(POWER(2.0, LOG(2.0, cast(trades AS numeric)) + 1)) - 1 as volume_to,\n    users\nFROM (\n    SELECT\n        FLOOR(POWER(2.0, FLOOR(LOG(2.0, cast(trades AS numeric))))) as trades,\n        COUNT(*) as users\n    FROM (\n        SELECT\n            CONCAT('0x', ENCODE(tx.from, 'hex')) as sender,\n            COUNT(*) as trades\n        FROM oneinch.swaps oi\n        LEFT JOIN ethereum.transactions tx on tx.hash = oi.tx_hash\n        GROUP BY 1\n    ) tt\n    GROUP BY 1\n    ORDER BY 1\n) ttt\n"}
{"prompt": "This SQL query shows the total amount of money bet on ERC20 tokens over time. The data is partitioned by symbol, and the total amount of money bet is calculated for each symbol.", "completion": " WITH data as (\nSELECT \ndate_trunc('day', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ncase \nwhen t.symbol= 'WETH' THEN e.value/1e18 * p_weth.price\nWHEN t.symbol = 'DAI' THEN e.value/1e18\nend\nas usd_value,\nt.symbol,\ne.evt_tx_hash\n-- p_weth.price as  curr_weth_price,\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\nJOIN prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 p_weth on (p_weth.symbol = t.symbol AND p_weth.minute = date_trunc('minute', tx.block_time))\n\nWHERE e.to in ('\\x8888888883585b9a8202Db34D8b09d7252bfc61C', '\\x37304b0ab297f13f5520c523102797121182fb5b', '\\x888888e88e027e5585fa504954dad6246271aa81')\n\nAND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n\nUNION (\nSELECT \ndate_trunc('day', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ne.value/1e18 as usd_value,\nt.symbol,\ne.evt_tx_hash\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\nWHERE e.to in ('\\x8888888883585b9a8202Db34D8b09d7252bfc61C', '\\x37304b0ab297f13f5520c523102797121182fb5b', '\\x888888e88e027e5585fa504954dad6246271aa81')\n\n-- WHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\n-- AND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n)\n)\n\nSELECT\n datetime,\n  sum(usd_value) over (partition by \"symbol\" order by datetime) AS \"totalbet\",\n symbol\nfrom data\n"}
{"prompt": "This SQL query counts the number of unique transactions made by each \"Safe\" address on the Ethereum network from GIP29 (January 1st, 2022) to a new date (August 18th, 2022).", "completion": " WITH airdroppers AS (\nSELECT\n    CONCAT('\\x',substr(\"address\",3))::BYTEA as address\nFROM dune_user_generated.\"safe_airdrop_addresses\"\n)\n\nselect \n    s.address as safe_address,\n    count(distinct tx_hash) as txs\nfrom airdroppers s\njoin ethereum.traces et on et.\"from\" = s.address\nwhere et.success = True \nAND et.call_type = 'delegatecall'\nAND et.block_time <= '2022-08-18' -- new date\nAND et.block_time >= '2022-01-01' -- gip 29\ngroup by safe_address"}
{"prompt": "This query returns the total liquidation amount in USD for each day, from the CAT_evt_Bite table. The liquidation amount is calculated by taking the art value, divided by 1e18, multiplied by 0.1, and then multiplied by the price from the usd table.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\nsum(art/1e18*0.1*p.price) as liq,\nsum(sum(art/1e18*0.1*p.price)) over (order by date_trunc('day', block_time)) as total_liq \nFROM makermcd.\"CAT_evt_Bite\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE p.symbol = 'SAI'\nGROUP BY 1\nORDER BY 1 desc\n"}
{"prompt": "This SQL query returns the total ETH sent to Eth Magic, grouped by hour. It includes transactions that were made on or after block 8635886.", "completion": " /*\nselect sum(tx.\"value\" / 1e18) as total_in\nfrom ethereum.transactions tx\nwhere tx.\"to\" =  '\\x66666672e63f056350c3E79dc605eDC36AA8B952'\nand tx.success = true\nand tx.block_number >= 8635886\n*/\n\n/**\n * Get the total ETH sent to Eth Magic, grouped by hour\n */\n/*\nWITH addresses(addr) AS (VALUES ('\\x66666672e63f056350c3E79dc605eDC36AA8B952'))\nselect sum(value / 1e18) as total_eth, \n       date_trunc('hour', block_time) as hour\nfrom ethereum.transactions \nwhere \"to\" IN (select addr::bytea from addresses) \n  and block_number >= 8635886\ngroup by hour\n*/\n\n\n/* Output of ETH from ETH Magic grouped by address */\n\nSELECT sum(value / 1e18) AS total_out, t.\"to\"\nFROM ethereum.traces t\nWHERE t.\"from\" = '\\x66666672e63f056350c3E79dc605eDC36AA8B952'\n  AND t.tx_success = TRUE\nGROUP BY t.\"to\"\nORDER BY total_out desc\n\n\n\n/* Count of methods called */\n/*\nselect substring(data,1,4) as method_id, sum(1) as times_called\nfrom ethereum.transactions tx\nwhere tx.\"to\" = '\\x66666672e63f056350c3E79dc605eDC36AA8B952'\nand tx.block_number >= 8635886\ngroup by method_id\norder by times_called desc\n*/\n\n/** Run for specific method_id\nselect substring(data,1,4) as method_id, *\nfrom ethereum.transactions tx\ninner join ethereum.receipts r\non tx.hash = r.tx_hash\nwhere tx.\"to\" = '\\x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c'\nand tx.block_number >= 8235058\nand substring(data,1,4) = '\\xb1954e95'\n*/"}
{"prompt": "This SQL query returns the address, transaction hash, and time of day for each trade made on the 0x exchange. It includes both the makers and takers of the trade.", "completion": " SELECT \"makerAddress\" AS address,\n          tx_hash, date_trunc('day', tx.block_time) as time\n   FROM zeroex.\"Exchange21_evt_Fill\" makers\n INNER JOIN ethereum.transactions tx ON makers.tx_hash = tx.hash\n   UNION ALL\n   \n   SELECT \"takerAddress\" AS address,\n                    tx_hash, date_trunc('day', tx.block_time) as time\n   FROM zeroex.\"Exchange21_evt_Fill\" takers\nINNER JOIN ethereum.transactions tx ON takers.tx_hash = tx.hash"}
{"prompt": "This SQL query returns the number of unique bidders on each day of the DXdao \"DxGenAuction4Rep\" auction.", "completion": " WITH block_times AS (\n    SELECT tx_hash, block_time FROM (\n    (SELECT tx_hash FROM dxdao.\"DxGenAuction4Rep_evt_Bid\") \n    UNION (SELECT tx_hash FROM dxdao.\"DxLockMgnForRep_evt_Register\")\n    UNION (SELECT tx_hash FROM dxdao.\"DxLockEth4Rep_evt_Lock\")\n    UNION (SELECT tx_hash FROM dxdao.\"DxLockEth4Rep_evt_Lock\")) a\n    INNER JOIN ethereum.transactions tx ON a.tx_hash = tx.hash\n),\ndates as (\n    SELECT generate_series(\n        (SELECT min(block_time) FROM block_times)::date,\n        NOW()::date,\n        interval '1 day'\n    ) as dt\n)\nSELECT date_trunc('day', b.block_time) as dtv, sum(coalesce(count(_bidder), 0)) OVER (ORDER BY date_trunc('day', b.block_time))\nFROM block_times b\nLEFT JOIN\n(\n    SELECT DISTINCT ON (_bidder) date_trunc('day', b.block_time) as dt, _bidder\n    FROM dxdao.\"DxGenAuction4Rep_evt_Bid\" e\n    INNER JOIN block_times b\n    ON e.tx_hash = b.tx_hash \n    ORDER BY _bidder, dt asc\n) AS subq ON date_trunc('day', b.block_time) = subq.dt\nGROUP BY 1"}
{"prompt": "This query returns the total value of all transactions made by a specific account, divided into separate columns for transactions made and transactions received. The query also groups the results by day, and orders the results by the most recent day first. Finally, the query only returns the first 10 results.", "completion": " WITH receive AS\n  (SELECT date_trunc('day', block_time) AS time,\n          sum(value/1e18) AS value\n   FROM ethereum.transactions\n   WHERE \"to\" = '\\xFa52274DD61E1643d2205169732f29114BC240b3'\n   GROUP BY time\n   ORDER BY time DESC),\n     send AS\n  (SELECT date_trunc('day', block_time) AS time,\n          sum(value/1e18) AS value\n   FROM ethereum.transactions\n   WHERE \"from\" = '\\xFa52274DD61E1643d2205169732f29114BC240b3'\n   GROUP BY time\n   ORDER BY time DESC)\nSELECT *--, receive.value-send.value AS total\nFROM receive, send\n--WHERE receive.date_trunc=send.date_trunc\n -- AND date_trunc('day', receive.date_trunc) > '2019-1-18 16:00:00'\n--GROUP BY send.date_trunc \n--ORDER BY receive.time DESC\nLIMIT 10"}
{"prompt": "SELECT * FROM ethereum.logs WHERE contract_address = '0xde4EE8057785A7e8e800Db58F9784845A5C2Cbd6' AND ( ( topic1 = '0x70d4241f29147d132737e3b0d80e661b9cc6b2911b7b9dc383ab54cf790a6eda' AND ( substring(data from 97 for 4) = '0xf688bcfb' OR substring(data from 97 for 4) = '0xe7c80f17' ) ) OR topic1 = '0x5c2145746a96e247ab56dae7070701d6a6d52685eb027789d7a768552d262f63' ) GROUP BY substring(data from 13 for 20);", "completion": " -- Perform the following queries separately, then combine the results into a single array and filter out all duplicates.\n\n-- All the addresses that ever deposited tokens or ETH during the Dexe token sale.\nSELECT substring(data from 13 for 20) FROM ethereum.logs WHERE\n  contract_address = '\\xde4EE8057785A7e8e800Db58F9784845A5C2Cbd6' AND\n    (\n      (\n        topic1 = '\\x70d4241f29147d132737e3b0d80e661b9cc6b2911b7b9dc383ab54cf790a6eda' AND (substring(data from 97 for 4) = '\\xf688bcfb' OR substring(data from 97 for 4) = '\\xe7c80f17')\n      ) or\n      topic1 = '\\x5c2145746a96e247ab56dae7070701d6a6d52685eb027789d7a768552d262f63'\n    ) group by substring(data from 13 for 20);\n\n-- All the addresses who ever received or sent Dexe.\nSELECT substring(topic2 from 13 for 20), substring(topic3 from 13 for 20) from ethereum.logs where topic1 = '\\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' and contract_address = '\\xde4EE8057785A7e8e800Db58F9784845A5C2Cbd6';\n\n-- Tokensale immediate transfer to.\nSELECT * FROM ethereum.logs WHERE\n  contract_address = '\\x9A4FB08336F02480B739e7F5a5e727fef5e97f90' AND topic1 = '\\x09c601f3bd98a8622a9d8c82742663bd937d18484d7a4b59a11f6a9c69cc36e7';\n\n-- Approvales given to an address.\nSELECT * FROM ethereum.logs WHERE topic1 = '\\x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925' AND topic3 = '\\x000000000000000000000000eefBa1e63905eF1D7ACbA5a8513c70307C1cE441';\n"}
{"prompt": "This query returns the average price of ETH to DAI over the past 5 days.", "completion": " SELECT date_trunc('day', tx.block_time) as time,\n    AVG(pay_amt/buy_amt) as price\nFROM oasisdex.\"eth2dai_evt_LogTrade\" trade\nLEFT JOIN ethereum.transactions tx ON tx.hash = trade.tx_hash\nWHERE pay_gem = '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'\nAND block_time::date > now() - interval '5 days'\nGROUP BY 1\n"}
{"prompt": "This SQL query returns a list of .eth domains that are due to expire, along with their expiration date and the date when they will become available again. The domains are sorted by expiration date, with the most recent expiring domain first.", "completion": " with renewals as (\nselect name, max(expires) as expires from ethereumnameservice.\"view_renewals\"\ngroup by name\n), registration as (\nselect name, expires from ethereumnameservice.\"view_registrations\"\n)\nselect reg.name||'.eth' \n, to_timestamp(GREATEST(ren.expires, reg.expires)) as expiration\n, to_timestamp(GREATEST(ren.expires, reg.expires)) + interval '90 day' as available\nfrom registration reg left join renewals ren on reg.name = ren.name\nwhere to_timestamp(GREATEST(ren.expires, reg.expires)) + interval '90 day'  < current_timestamp\nand length(reg.name) <= 4 and length(reg.name) >= 4\nand not reg.name ~'[^[:ascii:]]'\n-- and reg.name ~'[^[:ascii:]]'\norder by expiration desc\n\n"}
{"prompt": "This SQL query returns the number of transactions sent to the LivepeerBondingManager contract, grouped by day. The transaction data is taken from the Ethereum blockchain, and only transactions from block number 850000 onwards are considered.", "completion": " /**\n * Get the txCount sent to LivepeerBondingManager, grouped by day\n */\nWITH addresses(addr) AS (VALUES ('\\x511Bc4556D823Ae99630aE8de28b9B80Df90eA2e'))\nselect count(transactions) as transactionsCount, \n       date_trunc('day', block_time) as \"day\"\nfrom ethereum.transactions \nwhere \"to\" IN (select addr::bytea from addresses) \n  and block_number >= 850000\ngroup by \"day\"\norder by day"}
{"prompt": "This query returns the number of trades that have been made on the BatchExchange, including those that have been reverted.", "completion": " -- Note: this query does not yet exclude reverted trades. \n-- Not adjusted by two.\n\n\nSELECT\n\nCOUNT (\"evt_tx_hash\") as \"#trades\"\nFROM gnosis_protocol.\"BatchExchange_evt_Trade\" trade\nJOIN ethereum.\"transactions\" transactions\n  ON transactions.hash=trade.evt_tx_hash\n  AND transactions.success=true;"}
{"prompt": "This SQL query returns the beInvitedCode parameter from invest() function calls made to the ethereum address '\\x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c' since block 8235058.", "completion": " select /*substring(data,1,4) as method_id, tx.hash, tx.block_number,*/ distinct substring(tx.data,229,32) as beInvitedCode\nfrom ethereum.transactions tx\ninner join ethereum.receipts r\non tx.hash = r.tx_hash\nwhere tx.\"to\" = '\\x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c'\nand tx.block_number >= 8235058\nand substring(data,1,4) = '\\x188f9b5b'"}
{"prompt": "This query returns the total number of Rarible users over time. The data is grouped by date and ordered by ascending date.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(evt_block_time)) AS date,\n                buyer AS account\n         FROM rarible.\"TokenSale_evt_Buy\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      seller AS account\n         FROM rarible.\"TokenSale_evt_Buy\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      buyer AS account\n         FROM rarible_v1.\"ERC1155Sale_v1_evt_Buy\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      OWNER AS account\n         FROM rarible_v1.\"ERC1155Sale_v1_evt_Buy\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      buyer AS account\n         FROM rarible_v1.\"ERC1155Sale_v2_evt_Buy\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      OWNER AS account\n         FROM rarible_v1.\"ERC1155Sale_v2_evt_Buy\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      buyer AS account\n         FROM rarible_v1.\"ERC721Sale_v1_evt_Buy\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      seller AS account\n         FROM rarible_v1.\"ERC721Sale_v1_evt_Buy\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      buyer AS account\n         FROM rarible_v1.\"ERC721Sale_v2_evt_Buy\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      seller AS account\n         FROM rarible_v1.\"ERC721Sale_v2_evt_Buy\"\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "This SQL query returns the number of new registrations each day, grouped by date.", "completion": "     select date(evt_block_time), count(*) as name_registered_count\n    from spaceid.\"BaseRegistrarImplementation_evt_NameRegistered\"\n    group by 1\n    order by 1"}
{"prompt": "This query returns the total value of all Kyber trades made in the last 7 days, in USD. It does this by first finding all Kyber trades made in the last 7 days, then summing the ETH value of each trade (taking into account any fees that were burned), and finally multiplying that by the USD price of ETH at the time of the trade.", "completion": " SELECT date_trunc('day', tx.block_time),\n       SUM(sumeth * price.average)\nFROM kyber.\"Network_evt_KyberTrade\" t\n\nINNER JOIN (SELECT hash, block_time FROM ethereum.transactions tx\n                WHERE tx.block_time > now() - interval '7 days'\n                ) tx\n    ON t.tx_hash = tx.hash\n\nINNER JOIN (WITH volume AS\n                (WITH fee_mapping AS\n                   (SELECT tx_hash, INDEX, \"ethWeiValue\" /1e18 AS value,\n                      (SELECT count(*)\n                       FROM kyber.\"FeeBurner_evt_AssignBurnFees\"\n                       WHERE tx_hash = trade.tx_hash\n                         AND INDEX < trade.index) AS burnFees\n                    FROM kyber.\"Network_evt_KyberTrade\" trade\n                    ORDER BY 1, 2) SELECT tx_hash, (value * (burnFees - lag(burnFees, '1', '0') OVER (PARTITION BY tx_hash\n                                                                                                      ORDER BY INDEX))) AS ethvolume\n                 FROM fee_mapping f\n                 ORDER BY tx_hash)\n                 \n            SELECT tx_hash, SUM(ethvolume) as sumeth\n              FROM volume\n              GROUP BY 1\n              ORDER BY 1) as volume ON volume.tx_hash = t.tx_hash\nINNER JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = price.time\nWHERE price.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This query returns the Kyber USD volume per week.\n\nThe Kyber USD volume is calculated by summing the ETH volume for each trade on Kyber, multiplied by the ETH price for each trade.", "completion": " WITH txs AS (\n    SELECT hash, date_trunc('minute', block_time) as minute, date_trunc('week', block_time ) as week\n    FROM ethereum.transactions\n    WHERE block_time > date_trunc('week', now()) - interval '52 weeks'\n    AND block_time < date_trunc('week', now())\n), price AS (\n   SELECT * FROM prices.usd\n   WHERE minute > date_trunc('week', now()) - interval '52 weeks'\n   AND minute < date_trunc('week', now())\n   AND symbol = 'ETH'),\nkyber_volume_mapping AS (\n\t\tSELECT evt_tx_hash,\n\t\t\tCASE WHEN reserve1 IN ('\\x2295fc6BC32cD12fdBb852cFf4014cEAc6d79C10', '\\x57f8160e1c59D16C01BbE181fD94db4E56b60495', '\\x0000000000000000000000000000000000000000') THEN 0 ELSE \"ethWeiValue\" /1e18 END AS reserve1_eth_volume,\n\t\t\tCASE WHEN reserve2 IN ('\\x2295fc6BC32cD12fdBb852cFf4014cEAc6d79C10', '\\x57f8160e1c59D16C01BbE181fD94db4E56b60495', '\\x0000000000000000000000000000000000000000') THEN 0 ELSE \"ethWeiValue\" /1e18 END AS reserve2_eth_volume\n\t\tFROM kyber.\"Network_evt_KyberTrade\" trade\n\t),\n\tkyber_volume AS (\n\t\tSELECT evt_tx_hash, SUM(reserve1_eth_volume+reserve2_eth_volume) as sumeth\n\t\tFROM kyber_volume_mapping\n\t\tGROUP BY 1\n), kyber_volume AS (\n    SELECT evt_tx_hash, SUM(ethvolume) as sumeth\n    FROM kyber_intermediate_volume\n    GROUP BY 1\n), kyber AS (\n    SELECT week, SUM(sumeth * p.price) AS usd_volume\n    FROM txs \n    INNER JOIN kyber_volume ON kyber_volume.evt_tx_hash = txs.hash\n    INNER JOIN price p ON txs.minute = p.minute\n    WHERE p.symbol = 'ETH'\n    GROUP BY 1)\nSELECT week,\n       usd_volume\nFROM kyber"}
{"prompt": "The SQL query below returns the total number of unique addresses that have generated names on the Ethereum Name Service (ENS). \n\nThis is accomplished by first selecting all events from the ENS Registry that indicate a new owner was generated, then left joining this information with data on Ethereum transactions. Finally, the COUNT DISTINCT function is used to return the number of unique addresses associated with these events.", "completion": " SELECT COUNT (DISTINCT owner)\n    FROM ethereumnameservice.\"ENSRegistry_evt_NewOwner\" r\n    LEFT JOIN ethereum.transactions tx\n    ON tx.hash = r.evt_tx_hash"}
{"prompt": "This query returns the number of distinct vaults that have been liquidated, grouped by the type of asset.", "completion": " SELECT COUNT (DISTINCT urn), ilk\nFROM makermcd.\"CAT_call_bite\" GROUP BY ilk;"}
{"prompt": "The following SQL query returns the total USD value of all OpenSea orders matched, grouped by month. The query joins the \"WyvernExchange_evt_OrdersMatched\" and \"WyvernExchange_call_atomicMatch_\" tables to get data on all matched orders, then uses the \"prices.usd\" table to convert the prices of each order into USD.", "completion": " with token AS (\n\nSELECT call_tx_hash as tx_hash,\nCASE WHEN addrs[7] = '\\x0000000000000000000000000000000000000000' THEN '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\nELSE addrs[7]\nEND AS token_address\nFROM\nwyvern.\"WyvernExchange_call_atomicMatch_\" a\n)\n\nSELECT date_trunc('month', block_time) AS month,\nSUM((om.price/10^erc.decimals)*p.price) AS usd_volume\nFROM wyvern.\"WyvernExchange_evt_OrdersMatched\" om\nINNER JOIN token ON token.tx_hash = om.evt_tx_hash\nLEFT JOIN ethereum.transactions tx ON om.evt_tx_hash = tx.hash\nLEFT JOIN erc20.tokens erc ON token.token_address = erc.contract_address\nLEFT JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nAND token.token_address = p.contract_address\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This query returns the total amount of DAI borrowed on Compound.", "completion": " SELECT SUM(amount / 1e18) --Here we get the amount of tokens borrowed (most amounts needs to be divided by 1e18)\nFROM compound.\"MoneyMarket_evt_BorrowTaken\" --Browse the decoded smart contract data in the window on your left\nWHERE asset = '\\x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' --Filtering for the DAI address. Note that 0 is replaced with \\"}
{"prompt": "This SQL query returns the number of addresses that locked whitelisted tokens on each day.", "completion": " SELECT date, sum(count(_locker)) OVER (ORDER BY date)\nFROM (\n    SELECT DISTINCT ON (_locker) date_trunc('day', tx.block_time) as date, _locker\n    FROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\" e\n    LEFT JOIN ethereum.transactions tx\n    ON e.tx_hash = tx.hash \n    ORDER BY _locker, date asc\n) AS subq\nGROUP BY date;"}
{"prompt": "The query returns the sum of the USD value of collateral for each token type on the Compound platform, grouped by week.", "completion": " WITH temp_token_info (address, symbol, decimals, underlying_symbol, underlying_decimals) AS\n    (VALUES\n    ('\\x6c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e', 'cBAT', 8, 'BAT', 18),\n    ('\\xf5dce57282a584d2746faf1593d3121fcac444dc', 'cDAI', 8, 'DAI', 18),\n    ('\\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5', 'cETH', 8, 'ETH', 18),\n    ('\\x158079ee67fce2f58472a96584a73c7ab9ac95c1', 'cREP', 8, 'REP', 18),\n    ('\\x39aa39c021dfbae8fac545936693ac917d5e7563', 'cUSDC', 8, 'USDC', 6),\n    ('\\xb3319f5d18bc0d84dd1b4825dcde5d5f7266d407', 'cZRX', 8, 'ZRX', 18)\n    )\n\nSELECT \ndate_trunc('week', tx.block_time) as time,\nt.underlying_symbol,\nSUM(\"mintAmount\" / (10^(t.\"underlying_decimals\")) * p.average)\n\nFROM compoundv2.\"cErc20_evt_Mint\" l\nINNER JOIN ethereum.transactions tx ON l.tx_hash = tx.hash\nINNER JOIN temp_token_info t on t.address::bytea = l.address\nINNER JOIN coincap.\"tokens/usd\" p ON date_trunc('minute', p.time) = date_trunc('minute', tx.block_time) AND p.symbol = t.underlying_symbol\n--WHERE p.symbol = t.underlying_symbol\nGROUP BY 1, 2\nORDER BY 1 DESC\n"}
{"prompt": "This SQL query returns the success rate of liquidations on the Compound v2 platform for the past 50 weeks. It does this by first calculating the number of successful liquidations and the total number of liquidations attempted for each week, then dividing the number of successful liquidations by the total number of liquidations to get the success rate for that week. The query then sorts the results by week, with the most recent week appearing first.", "completion": " WITH successful AS \n(\nSELECT\ndate_trunc('week', block_time) week,\ncount(\"call_tx_hash\") as success\nFROM compound_v2.\"cErc20_call_liquidateBorrow\" s\nLEFT JOIN ethereum.\"transactions\" tx on s.call_tx_hash = tx.hash\nWHERE call_success = true\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50),\n\ntotal AS \n(SELECT\ndate_trunc('week', block_time) week,\ncount(\"call_tx_hash\") as total\nFROM compound_v2.\"cErc20_call_liquidateBorrow\" t\nLEFT JOIN ethereum.\"transactions\" tx on t.call_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50)\n\nSELECT successful.\"week\",sum(\"success\")/sum(\"total\") as success_rate\nFROM successful\nLEFT JOIN total on successful.week = total.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This SQL query returns the top 10 holders of ENS domains.", "completion": " SELECT r.owner, COUNT (DISTINCT hash)\n        FROM ethereumnameservice.\"Registrar_old_evt_HashRegistered\" r\n        GROUP BY 1\n        ORDER BY 2 DESC\n        LIMIT 10"}
{"prompt": "This SQL query returns the number of ethereum transactions associated with the Synthetix chainlink exchange rate updates.", "completion": " SELECT count(1)ethereum.\"transactions_default\"\nFROM synthetix.\"ExchangeRates_v2_call_updateRates\" AS rates\nINNER JOIN ethereum.\"transactions\" txs ON txs.hash = rates.call_tx_hash\n;"}
{"prompt": "This SQL query returns the time, sum of values, and sum of totals for each block time for the Donut 2 contract.", "completion": " SELECT date_trunc('second', c.block_time) AS TIME,\n       sum(c.value),\n       sum(SUM (c.value)) OVER (ORDER BY date_trunc('second', c.block_time)) AS TOTAL\nFROM\n  (SELECT block_time,\n          bytea2numeric(b.DATA)/1e18 AS value\n   FROM ethereum.logs b\n   INNER JOIN ethereum.transactions tx ON tx.hash = b.tx_hash\n   WHERE topic1='\\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' -- Transfer\n     AND contract_address = '\\xc0f9bd5fa5698b6505f643900ffa515ea5df54a9' -- Donut\n     AND topic2= '\\x0000000000000000000000000000000000000000000000000000000000000000'\n   \n   UNION ALL SELECT block_time, -(bytea2numeric(d.DATA)/1e18) AS value\n   FROM ethereum.logs d\n   INNER JOIN ethereum.transactions tx ON tx.hash = d.tx_hash\n   WHERE topic1='\\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' -- Transfer\n     AND contract_address = '\\xc0f9bd5fa5698b6505f643900ffa515ea5df54a9' -- Donut\n     AND topic3= '\\x0000000000000000000000000000000000000000000000000000000000000000') c\nGROUP BY c.block_time\nORDER BY c.block_time DESC"}
{"prompt": "This query returns the number of new Uniswap liquidity pools created each week, as well as the date that each pool was created.", "completion": " SELECT date_trunc('week', tx.block_time),\nCOUNT (*)  as \"New Liquidity Pools\"\nFROM uniswap.\"Factory_evt_NewExchange\" u\nLEFT JOIN ethereum.transactions tx ON tx.hash = u.evt_tx_hash\nGROUP BY 1\nORDER BY 1;\n\n\n"}
{"prompt": "This SQL query returns the sum of all deposits and commitments made to the PoolTogether contract each day, for the past 60 days. The data is returned in descending order, with the most recent days appearing first.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\nsum(amount/1e18)\nFROM pooltogether.\"MCDAwarePool_evt_DepositedAndCommitted\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 60"}
{"prompt": "This query returns the sum of all successful DSR deposits minus the sum of all successful DSR withdrawals.", "completion": " select \n(\n    select SUM(wad/1e18)\n    from makermcd.\"PROXY_ACTIONS_DSR_call_join\"\n    where call_success = 'TRUE'\n)\n-\n(\n    select SUM(wad/1e18)\n    from makermcd.\"PROXY_ACTIONS_DSR_call_exit\"\n    where call_success = 'TRUE'\n) as \"dsr_deposits\""}
{"prompt": "This SQL query selects the distinct date and token symbol, and then calculates the sum of the \"redeem_amount_usd\" column over a partition of the token symbol, ordered by the date. Finally, it orders the result by the date and token symbol.", "completion": " SELECT distinct\ndate_trunc('week', block_time),\ntoken_symbol,\nsum(\"redeem_amount_usd\") over (partition by token_symbol order by date_trunc('week', block_time)) as cumulative_redeem\nFROM dune_user_generated.\"compound_view_redeem\"\nWHERE block_time > now() - interval '39 weeks' \n--GROUP BY 1,2, mint_amount_usd, block_time \nORDER BY 1,2;\n\n-- See data table examples:\n--SELECT * FROM dune_user_generated.\"compound_view_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_borrow\" when format is decided\n--SELECT * FROM dune_user_generated.\"compound_view_repay_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_repay_borrow\" when format is decided"}
{"prompt": "This query returns the top senders to a particular Ethereum account, ordered by the amount sent. The account address is specified in the query.", "completion": " SELECT \"from\", SUM(amount)\nFROM\n(\n\n(\nSELECT \"from\", \"to\", value/1e18 AS amount\nFROM ethereum.transactions tx\n WHERE \"to\" = '\\x1c47736f04c4B5962A48b0C43572046aDA04D4D5' --change address here\n AND success\n )\n\nUNION\n\n(SELECT \"from\", \"to\", value/1e18 AS amount\nFROM ethereum.\"traces\" tr\n WHERE \"to\" = '\\x1c47736f04c4B5962A48b0C43572046aDA04D4D5' --change address here\n AND tx_success)\n) AS \"all tx\"\nGROUP BY 1\nORDER BY 2  desc\n\n"}
{"prompt": "This SQL query returns data on the amount of money borrowed, repaid normally, and repaid through liquidation in the DAI currency on the Compound v1 platform, grouped by week.", "completion": " SELECT\n    date_trunc('week', tx.block_time) AS ddate,\n    SUM(c.amountBorrowed / 1e18) AS amountBorrowed,\n    SUM(c.amountRepaidNormally / 1e18) AS amountRepaidNormally,\n    SUM(c.amountRepaidByLiquidation / 1e18) AS amountRepaidByLiquidation\nFROM (\n    (SELECT \n      tx_hash,\n      asset,\n      amount AS amountBorrowed,\n      0 AS amountRepaidNormally,\n      0 AS amountRepaidByLiquidation\n     FROM compoundv1.\"MoneyMarket_evt_BorrowTaken\"\n    )\n  UNION\n    (SELECT \n      tx_hash,\n      asset,\n      0 AS amountBorrowed,\n      amount AS amountRepaidNormally,\n      0 AS amountRepaidByLiquidation\n     FROM compoundv1.\"MoneyMarket_evt_BorrowRepaid\"\n    )\n  UNION\n    (SELECT \n      tx_hash,\n      \"assetBorrow\" AS asset,\n      0 AS amountBorrowed,\n      0 AS amountRepaidNormally,\n      \"amountRepaid\" AS amountRepaidByLiquidation\n     FROM compoundv1.\"MoneyMarket_evt_BorrowLiquidated\"\n    )\n) c\nJOIN ethereum.transactions tx ON tx.hash = c.tx_hash\nWHERE asset = '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'\nGROUP BY ddate\nORDER BY ddate\n\n"}
{"prompt": "This query returns the number of contract deployments per month for the past year, as well as the total amount of gas used for those deployments.", "completion": " SELECT date_trunc('month', block_time),\ncount(*),\nSUM(gas_used * (\n            SELECT AVG(p.price)\n            FROM prices.layer1_usd p\n            WHERE p.symbol = 'ETH'\n            AND p.minute = date_trunc('minute', t.block_time)\n            LIMIT 1\n        )*0.000000001)\nFROM ethereum.traces t\nWHERE block_time >= now()::date - interval '1 year'\nAND block_time < date_trunc('month', NOW())\nAND type='create'\nAND tx_success = true\nGROUP BY 1;"}
{"prompt": "Please select all fields from the uniswap.\"Exchange_evt_EthPurchase\" table, limiting the result set to 100 rows.", "completion": " \n\n\nselect *\n FROM uniswap.\"Exchange_evt_EthPurchase\" e\n limit 100\n\n"}
{"prompt": "This query shows the total amount of gas used and the total fees paid in USD for all transactions in the past year, grouped by week. It also shows the cumulative total of fees paid over time.", "completion": " SELECT \ndate_trunc('week', t.block_time) as week,\nsum(gas_used) as gas_used_gas,\nsum(fees_$) as gas_used_$,\nsum(sum(fees_$)) over (order by date_trunc('week', t.block_time)) as cumulative_fees_$\nFROM \n    (SELECT\n    date_trunc('week', t.block_time) as week,\n    sum((cumulative_gas_used*gas_price*p.price)/1e18) as fees_$,\n    sum(cumulative_gas_used) as gas_used\n    FROM ethereum.\"transactions\" t\n    LEFT JOIN ethereum.\"receipts\" r ON t.hash = r.tx_hash\n    INNER JOIN prices.usd p ON p.minute = date_trunc('week', t.block_time)\n    WHERE p.symbol = 'WETH'\n    and t.block_time > now() - interval '365 days'\n    and t.success != 'false'\nGROUP BY 1\nORDER BY 1 desc)\nGROUP BY 1 \nORDER BY 1 desc\nLIMIT 10\n\n----\n\nSELECT \nfee_stuff.week,\nsum(gas_used) as gas_used_gas,\nsum(fees_$) as gas_used_$,\nsum(sum(fees_$)) over (order by date_trunc('week', fee_stuff.week)) as cumulative_fees_$\nFROM \n    (SELECT\n    date_trunc('week', t.block_time) as week,\n    sum((cumulative_gas_used*gas_price*p.price)/1e18) as fees_$,\n    sum(cumulative_gas_used) as gas_used\n    FROM ethereum.\"transactions\" t\n    LEFT JOIN ethereum.\"receipts\" r ON t.hash = r.tx_hash\n    INNER JOIN prices.usd p ON p.minute = date_trunc('week', t.block_time)\n    WHERE p.symbol = 'WETH'\n    and t.block_time > now() - interval '365 days'\n    and t.success != 'false'\n    GROUP BY 1\n    ORDER BY 1 desc) as fee_stuff \nGROUP BY 1 \nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This SQL query calculates the total pool liquidity for the Uniswap contract. It does this by summing up the ETH and token amounts from the \"Exchange_evt_AddLiquidity\", \"Exchange_evt_RemoveLiquidity\", \"Exchange_evt_TokenPurchase\", and \"Exchange_evt_EthPurchase\" events.", "completion": " WITH liquidity_added AS (\n    SELECT\n        SUM(eth_amount / (10^18)) as net_eth\n        , SUM(token_amount / (10^18)) as net_tkn\n    FROM uniswap.\"Exchange_evt_AddLiquidity\"\n    WHERE contract_address = '\\x2c4bd064b998838076fa341a83d007fc2fa50957'\n),\nliquidity_removed AS (\n    SELECT\n        -1 * SUM(eth_amount / (10^18)) as net_eth\n        , -1 * SUM(token_amount / (10^18)) as net_tkn\n    FROM uniswap.\"Exchange_evt_RemoveLiquidity\"\n    WHERE contract_address = '\\x2c4bd064b998838076fa341a83d007fc2fa50957'\n),\ntkn_bought AS (\n    SELECT\n        SUM(eth_sold / (10^18)) as net_eth\n        , -1 * SUM(tokens_bought / (10^18)) as net_tkn\n    FROM uniswap.\"Exchange_evt_TokenPurchase\"\n    WHERE contract_address = '\\x2c4bd064b998838076fa341a83d007fc2fa50957'\n),\neth_bought AS (\n    SELECT\n        -1 * SUM(eth_bought / (10^18)) as net_eth\n        , SUM(tokens_sold / (10^18)) as net_tkn\n    FROM uniswap.\"Exchange_evt_EthPurchase\"\n    WHERE contract_address = '\\x2c4bd064b998838076fa341a83d007fc2fa50957'\n),\nall_events AS (\n    SELECT *\n    FROM liquidity_added\n    UNION\n    SELECT *\n    FROM liquidity_removed\n    UNION\n    SELECT *\n    FROM tkn_bought\n    UNION\n    SELECT *\n    FROM eth_bought\n)\nSELECT\n    SUM(net_eth) as eth_in_pool\n    , SUM(net_tkn) as tkn_in_pool\nFROM all_events\n"}
{"prompt": "This query will return the hex ID, name, and date for the 'New Query' makermcd.", "completion": " hex.\"Hmakermcd.\"DAI_call_pull\"makermcd.\"DAI_call_move\"EX_call_dailyData\""}
{"prompt": "This SQL query returns the number of distinct wallets that made trades with the Coinbase wallet in a given month, as well as the sum of USD amounts traded. The data is grouped by month, in descending order.", "completion": " SELECT\n    date_trunc('month', block_time) as month,\n    count(distinct tx_from) as coinbase_wallet_users,\n    sum(usd_amount) as coinbase_wallet_volume\nFROM dex.\"trades\"\nWHERE \"tx_to\" = '\\xe66B31678d6C16E9ebf358268a790B763C133750'\nAND category = 'Aggregator'\nGROUP BY 1\nORDER BY 1 desc"}
{"prompt": "This SQL query returns a list of all executed trades on the Gnosis Protocol BatchExchange, including the trade details and links to the corresponding Ethereum transactions.", "completion": " -- Note: this query does not yet include reverted trades. \n\nWITH dfusion_tokens as (\n        SELECT\n            ROW_NUMBER() OVER (ORDER BY transactions.block_number, transactions.index) as token_id,\n            CONCAT('0x', ENCODE(tokens.token, 'hex')) as token_address,\n            erc20.symbol,\n            erc20.decimals\n        FROM gnosis_protocol.\"BatchExchange_call_addToken\" tokens\n        JOIN ethereum.\"transactions\" transactions\n          ON transactions.hash=tokens.call_tx_hash\n          AND transactions.success=true\n        JOIN erc20.\"tokens\" as erc20\n          ON erc20.contract_address = tokens.token\n    UNION all\n        SELECT\n        0 as token_id,\n        '\\x1a5f9352af8af974bfc03399e3767df6370d82e4' as token_address,\n        'OWL' as symbol,\n        18 as decimals \n    )\nSELECT\n    \"batchId\",\n    \"block_time\", \n    \"orderId\",\n    dfusion_tokens_sell.\"symbol\" as \"sellToken\",\n    \"executedSellAmount\"/10^(dfusion_tokens_sell.\"decimals\") as \"sellAmount\",\n    dfusion_tokens_buy.\"symbol\" as \"buyToken\",\n    \"executedBuyAmount\"/10^(dfusion_tokens_buy.\"decimals\") as \"buyAmount\",\n    ((\"executedBuyAmount\"/10^(dfusion_tokens_buy.\"decimals\"))/(\"executedSellAmount\"/10^(dfusion_tokens_sell.\"decimals\"))) as Price,\n    CONCAT('0x', ENCODE(trades.\"owner\", 'hex')) as trader,\n    CONCAT('https://etherscan.io/tx/','0x', ENCODE(trades.\"evt_tx_hash\", 'hex')) as Solution_tx_Link\nFROM gnosis_protocol.\"BatchExchange_evt_Trade\" trades\nJOIN ethereum.\"transactions\" transactions\n  ON transactions.hash=trades.evt_tx_hash\n  AND transactions.success=true\nJOIN gnosis_protocol.\"BatchExchange_call_submitSolution\" solution\nON solution.call_tx_hash=transactions.hash\nJOIN gnosis_protocol.\"BatchExchange_evt_OrderPlacement\" orders\nON orders.index=trades.\"orderId\"\nAND orders.owner=trades.owner\nleft outer JOIN dfusion_tokens dfusion_tokens_sell \nON orders.\"sellToken\" = dfusion_tokens_sell.token_id\nleft outer JOIN dfusion_tokens dfusion_tokens_buy\nON orders.\"buyToken\" = dfusion_tokens_buy.token_id\nORDER BY \"block_time\" desc;"}
{"prompt": "This SQL query will select the date and time that a particular token was traded, the symbol for that token, and the average price of that token during that time period.", "completion": " SELECT date_trunc('w', time), symbol, avg(average) FROM coincap.\"tokens/usd\" group by 1, 2;"}
{"prompt": "This SQL query returns the sum of \"fromAmount\" in OneInchExchange_evt_Swapped table, grouped by \"fromToken\". The result is sorted in descending order.", "completion": " SELECT SUM(\"fromAmount\"/1e18),\n       \"fromToken\"\nFROM oneinch.\"OneInchExchange_evt_Swapped\"\nGROUP BY 2\nORDER BY 1 DESC;"}
{"prompt": "This SQL query returns a list of all Dapper contracts sorted by the number of transactions.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\xa78bbf97033e534c54b0a4fa62aa77b652ae4097', '\\xab76c6d00c603a7615d5459132c1745eb1fb4f6c') -- Dapper  WalletFactories \n\tand type = 'create'\n),\nperaddress as (\n    select w.address as address, count(distinct el.tx_hash) as transactions\n    from ethereum.logs el\n    join ethereum.blocks eb \n    \ton el.block_number = eb.\"number\"\t\n    join wallets w\n        on w.address = el.contract_address\n    where topic1 = '\\x101214446435ebbb29893f3348e3aae5ea070b63037a3df346d09d3396a34aee' -- InvokeSuccess event\n    group by 1)\nselect ROW_NUMBER() OVER(ORDER BY transactions desc) AS n, concat('https://etherscan.io/address/0',right(text(address),41)) as address, transactions\nfrom peraddress\norder by transactions desc"}
{"prompt": "This query returns the total fees collected by Uniswap in USD over the past year, broken down by month.", "completion": " SELECT date_trunc('months', tx.block_time) AS Date,\n       SUM(eth/1e18*p.price*0.003) AS fees,\n       SUM (SUM(eth/1e18*p.price*0.003)) OVER (ORDER BY date_trunc('months', tx.block_time)) AS TOTAL\nFROM (\n        (SELECT evt_tx_hash,\n                eth_sold AS eth\n         FROM uniswap.\"Exchange_evt_TokenPurchase\")\n      UNION ALL\n        (SELECT evt_tx_hash,\n                eth_bought AS eth\n         FROM uniswap.\"Exchange_evt_EthPurchase\")) ether\nINNER JOIN\n  (SELECT hash,\n          block_time\n   FROM ethereum.transactions tx\n   WHERE tx.block_time > now() - interval '365 days'\n     AND block_time < date_trunc('minute', NOW())) tx ON ether.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 DESC;"}
{"prompt": "This SQL query returns the date, evt_tx_hash, and gas_price_gwei for all iToken_evt_Burn events that occurred on the Ethereum blockchain between 2/01/20 and 2/20/20. The results are sorted by date in descending order and limited to 2000 events.", "completion": " SELECT\ndate_trunc('minute', block_time) as minute,\nevt_tx_hash,\ngas_price/1e9 as gas_price_gwei\nFROM fulcrum.\"iToken_evt_Burn\"\nINNER JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nand block_time < '2/20/20' \nand block_time > '2/01/20'\nGROUP BY 1,2,3\nORDER BY 1 desc\nLIMIT 2000"}
{"prompt": "This query returns the number of \"Safe for Teams\" created each day, grouped by day, for the past 75 days.", "completion": " SELECT block_time::date as day, count(*) as \"Safe for Teams created\"\nFROM gnosis_safe.\"Safev1.0.0_call_setup\" safe\nINNER JOIN (SELECT hash, block_time FROM ethereum.transactions tx\n                WHERE tx.block_time > now() - interval '75 days') tx\nON safe.call_tx_hash = tx.hash\nWHERE array_length(_owners, 1) < 3 or array_length(_owners, 1) > 4\ngroup by day\norder by day desc\nLIMIT 1000"}
{"prompt": "The SQL query will return the number of trades from the Kyber network that took place in the past week.", "completion": " SELECT COUNT(*) FROM kyber.\"Network_evt_KyberTrade\" t\nINNER JOIN ethereum.transactions tx ON t.tx_hash = tx.hash\nWHERE tx.block_time > date_trunc('week', current_date)::date - 7 \nAND tx.block_time < date_trunc('week', current_date)::date"}
{"prompt": "This query returns the following data:\n\n- The symbols of the tokens being sold and bought\n- The date of the transaction\n- The price of the transaction\n- The minimum and maximum prices\n- The volume of tokens being sold and bought", "completion": " SELECT\n    sell_token.\"symbol\" as \"sellToken\",\n    buy_token.\"symbol\" as \"buyToken\",\n    date(transactions.block_time) as DAY,\n    SUM(\"executedBuyAmount\") / SUM(\"executedSellAmount\") / 10^(buy_token.\"decimals\" - sell_token.\"decimals\") as \"price\",\n    MIN(\"executedBuyAmount\" / \"executedSellAmount\" / 10^(buy_token.\"decimals\" - sell_token.\"decimals\")),\n    SUM(\"executedSellAmount\") / 10^sell_token.\"decimals\" as sell_volume,\n    SUM(\"executedBuyAmount\") / 10^buy_token.\"decimals\" as buy_volume\nFROM gnosis_protocol.\"BatchExchange_evt_Trade\" trades\nJOIN gnosis_protocol.\"view_tokens\" buy_token\n    ON trades.\"buyToken\" = buy_token.\"token_id\"\nJOIN gnosis_protocol.\"view_tokens\" sell_token\n    ON trades.\"sellToken\" = sell_token.\"token_id\"\nJOIN ethereum.\"transactions\" transactions\n    ON transactions.hash = trades.evt_tx_hash\n    AND transactions.success = true\nWHERE \n    0=0\n    -- AND trades.\"buyToken\" = 15\n    AND sell_token.\"symbol\" = 'SNX'\n    AND buy_token.\"symbol\" = 'WETH'\n    -- \nGROUP BY\n    sell_token.\"symbol\",\n    buy_token.\"symbol\",\n    buy_token.\"decimals\",\n    sell_token.\"decimals\",\n    date(transactions.block_time)\nORDER BY \n    buy_token.\"symbol\",\n    sell_token.\"symbol\",\n    date(transactions.block_time) desc;"}
{"prompt": "This query returns the number of new contracts created each week.", "completion": " SELECT date_trunc('week', block_time), count(*)\nFROM ethereum.receipts\nWHERE contract_address IS NOT NULL\nGROUP BY 1;"}
{"prompt": "This SQL query returns the number of distinct borrowers per day from the Fulcrum iToken event and orders it from most recent to least recent.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\ncount(distinct borrower) as borrowers\nFROM fulcrum.\"iToken_evt_Borrow\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 60"}
{"prompt": "This SQL query returns the total USD volume for the past week from the uniswap and ethereum databases. The query groups the data by date and orders it by ascending date.", "completion": " SELECT date_trunc('week', tx.block_time) as Date,\n       SUM(eth/1e18 * p.average) as \"USD volume\"\nFROM ((SELECT tx_hash, eth_sold AS eth FROM uniswap.\"Exchange_evt_TokenPurchase\")\n      UNION\n        (SELECT tx_hash, eth_bought AS eth FROM uniswap.\"Exchange_evt_EthPurchase\")) ether\nINNER JOIN ethereum.transactions tx ON ether.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" p ON date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\nWHERE tx.block_time > now() - interval '1 week'\nAND p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This query calculates the total USD spent on ENS transactions, both primary and secondary, over time. It does this by first calculating the ETH spent on each type of transaction, then multiplying that by the average ETH/USD price for each day. Finally, it sums the total USD spent on each type of transaction over time.", "completion": " WITH ens1 AS (SELECT date_trunc ('day', tx.block_time) date, SUM (tx.value/1e18) eth_spent\n                FROM ethereumnameservice.\"ENSRegistry_evt_NewOwner\" r\n                LEFT JOIN ethereum.transactions tx\n                ON tx.hash = r.evt_tx_hash\n                GROUP BY 1),\n    ens2 AS (SELECT date_trunc ('day', tx.block_time) date, SUM (tx.value/1e18) eth_spent\n                FROM ethereumnameservice.\"ENSRegistry_evt_Transfer\" r\n                LEFT JOIN ethereum.transactions tx\n                ON tx.hash = r.evt_tx_hash\n                GROUP BY 1),\n    price1 AS (SELECT date_trunc ('day', minute) date, AVG (price) avg_price_eth_usd\n                    FROM prices.layer1_usd_eth\n                    GROUP BY 1)\n\nSELECT ens1.date,\n        SUM (ens1.eth_spent * price1.avg_price_eth_usd) OVER (ORDER BY ens1.date) AS cumulative_usd_spend_primary,\n        SUM (ens2.eth_spent * price1.avg_price_eth_usd) OVER (ORDER BY ens2.date) AS cumulative_usd_spend_secondary\nFROM ens1\nJOIN price1\nON ens1.date = price1.date\nJOIN ens2\nON ens2.date = price1.date"}
{"prompt": "This SQL query shows the total amount of each token that has been minted or burned in a day, grouped by token.", "completion": " WITH mapping (contract_address, symbol) AS (VALUES \n('\\x1cc9567ea2eb740824a45f8026ccf8e46973234d'::bytea, 'KNC'),\n('\\x77f973fcaf871459aa58cd81881ce453759281bc'::bytea, 'WETH'),\n('\\x14094949152eddbfcd073717200da82fed8dc960'::bytea, 'SAI'),\n('\\xf013406a0b1d544238083df0b93ad0d2cbe0f65f'::bytea, 'USDC'),\n('\\xa8b65249de7f85494bc1fe75f525f568aa7dfa39'::bytea, 'BAT')\n --- ADD MORE HERE\n), burn AS (\nSELECT\n    date_trunc('day', block_time) as day,\n    p.symbol,\n    (-\"assetAmount\"/10^tokens.decimals)*p.price as amt\nFROM fulcrum.\"iToken_evt_Burn\" m\nINNER JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nINNER JOIN mapping map ON m.contract_address = map.contract_address\nINNER JOIN erc20.tokens on tokens.symbol = map.symbol\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time) AND p.symbol = map.symbol\n), \nmint AS (\nSELECT\n    date_trunc('day', block_time) as day,\n    p.symbol,\n    (\"assetAmount\"/10^tokens.decimals)*p.price as amt\nFROM fulcrum.\"iToken_evt_Mint\" m\nINNER JOIN ethereum.\"transactions\" tx \nON evt_tx_hash = tx.hash\nINNER JOIN mapping map ON m.contract_address = map.contract_address\nINNER JOIN erc20.tokens on tokens.symbol = map.symbol\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time) AND p.symbol = map.symbol\n)\nSELECT day, symbol,  SUM(amt)\nFROM (SELECT * FROM mint UNION SELECT * FROM burn) s\nGROUP BY 1, 2;"}
{"prompt": "This SQL query returns the total amount of ETH output from the fairwin contract, grouped by address. The query orders the results by the total amount of ETH output.", "completion": " SELECT sum(value / 1e18) AS total_out,\n       t.\"to\"\nFROM ethereum.traces t\nWHERE t.gas_used = 0\n  AND t.\"from\" = '\\x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c'\n  AND t.tx_success = TRUE\nGROUP BY t.\"to\"\nORDER BY total_out desc"}
{"prompt": "This query returns the total USD value and number of trades for each day in the past {{ days }} days for the OasisDex decentralized exchange.", "completion": " \nSELECT date_trunc('day', block_time) AS day,\n    SUM((dai)/1e18 * p.price) AS usd,\n    count(1) AS trades\nFROM (\n    (SELECT evt_tx_hash, buy_amt AS dai FROM oasisdex.\"eth2dai_evt_LogTrade\"\n      WHERE buy_gem = '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'\n         OR buy_gem = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n    )\n    UNION\n    (SELECT evt_tx_hash, pay_amt AS dai FROM oasisdex.\"eth2dai_evt_LogTrade\"\n      WHERE pay_gem = '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'\n         OR pay_gem = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n    )\n) dai\nINNER JOIN ethereum.transactions txs ON dai.evt_tx_hash = txs.hash \nINNER JOIN prices.usd_6b175474e89094c44da98b954eedeac495271d0f p ON p.minute = date_trunc('minute', block_time)\nWHERE block_time >= date_trunc('day', now()) - interval '{{ days }} days'\n  AND block_time < date_trunc('day', now())\n--  WHERE txs.hash = '\\xfd161f9ba8fcd77cdd266cab88e0fcec091d251fe26bdb26f00e99f70e727679'\nGROUP BY 1\n\n\n-- SELECT *\n--   FROM prices.usd_6b175474e89094c44da98b954eedeac495271d0f p\n--  WHERE p.minute = (SELECT max(minute)\n--     FROM prices.usd_6b175474e89094c44da98b954eedeac495271d0f)\n    "}
{"prompt": "This SQL query returns the total USD volume for each project on a monthly basis. The data is filtered to only include trades that occurred after January 1st, 2019 and that are categorized as being from the DEX. The data is then grouped by project and month.", "completion": " SELECT  project,                        \n        date_trunc('month', block_time),\n        SUM(usd_amount) as usd_volume                                                                             \nFROM dex.\"trades\" t                                                                             \nWHERE block_time > '2019-01-01'\nAND category = 'DEX'\n--AND block_time < date_trunc('month', Now()) -- This line can be added in case you only want to see full months\nGROUP BY 1, 2\n;"}
{"prompt": "This SQL query will show all Gnosis Safe transactions with a value of 10 ETH or more from the last week, ordered by the time the transaction was made.", "completion": " -- TODO: change dbt_jeff_safe_ethereum.eth_transfers --> safe_ethereum.eth_transfers after 22.08.2022\n\nselect \n\tblock_time as time,\n\tconcat('<a href=\"https://etherscan.io/tx/', tx_hash,'\">', tx_hash, '</a>') as tx_hash, \n\tconcat('<a href=\"https://etherscan.io/address/', address,'\">', address, '</a>') as address, \n\tamount_raw / 1e18 as eth_value\nfrom dbt_jeff_safe_ethereum.eth_transfers\nwhere block_time > CURRENT_DATE - interval '7 days'\n    and abs(amount_raw) >= 10e18 -- more than 10ETH\norder by block_time desc\n"}
{"prompt": "This query returns information on the tokens that are available on the BatchExchange, including the token ID, the token address, the token symbol, the number of decimals for the token, and the date that the token was added.", "completion": " WITH \ntoken_names as (\n        SELECT * FROM (VALUES\n            (14, 'aDAI', 18),\n            (17, 'PAXG', 18)\n        ) as t (token_id, symbol, decimals)\n    ), tokens as (\n        SELECT\n            ROW_NUMBER() OVER (ORDER BY transactions.block_number, transactions.index) as token_id,\n            tokens.token,\n            erc20.symbol,\n            erc20.decimals,\n            transactions.block_time as add_date\n        FROM gnosis_protocol.\"BatchExchange_call_addToken\" tokens\n        JOIN ethereum.\"transactions\" transactions\n          ON transactions.hash=tokens.call_tx_hash\n          AND transactions.success=true\n        LEFT OUTER JOIN erc20.\"tokens\" as erc20\n          ON erc20.contract_address = tokens.token\n    )\n    SELECT\n        tokens.token_id,\n        tokens.token,\n        COALESCE(tokens.symbol, token_names.symbol) as symbol,\n        COALESCE(tokens.decimals, token_names.decimals) as decimals,\n        tokens.add_date\n    FROM tokens\n    LEFT OUTER JOIN token_names\n        ON tokens.token_id = token_names.token_id\n    UNION all (\n        SELECT\n            0 as token_id,\n            '\\x1a5f9352af8af974bfc03399e3767df6370d82e4' as token_address,\n            'OWL' as symbol,\n            18 as decimals,\n            '2020-01-23 20:30:00.000' as add_date\n    )"}
{"prompt": "This SQL query calculates the sum of all Kyber trades made in a given week, denominated in US dollars. The query joins data from the Kyber Network trade events table, the Ethereum transactions table, and the CoinCap price data table. The price data is filtered to only include the price of WETH (Ethereum's native token) in US dollars. The query groups the data by week, in order to calculate the total volume traded in each week. Finally, the data is ordered by the week it was traded in.", "completion": " SELECT date_trunc('week', tx.block_time),\n       SUM(\"ethWeiValue\" / 1e18 * price.average)\nFROM kyber.\"Network_evt_KyberTrade\" t\nINNER JOIN ethereum.transactions tx ON t.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = price.time\nWHERE price.symbol = 'WETH'\nAND tx.block_time < date_trunc('week', current_date)::date\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "The query returns all columns from the addr table.", "completion": " WITH addr(stage, users) AS (VALUES ('see', 16), ('test', 8), ('use', 3))\n\nSELECT * FROM addr"}
{"prompt": "This query will return the _id and name fields for all documents in the collection.", "completion": " "}
{"prompt": "This query returns the amount of USDC minted each month.", "completion": " -- USDC contract address: 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\n-- SELECT \n--     -- block_time,\n--     SUM(bytea2numeric(\"data\")/1e6) as \"amount\",\n--     (CASE \n--         WHEN \"topic2\"='\\x0000000000000000000000000000000000000000000000000000000000000000' THEN 'mint'\n--         WHEN \"topic3\"='\\x0000000000000000000000000000000000000000000000000000000000000000' THEN 'burn'\n--         ELSE 'other'\n--     END) as \"tx_type\"\n--     -- tx_hash\n-- FROM ethereum.\"logs\"\n-- WHERE \"contract_address\"='\\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'\n-- AND \"topic1\"='\\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'   -- func signature\n-- AND (\"topic2\"= '\\x0000000000000000000000000000000000000000000000000000000000000000' -- from address is null\n-- OR \"topic3\"='\\x0000000000000000000000000000000000000000000000000000000000000000')   -- to address is null\n-- -- ORDER BY \"block_time\" DESC\n-- GROUP BY \"tx_type\"\n-- LIMIT 100\n\nSELECT \n    SUM(bytea2numeric(\"data\")/1e6) as \"amount\",\n    date_trunc('month',\"block_time\") as \"month\"\n    -- \"tx_hash\"\nFROM ethereum.\"logs\"\nWHERE \"contract_address\"='\\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'\nAND \"topic1\" = '\\xab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8' -- Mint (index_topic_1 address minter, index_topic_2 address to, uint256 amount)\nGROUP BY \"month\"\nORDER BY \"month\""}
{"prompt": "This SQL query calculates the total amount of ETH that has been signed over time, grouped by day.", "completion": " SELECT\n    ddate,\n    SUM(eth_signed / 10^18) OVER(ORDER BY ddate ROWS UNBOUNDED PRECEDING)\nFROM\n(SELECT\n    date_trunc('day', tx.block_time) AS ddate,\n    SUM(eth_signed) AS eth_signed\n FROM (\n    (SELECT tx_hash, eth_amount AS eth_signed\n     FROM uniswap.\"TKNExchange_evt_AddLiquidity\")\n    UNION\n    (SELECT tx_hash, -eth_amount AS eth_signed\n     FROM uniswap.\"TKNExchange_evt_RemoveLiquidity\")\n    UNION\n    (SELECT tx_hash, eth_sold AS eth_signed\n     FROM uniswap.\"TKNExchange_evt_TokenPurchase\")\n    UNION\n    (SELECT tx_hash, -eth_bought AS eth_signed\n     FROM uniswap.\"TKNExchange_evt_EthPurchase\")\n    ) AS events\n JOIN ethereum.transactions tx ON events.tx_hash = tx.hash\n GROUP BY ddate\n) AS foo2\nORDER BY ddate"}
{"prompt": "This query returns the total amount of ETH added to each Uniswap market over the past week, sorted by the amount of ETH added.", "completion": " WITH add AS \n(SELECT s.symbol as Market,\n        SUM(eth_amount / 1e18)\nFROM uniswap.\"Exchange_evt_AddLiquidity\" AS add_liq\nINNER JOIN ethereum.transactions tx ON add_liq.tx_hash = tx.hash\nINNER JOIN uniswap.\"Factory_call_getExchange\" f ON add_liq.tx_hash = f.tx_hash\nINNER JOIN coincap.\"symbols\" s ON f.token = s.asset\n\nWHERE tx.block_time > now() - interval '1 week'\nAND tx.success = true\nGROUP BY 1\nORDER BY 2 DESC)\n\nSELECT * \nFROM add"}
{"prompt": "This SQL query returns the sum of borrowAmount in DAI for each day, truncated to the nearest day. It also orders the results by descending order of date.", "completion": " -- Table of DailyBorrows of DAI\n\n\nSELECT sum(\"borrowAmount\"/ 1e18) AS DailyBorrow, date_trunc('day', tx.block_time) \nFROM compoundv2.\"cErc20_evt_Borrow\" borrowing, ethereum.transactions tx\nWHERE address = '\\xf5dce57282a584d2746faf1593d3121fcac444dc'\nAND borrowing.tx_hash = tx.hash\nGROUP BY 2\nORDER BY 2 DESC"}
{"prompt": "This query returns the number and amount of \"Hero Gacha Pack\" items given out each day by the \"from\" address.", "completion": " select date_trunc('day', evt_block_time) as \"\uc77c\uc790\",\n       count(\"value\") as \"\uac74\uc218(tx\uc758 \uac74\uc218)\",\n       sum(\"value\") as \"\uc218\ub7c9(Pack\uc758 \uc218\ub7c9)\"\n--22.07.11. \ubbfc\ud305\uc758 \uacbd\uc6b0\ub9cc \ub098\uc624\ub294 \ud14c\uc774\ube14 \ud655\uc778\nfrom erc1155.\"ERC1155_evt_TransferSingle\"\nwhere 1 = 1 \n  --DESPERADO B218 - Hero Gacha Pack\n  and contract_address = '\\x46F9fFF0252375DfE38f8E79C4983f85Cc6E29ea' \n  --\ubbfc\ud305\n  and \"from\" = '\\x0000000000000000000000000000000000000000' \n  --burn \uc81c\uc678\n  and \"to\" <> '\\x0000000000000000000000000000000000000000'\ngroup by 1\norder by 1;"}
{"prompt": "This SQL query returns the total volume of Bancor conversions over the last 7 days, grouped by day. The volume is calculated by taking the output amount of each conversion, divided by 10^decimals (the number of decimal places of the token being converted to), and multiplying it by the price of the token in USD.", "completion": " SELECT date_trunc('day', evt_block_time),\nSUM((\"outputAmount\")/10^decimals * p.price) as volume\nFROM bancor.\"BancorConverterWithFee_evt_Conversion\" b\nLEFT JOIN prices.usd p ON p.minute = date_trunc('minute', evt_block_time) AND p.contract_address = \"toToken\"\nLEFT JOIN erc20.tokens erc ON erc.contract_address = \"toToken\"\nWHERE evt_block_time > now() - interval '7 days'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns the total amount of ETH sent from Upbit1's hot/cold wallet in each week, as well as the number of transactions made in that week. The data is ordered by week, with the most recent week first.", "completion": " SELECT sum(value/1e18) AS total_eth,\n       date_trunc('week', block_time) AS \"ym\",\n       count(*) as total_tx_out\nFROM ethereum.transactions\nWHERE \"from\" = '\\x390de26d772d2e2005c6d1d24afc902bae37a4bb' /* Upbit 1 */\nGROUP BY \"ym\"\nORDER BY \"ym\" ASC"}
{"prompt": "This SQL query shows the total ETH volume exchanged for DIP (Etherisc) per year on Idex, grouped by year.", "completion": " SELECT date_trunc('year', tx.block_time) as Date, SUM((eth)) as \"ETH volume\"\nFROM ((SELECT call_tx_hash, \"tradeValues\"[1]/1e18 AS eth FROM idex.\"IDEX1_call_trade\"\n        WHERE \"tradeAddresses\"[2] = '\\xc719d010b63e5bbf2c0551872cd5316ed26acd83')\n        UNION\n        (SELECT call_tx_hash, \"tradeValues\"[2]/1e18 AS eth FROM idex.\"IDEX1_call_trade\"\n        WHERE \"tradeAddresses\"[1] = '\\xc719d010b63e5bbf2c0551872cd5316ed26acd83')) total\n\n    INNER JOIN (SELECT hash, block_time FROM ethereum.transactions tx\n                WHERE tx.block_time > now() - interval '24 months'\n                AND block_time < date_trunc('week', NOW())) tx\n    ON total.call_tx_hash = tx.hash\nINNER JOIN prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "The SQL query will return the number of accounts created on the Loopring DEXBetaV1.", "completion": " SELECT COUNT(*)\nFROM loopring.\"DEXBetaV1_evt_AccountCreated\" e;"}
{"prompt": "This SQL query selects all data from the \"MultiSigWalletWithDailyLimit_evt_Execution\" table where the contract_address is equal to '\\x3d1df1A816577A62Db61281f673C4f43aE063490'. The data is ordered by the \"transactionId\" column in descending order.", "completion": " select t.*\nfrom gnosis.\"MultiSigWalletWithDailyLimit_evt_Execution\" t\nwhere contract_address = '\\x3d1df1A816577A62Db61281f673C4f43aE063490'\norder by t.\"transactionId\" desc;"}
{"prompt": "This query returns the volume of BancorNetwork_v1_evt_Conversion events that have occurred in the past 7 days, grouped by day.", "completion": " SELECT date_trunc('day', tx.block_time),\nSUM((\"_toAmount\")/10^decimals * p.price) as volume\nFROM bancor.\"BancorNetwork_v1_evt_Conversion\" b\nLEFT JOIN ethereum.transactions tx ON b.evt_tx_hash = tx.hash \nLEFT JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time) AND p.contract_address = \"_toToken\"\nLEFT JOIN erc20.tokens erc ON erc.contract_address = \"_toToken\"\nWHERE tx.block_time > now() - interval '7 days'\nGROUP BY 1\nORDER BY 1\n"}
{"prompt": "This query returns a list of the top fulfillers, as well as the amount of Dai they have earned.", "completion": " SELECT fulfiller,\n       sum(dai_reward) AS amount_earned\nFROM\n  (SELECT fulfiller,\n          dai_reward\n   FROM erasure_bay.\"view_finalize\" f\n   INNER JOIN erasure_bay.\"view_deposit_stake\" d ON f.contract_address = d.contract_address\n   INNER JOIN erasure_bay.\"view_request_data\" r ON f.contract_address = r.contract_address\n   UNION ALL SELECT staker AS fulfiller, -dai_amount AS dai_reward\n   FROM erasure_bay.\"view_burn\") AS table1\nGROUP BY fulfiller\nORDER BY amount_earned DESC"}
{"prompt": "The SQL query will return the date and the sum of ETH sold or bought in USD volume for the past 8 weeks.", "completion": " SELECT date_trunc('week', ether.block_time) as Date,\n       SUM(eth/1e18 * p.price) as \"USD volume\"\nFROM ((SELECT evt_tx_hash, eth_sold AS eth, block_time  FROM uniswap.\"Exchange_evt_TokenPurchase\" pur\n        LEFT JOIN (SELECT hash,\n             block_time\n      FROM ethereum.transactions\n      WHERE block_time > now() - interval '8 weeks'\n        AND block_time < date_trunc('week', NOW())) tx\n        ON pur.evt_tx_hash = tx.hash)\n      UNION\n        (SELECT evt_tx_hash, eth_bought AS eth, block_time  FROM uniswap.\"Exchange_evt_EthPurchase\" pur\n        LEFT JOIN\n            (SELECT hash, block_time FROM ethereum.transactions\n            WHERE block_time > now() - interval '8 weeks'\n            AND block_time < date_trunc('week', NOW())) tx\n        ON pur.evt_tx_hash = tx.hash)\n        ) ether\nLEFT JOIN prices.usd p ON p.minute = date_trunc('minute', ether.block_time)\nWHERE p.symbol = 'ETH'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns the number of unique lenders and borrowers for each week over the past 40 weeks.", "completion": " WITH supply AS\n(\nSELECT\ndate_trunc('week', block_time) as week,\ncount(distinct \"minter\") as lenders FROM fulcrum.\"iToken_evt_Mint\" s\nLEFT JOIN ethereum.\"transactions\" tx on s.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 40),\n\nborrow AS \n(\nSELECT\ndate_trunc('week', block_time) as week,\ncount(distinct \"borrower\") as borrowers FROM fulcrum.\"iToken_evt_Borrow\" b\nLEFT JOIN ethereum.\"transactions\" tx on b.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 40)\n\nSELECT supply.\"week\",sum(\"lenders\") as lenders,sum(\"borrowers\") as borrowers\nFROM supply\nLEFT JOIN borrow ON supply.week = borrow.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 40\n"}
{"prompt": "This SQL query returns the number of trades that have been made.", "completion": " SELECT count(*) FROM trades;"}
{"prompt": "This SQL query returns the number of distinct DAI senders.", "completion": " SELECT \n\nCOUNT(DISTINCT src) AS senders\n             \n      FROM maker.\"SAI_evt_Transfer\" t\n      "}
{"prompt": "This query returns the block time, value in ETH, and value in USD for all transactions involving a specific art contract.", "completion": " SELECT block_time,\n       value / 1e18 / 0.85 AS eth_price,\n       value / 1e18 / 0.85 * price AS usd_price\nFROM ethereum.\"traces\" tr\nINNER JOIN prices.\"layer1_usd_eth\" p ON date_trunc('minute', tr.block_time) = p.minute\nWHERE tx_hash IN\n    (SELECT evt_tx_hash\n     FROM erc721.\"ERC721_evt_Transfer\"\n     WHERE contract_address = '\\xb932a70a57673d89f4acffbe830e8ed7f75fb9e0'\n       AND \"from\" = '\\xe1e1ca1bc76f25fe9696274d8bdb9516498c021e')\n  AND \"to\" = '\\xe1e1ca1bc76f25fe9696274d8bdb9516498c021e'\nORDER BY 2 DESC"}
{"prompt": "This SQL query returns the monthly Uniswap volume in USD. The query uses the prices.usd table to convert the ETH volume to USD. The query filters for transactions that have occurred in the past 6 months and groups the results by month.", "completion": " SELECT date_trunc('month', ether.block_time) as Date,\n       SUM(eth/1e18 * p.price) as \"USD volume\"\nFROM ((SELECT evt_tx_hash, eth_sold AS eth, block_time  FROM uniswap.\"Exchange_evt_TokenPurchase\" pur\n        LEFT JOIN (SELECT hash,\n             block_time\n      FROM ethereum.transactions\n      WHERE block_time > date_trunc('month', NOW()) - interval '6 months'\n        AND block_time < date_trunc('month', NOW())) tx\n        ON pur.evt_tx_hash = tx.hash)\n      UNION\n        (SELECT evt_tx_hash, eth_bought AS eth, block_time  FROM uniswap.\"Exchange_evt_EthPurchase\" pur\n        LEFT JOIN\n            (SELECT hash, block_time FROM ethereum.transactions\n            WHERE block_time > date_trunc('month', NOW()) - interval '6 months'\n            AND block_time < date_trunc('month', NOW())) tx\n        ON pur.evt_tx_hash = tx.hash)\n        ) ether\nLEFT JOIN prices.usd p ON p.minute = date_trunc('minute', ether.block_time)\nWHERE p.symbol = 'ETH'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This query returns the total USD value of all ERC20 bets made in the last 24 hours, grouped by hour and token.", "completion": " WITH data as (\nSELECT \ndate_trunc('hour', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ncase \nwhen t.symbol= 'WETH' THEN e.value/1e18 * p_weth.price\nWHEN t.symbol = 'DAI' THEN e.value/1e18\nend\nas usd_value,\nt.symbol,\ne.evt_tx_hash\n-- p_weth.price as  curr_weth_price,\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\nJOIN prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 p_weth on (p_weth.symbol = t.symbol AND p_weth.minute = date_trunc('minute', tx.block_time))\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n\nUNION (\nSELECT \ndate_trunc('hour', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ne.value/1e18 as usd_value,\nt.symbol,\ne.evt_tx_hash\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\n-- AND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n)\n)\n\nSELECT data.datetime, sum(usd_value) as total_usd_value, data.symbol\nFROM data \nWHERE date_trunc('hour', tx.block_time) >= date_trunc('hour', now() - interval '24' hour\t)\nGROUP BY 1, 3\n"}
{"prompt": "This query returns the total amount of Dai that was successfully swapped for Sai.", "completion": " SELECT SUM(wad)/1e18 AS sum FROM makermcd.\"ScdMcdMigration_call_swapDaiToSai\" a\nWHERE call_success = TRUE"}
{"prompt": "This query finds the borrower, interest rate, symbol, and transaction hash for the top 5 positions in the Fulcrum lending platform.", "completion": " WITH fulcrum as \n(\nSELECT * FROM\nfulcrum.\"iToken_evt_Borrow\" f\nJOIN \nerc20.\"tokens\" e on e.contract_address = f.contract_address\n)\n\nSELECT \nborrower,\n-- fulcrum.borrowAmount, --needs cases\ninterestRate/1e18 as InterestRateAPY,\n -- convert to Token Collateral\\\n-- tradeTokenToFillAddress as denominationToken, -- convert to symbol\nsymbol as position_symbol,\nevt_tx_hash\n\nFROM fulcrum\n\n-- JOIN \n-- erc20.\"tokens\" er on er.contract_address = f.collateralTokenAddress\n-- JOIN \n-- erc20.\"tokens\" erc on f.tradeTokenToFillAddress = erc.contract_address \nLimit 5"}
{"prompt": "This SQL query retrieves all transactions from the Ethereum blockchain that involve the account 'x89a6D1ed2643A72DC50b71dAf445b1AB363534c3'. The query includes transactions where the account is the sender, the receiver, or both. The query orders the transactions by block time, with the most recent transactions first.", "completion": " with t as (\n  SELECT block_time, hash, \"from\", \"to\", value/1e18 as \"Eth\", null as \"Gas\" FROM ethereum.transactions\n  WHERE \"to\" = '\\x89a6D1ed2643A72DC50b71dAf445b1AB363534c3' and value > 0 and success = true\nunion all\n  SELECT block_time, hash, \"from\", \"to\", -value/1e18 as \"Eth\", gas_price/1e9 as \"Gas\" FROM ethereum.transactions\n  WHERE \"from\" = '\\x89a6D1ed2643A72DC50b71dAf445b1AB363534c3' and value > 0  and success = true\nunion all\n  SELECT block_time, hash, \"from\", \"to\", null as \"Eth\", gas_price/1e9 as \"Gas\" FROM ethereum.transactions\n  WHERE \"from\" = '\\x89a6D1ed2643A72DC50b71dAf445b1AB363534c3' and value > 0  and success = false\n)\nselect * from t order by block_time desc"}
{"prompt": "This query calculates the total ETH volume for each Kyber trade, taking into account any fees that were burned.", "completion": " WITH volume AS (\nWITH fee_mapping AS\n  (SELECT \n  tx_hash,\n  INDEX,\n          \"ethWeiValue\" /1e18 AS value,\n     (SELECT count(*)\n      FROM kyber.\"FeeBurner_evt_AssignBurnFees\"\n      WHERE tx_hash = trade.tx_hash\n        AND INDEX < trade.index) AS burnFees\n   FROM kyber.\"Network_evt_KyberTrade\" trade\n   ORDER BY 1, 2)\nSELECT tx_hash,\n       (value * (burnFees - lag(burnFees, '1', '0') OVER (PARTITION BY tx_hash ORDER BY index))) AS ethvolume\nFROM fee_mapping f\nORDER BY tx_hash\n)\n\nSELECT tx_hash, SUM(ethvolume) FROM volume\nGROUP BY 1\nORDER BY 1"}
{"prompt": "This query returns the total USD value for each token traded on the 0x exchange. The value is calculated by multiplying the amount of the token traded by the price of the token in USD.", "completion": " SELECT\n\nprice.symbol,\n\nCASE WHEN price.symbol = 'USDC' THEN SUM(\"takerAssetFilledAmount\" / 1e6) ----don't multiply by anything as these assets are USD\nWHEN price.symbol = 'TUSD' THEN SUM(\"takerAssetFilledAmount\" /1e18) --don't multiply by anything as these assets are USD\nELSE SUM(\"takerAssetFilledAmount\" /1e18 * price.average ) END AS total_usd_value\n\nFROM zeroex.\"Exchange_evt_Fill\" filled\nINNER JOIN ethereum.transactions tx ON filled.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = price.time AND substring(filled.\"takerAssetData\" from 17) = price.asset\nGROUP BY price.symbol;"}
{"prompt": "This SQL query returns the number of WETH prices for each day, in descending order, for the past 200 days.", "completion": " SELECT date_trunc('day', minute), COUNT(*) FROM prices.\"usd\"\nWHERE symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 200"}
{"prompt": "Select all records from the ethereum.traces table where the \"from\" field is equal to the specified value and the \"to\" field is equal to the specified value, the block_number field is equal to 9371984, and the tx_success field is true. Order the results by the block_number field in descending order.", "completion": " SELECT * FROM ethereum.traces WHERE \"from\" = '\\x8196cdd6e17991b22816bb9cdd31faceecf2f816' AND \"to\" = '\\xc88ddaa37c1fec910670366ae16df2aa5e1124f7' AND block_number = 9371984 AND tx_success = true ORDER BY block_number DESC"}
{"prompt": "This query counts the number of distinct holders of either DXD tokens, ETH, or MGN tokens who have participated in the dxDAO in some capacity. This could be through locking tokens, bidding in the GEN auction, or registering MGN tokens.", "completion": " WITH tokenlockers AS\n  (SELECT DISTINCT (_locker) as repholder\n   FROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\"),\n     ETHlockers AS\n  (SELECT DISTINCT (_locker) as repholder\n   FROM dxdao.\"DxLockEth4Rep_evt_Lock\"),\n     MGNregisters AS\n  (SELECT DISTINCT (_beneficiary) as repholder\n   FROM dxdao.\"DxLockMgnForRep_evt_Register\"),\n     GENauction AS\n  (SELECT DISTINCT (_bidder) as repholder\n   FROM dxdao.\"DxGenAuction4Rep_evt_Bid\"),\nall_holders AS (\n    SELECT repholder FROM tokenlockers UNION\n    (SELECT repholder FROM ETHlockers) UNION\n    (SELECT repholder FROM GENauction) UNION\n    (SELECT repholder FROM MGNregisters)\n)\nSELECT count(distinct repholder) FROM all_holders;"}
{"prompt": "This SQL query returns the locked value for a specified token on a specified date. The locked value is the sum of all deposits and withdrawals for that token on that date.", "completion": " WITH history AS ((SELECT 'deposit' as t, * FROM gnosis.\"DutchExchange_evt_NewDeposit\") UNION (SELECT 'withdrawal' as t, * FROM gnosis.\"DutchExchange_evt_NewWithdrawal\")),\n daily AS (\n    SELECT \n        history.token as token,\n        tx.block_time::date as dt,\n        SUM(CASE WHEN t='deposit' THEN amount/1e18 ELSE -amount/1e18 END) as locked\n    FROM history\n    INNER JOIN ethereum.transactions tx ON history.tx_hash = tx.hash\n    LEFT JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = date_trunc('minute', price.time)\n    GROUP BY 1, 2\n)\nSELECT \n    daily.token, \n    daily.dt, \n    SUM(daily.locked) OVER (PARTITION BY daily.token ORDER BY daily.dt ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) as locked -- should * with close?\nFROM daily\nWHERE token='\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\nORDER BY 2 DESC\n;\n"}
{"prompt": "This query returns the time, minimum gas price, average gas price, maximum gas price, median gas price, and number of successful GasToken mints for the past 7 days.", "completion": " SELECT\n    date_trunc('day', tx.block_time) AS time,\n    MIN(tx.gas_price)/1e9 as \"min\",\n    AVG(tx.gas_price)/1e9 as \"avg\",\n    MAX(tx.gas_price)/1e9 as \"max\",\n    --MEDIAN(tx.gas_price)/1e9 as \"median\",\n    ROUND(PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY tx.gas_price))/1e9 AS median,\n    SUM(gst.value) as \"count\"\nFROM gastoken.\"GasToken2_call_mint\" gst\nLEFT JOIN ethereum.transactions tx ON gst.call_tx_hash = tx.hash\nWHERE tx.gas_price > 0 AND gst.call_success\n  AND tx.block_time > now() - interval '7 days'\nGROUP BY 1\nORDER BY 1 DESC\n"}
{"prompt": "This SQL query calculates the total amount of tokens minted by the FRTProxy contract, and then inner joins this data with the DxLockMgnForRep contract's event data to get the total amount of tokens minted for each user.", "completion": " SELECT SUM(amount/1e18) as MGNamount\nFROM dxdao.\"TokenFRTProxy_call_mintTokens\" m\nINNER JOIN dxdao.\"DxLockMgnForRep_evt_Register\" r\nON m.\"user\" = r._beneficiary;\n"}
{"prompt": "This SQL query returns the number of uniswap EthPurchase events that have occurred in the last 14 days, grouped by day.", "completion": " SELECT date_trunc('day', tx.block_time), COUNT(*) \nFROM uniswap.\"Exchange_evt_EthPurchase\" u\nLEFT JOIN (SELECT block_time, tx.hash FROM ethereum.transactions tx WHERE block_time > now() - interval '14 days') tx\nON u.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 DESC;"}
{"prompt": "This SQL query calculates the total amount of ETH that was sent to a specific contract address. The query only includes transactions that were successful and that were included in a block that had a number greater than or equal to 8235058.", "completion": " select sum(t.\"value\" / 1e18) as total_in\nfrom ethereum.transactions t\nwhere t.\"to\" =  '\\x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c'\nand t.success = true\nand t.block_number >= 8235058"}
{"prompt": "This query returns the total amount of Dai that was burned each day for the past 750 days, ordered from most recent to least recent.", "completion": " SELECT date_trunc('day', tx.block_time) AS day, SUM(wad/1e18) AS burn\nFROM maker.\"SAI_call_burn\" m\nLEFT JOIN ethereum.transactions tx ON tx.hash = m.call_tx_hash\nWHERE m.call_success = 'true'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 750\n\n"}
{"prompt": "This SQL query returns the total amount of WBTC minted and burned for each week over the past 50 weeks.", "completion": " WITH mint AS\n(\nSELECT\ndate_trunc('week', block_time) as week,\nsum(\"amount\"/1e8) as wbtc_minted FROM wrappedbtc.\"WBTC_evt_Mint\" m\nLEFT JOIN ethereum.\"transactions\" tx on m.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50),\n\nburn AS \n(\nSELECT\ndate_trunc('week', block_time) as week,\nsum(b.\"value\"/1e8) as wbtc_burned FROM wrappedbtc.\"WBTC_evt_Burn\" b\nLEFT JOIN ethereum.\"transactions\" tx on b.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50\n)\n\nSELECT mint.\"week\",sum(\"wbtc_minted\") as minted,sum(\"wbtc_burned\") as burned\nFROM mint\nLEFT JOIN burn ON mint.\"week\" = burn.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This SQL query calculates the total volume of Kyber trades in USD for the year 2019.", "completion": " WITH overtime as (SELECT date_trunc('week', tx.block_time) as time,\n       SUM(\"ethWeiValue\" / 1e18 * price.average) as volume\nFROM kyber.\"Network_evt_KyberTrade\" t\nINNER JOIN ethereum.transactions tx ON t.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = price.time\nWHERE price.symbol = 'WETH'\nAND date_part('year', tx.block_time) = 2019\nGROUP BY 1\nORDER BY 1)\n\nSELECT SUM(volume) FROM overtime;"}
{"prompt": "This SQL query returns the total number of trades that have been made.", "completion": " select count(*) from trades"}
{"prompt": "This SQL query returns the distinct pairs of \"sellToken\" and \"buyToken\" from the gnosis.\"DutchExchange_evt_AuctionCleared\" table, ordered by the buyToken and then the sellToken.", "completion": "  WITH symbols (symbol, asset) AS (VALUES                    \n     ('WETH', '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'),\n     ('RDN', '\\x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6'), \n     ('OMG', '\\xd26114cd6ee289accf82350c8d8487fedb8a0c07'), \n     ('KNC', '\\xdd974d5c2e2928dea5f71b9825b8b646686bd200'), \n     ('GEN', '\\x543ff227f64aa17ea132bf9886cab5db55dcaddf'), \n     ('MKR', '\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'), \n     ('DAI', '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'), \n     ('GNO', '\\x6810e776880c02933d47db1b9fc05908e5386b96'), \n     ('BNT', '\\x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c'), \n     ('ZRX', '\\xe41d2489571d322189246dafa5ebde1f4699f498'), \n     ('SNT', '\\x744d70fdbe2ba4cf95131626614a1763df805b9e'), \n     ('REQ', '\\x8f8221afbb33998d8584a2b05749ba73c37a938a'), \n     ('ST', '\\x2c4e8f2d746113d0696ce89b35f0d8bf88e0aeca'),  \n     ('LRC', '\\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'), \n     ('OCEAN', '\\x985dd3d42de1e256d09e1c10f112bccb8015ad41'),\n     ('BAT', '\\x0d8775f648430679a709e98d2b0cb6250d2887ef'), \n     ('REP', '\\x1985365e9f78359a9b6ad760e32412f4a445e862'), \n     ('LOOM', '\\xa4e8c3ec456107ea67d3075bf9e3df3a75823db0'),\n     ('MANA', '\\x0f5d2fb29fb7d3cfee444a200298f468908cc942'),\n     ('ANT', '\\x960b236a07cf122663c4303350609a66a7b288c0'), \n     ('LINK', '\\x514910771af9ca656af840dff83e8264ecf986ca'),\n     ('NMR', '\\x1776e1f26f98b1a5df9cd347953a26dd3cb46671'), \n     ('POLY', '\\x9992ec3cf6a55b00978cddf2b27bc6882d88d1ec'),\n     ('BLZ', '\\x5732046a883704404f284ce41ffadd5b007fd668'), \n     ('DNT', '\\x0abdace70d3790235af448c88547603b945604ea')  \n )\nSELECT\n    DISTINCT \"sellToken\", \"buyToken\"\nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" cleared\n\nORDER BY 2, 1\n;"}
{"prompt": "This SQL query will select the first 10 rows from the \"TotlePrimary_evt_LogSwap\" table.", "completion": " SELECT *\nFROM totle.\"TotlePrimary_evt_LogSwap\" LIMIT 10;"}
{"prompt": "This query returns the total number of users for each day in the Kyber network.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', block_time) AS date,\n                trader_a AS account\n         FROM dex.trades\n         WHERE project = 'Kyber'\n         UNION SELECT date_trunc('day', block_time) AS date,\n                      trader_b AS account\n         FROM dex.trades\n         WHERE project = 'Kyber') AS table1\n      GROUP BY account) AS table2\n   GROUP BY date\n   ORDER BY date) AS table3"}
{"prompt": "This query returns the number of successful ETH to token trades made on Kyber Network during each week.", "completion": " SELECT DISTINCT reserve\nFROM kyber.\"FeeBurner_evt_BurnAssignedFees\"\n\n\nSELECT date_trunc('week', tx.block_time),\nCOUNT ( \"call_success\")  as \"Weekly ETH to Token Trades\"\nFROM kyber.\"NetworkProxy_call_swapTokenToToken\" k\nLEFT JOIN ethereum.transactions tx ON tx.hash = k.call_tx_hash\nWHERE \"call_success\" = TRUE\nGROUP BY 1\nORDER BY 1 \n\n\n"}
{"prompt": "This query is asking for the DSR (daily stablecoin reserve) earnings for a particular address over time, from 11/18/19 to 1/8/20. The DSR earnings are calculated by taking the sum of inbound and outbound RAD ( Radiation) for each day, multiplied by 0.00010958904. The query returns the day, the DSR earnings for that day, and the cumulative DSR earnings from 11/18/19 to that day.", "completion": " WITH inbound AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(rad/1e45) as inb FROM makermcd.\"VAT_call_move\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nwhere dst = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\nGROUP BY 1\nORDER BY 1 desc\n),\n\noutbound AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(-rad/1e45) as outb FROM makermcd.\"VAT_call_move\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nWHERE src = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT \ninbound.day,\nsum(inb + outb)*0.00010958904 as net_DSR,\nsum(sum(inb + outb)*0.00010958904) over (order by inbound.day) as daily_DSR_yield_$\nFROM inbound\nLEFT JOIN outbound ON inbound.day = outbound.day\nWHERE inbound.day < '1/8/20'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This query shows all executed trades by a trader, including the buy and sell tokens, amount of each, the price, and a link to the transaction on Etherscan.", "completion": " -- Note: this query does not yet include reverted trades. \n\nWITH dfusion_tokens as (\n        SELECT\n            ROW_NUMBER() OVER (ORDER BY transactions.block_number, transactions.index) as token_id,\n            CONCAT('0x', ENCODE(tokens.token, 'hex')) as token_address,\n            erc20.symbol,\n            erc20.decimals\n            --transactions.block_time as add_date\n        FROM gnosis_protocol.\"BatchExchange_call_addToken\" tokens\n        JOIN ethereum.\"transactions\" transactions\n          ON transactions.hash=tokens.call_tx_hash\n          AND transactions.success=true\n        JOIN erc20.\"tokens\" as erc20\n          ON erc20.contract_address = tokens.token\n    UNION all\n        SELECT\n        0 as token_id,\n        '\\x1a5f9352af8af974bfc03399e3767df6370d82e4' as token_address,\n        'OWL' as symbol,\n        18 as decimals \n    )\nSELECT\n    \"batchId\",\n    \"block_time\", \n    \"orderId\",\n    --\"sellToken\",\n    dfusion_tokens_sell.\"symbol\" as \"sellToken\",\n    -- dfusion_tokens_sell.\"decimals\",\n    -- \"executedSellAmount\",\n    \"executedSellAmount\"/10^(dfusion_tokens_sell.\"decimals\") as \"sellAmount\",\n    --\"buyToken\",\n    dfusion_tokens_buy.\"symbol\" as \"buyToken\",\n   -- \"executedBuyAmount\",\n    \"executedBuyAmount\"/10^(dfusion_tokens_buy.\"decimals\") as \"buyAmount\",\n    ((\"executedBuyAmount\"/10^(dfusion_tokens_buy.\"decimals\"))/(\"executedSellAmount\"/10^(dfusion_tokens_sell.\"decimals\"))) as Price,\n    CONCAT('0x', ENCODE(trades.\"owner\", 'hex')) as trader,\n    CONCAT('https://etherscan.io/tx/','0x', ENCODE(trades.\"evt_tx_hash\", 'hex')) as Solution_tx_Link\nFROM gnosis_protocol.\"BatchExchange_evt_Trade\" trades\nJOIN ethereum.\"transactions\" transactions\n  ON transactions.hash=trades.evt_tx_hash\n  AND transactions.success=true\nJOIN gnosis_protocol.\"BatchExchange_call_submitSolution\" solution\nON solution.call_tx_hash=transactions.hash\nJOIN gnosis_protocol.\"BatchExchange_evt_OrderPlacement\" orders\nON orders.index=trades.\"orderId\"\nAND orders.owner=trades.owner\nleft outer JOIN dfusion_tokens dfusion_tokens_sell \nON orders.\"sellToken\" = dfusion_tokens_sell.token_id\nleft outer JOIN dfusion_tokens dfusion_tokens_buy\nON orders.\"buyToken\" = dfusion_tokens_buy.token_id\nORDER BY \"block_time\" desc;"}
{"prompt": "This SQL query returns the total fees collected by Uniswap v1 in USD over the past 180 days. The fees are calculated by taking the amount of ETH sold or bought on the Uniswap exchange and multiplying it by the price of ETH in USD at the time of the transaction.", "completion": " SELECT date_trunc('days', tx.block_time) AS Date,\n       SUM(eth/1e18*p.price*0.003) AS fees\nFROM (\n        (SELECT evt_tx_hash,\n                eth_sold AS eth\n         FROM uniswap.\"Exchange_evt_TokenPurchase\")\n      UNION\n        (SELECT evt_tx_hash,\n                eth_bought AS eth\n         FROM uniswap.\"Exchange_evt_EthPurchase\")) ether\nINNER JOIN\n     (SELECT hash,\n             block_time\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '180 days'\n        AND block_time < date_trunc('day', NOW())) tx ON ether.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 desc;"}
{"prompt": "This query returns the number of new Argent wallets created per week. The data is pulled from the Ethereum blockchain, specifically transactions involving the contract address 0x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020. This address is associated with the Argent wallet creator.", "completion": " /* the number of argent wallets created per day/month - createWallet is called on contract 0x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020 */\nSELECT date_trunc('week', block_time) AS date_week,\n       sum(1)\nFROM ethereum.transactions\nWHERE \"to\" = '\\x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020' -- Argent wallet creator\n  AND substring(\"data\"::bytea\n                FROM 0\n                FOR 5) = '\\xaff18575' -- createWallet() method\nGROUP BY date_trunc('week', block_time)\norder by date_trunc('week', block_time) asc"}
{"prompt": "This query returns data on the amount of a specific token held by two wallets over a period of time. The wallets are identified by their addresses, and the amount of the token is tracked on a daily basis. The data is sorted by the amount of the token held, with the classification (e.g. \"Huobi 10\") appearing in descending order.", "completion": " with\n  dist as (\n    Select\n      wallet_address,\n      amount,\n      day,\n      token_symbol\n    from\n      erc20.\"view_token_balances_daily\"\n    where\n      token_address = '\\xaaaebe6fe48e54f431b0c390cfaf0b017d09d42d'\n      and wallet_address != '\\x0000000000000000000000000000000000000000'\n      and wallet_address != '\\x000000000000000000000000000000000000dead'\n  )\nSelect\n  -- Input the addresses here thet you want to track over some period of time\n  CASE\n    WHEN wallet_address = '\\xe93381fb4c4f14bda253907b18fad305d799241a' then 'Huobi 10'\n    WHEN wallet_address = '\\x30741289523c2e4d2a62c7d6722686d14e723851' then 'Huobi ?'\n  end as classification,\n  sum(amount) as amount,\n  day,\n  token_symbol\nfrom\n  dist\nwhere\n  day > now() - interval '3month'\n  and amount > 0\ngroup by\n  1,\n  3,\n  4\norder by\n  amount,\n  classification desc"}
{"prompt": "This SQL query selects the week from the trades table and groups them by order.", "completion": " select date_trunc('week', trades.trade_time) from trades\nGROUP BY 1\nORDER BY 1 ;"}
{"prompt": "This SQL query returns the top 10 addresses with the highest balances of DAI, a digital currency. The query gets the address and amount from the \"ERC20_evt_Transfer\" table, where the contract address is for DAI. It then groups the results by address and orders them by the highest balance.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    -tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f' -- GNO\nUNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f' --GNO\n)\n\nSELECT \naddress, \nsum(amount/1e18) as dai_balance\nFROM transfers\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 10\n\n"}
{"prompt": "This query returns the total number of Argent wallets that have been created, as well as the total fees associated with the createWallet() method.", "completion": " /* the addresses of all Argent based wallets */\nWITH total_tx_fees AS (\nSELECT sum((tx.gas_price*r.gas_used)/1e18) as total_tx_fees\nFROM ethereum.transactions tx\nLEFT JOIN ethereum.traces r ON tx.\"hash\" = r.tx_hash\nWHERE tx.\"to\" = '\\x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020' -- Argent wallet creator\n  AND substring(tx.\"data\"::bytea\n                FROM 0\n                FOR 5) = '\\xaff18575' -- createWallet() method\n),total_argent_accounts AS (\nSELECT count(distinct hash) as total_argent_accounts\nFROM ethereum.transactions tx\nLEFT JOIN ethereum.traces tr ON tx.\"hash\" = tr.tx_hash\nWHERE tx.\"to\" = '\\x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020' -- Argent wallet creator\n  AND substring(tx.\"data\"::bytea\n                FROM 0\n                FOR 5) = '\\xaff18575' -- createWallet() method\n  AND tx.success = true\n)\n\nselect total_argent_accounts, null total_tx_fees from total_argent_accounts\nunion all\nselect null total_argent_accounts, total_tx_fees  as f from total_tx_fees\n"}
{"prompt": "This query returns the total number of 1inch users over time.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(account) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account\n      FROM\n        (SELECT date_trunc('day', min(block_time)) AS date,\n                tx_from AS account\n         FROM oneinch.swaps\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(block_time)) AS date,\n                      tx_from AS account\n         FROM onesplit.swaps\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "This query returns the date and the running sum of the amount of the ERC20 token called DAI for a specific user.", "completion": " SELECT date, sum(amount) OVER (\n                               ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS dai_balance\nFROM\n  (SELECT evt_block_time AS date,\n          value / 1e18 AS amount\n   FROM erc20.\"ERC20_evt_Transfer\"\n   WHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n     AND \"to\" = '\\x5ade7aE8660293F2ebfcEfaba91d141d72d221e8'\n   UNION SELECT evt_block_time AS date, -value / 1e18 AS amount\n   FROM erc20.\"ERC20_evt_Transfer\"\n   WHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n     AND \"from\" = '\\x5ade7aE8660293F2ebfcEfaba91d141d72d221e8') a"}
{"prompt": "This SQL query returns the number of unique addresses that minted SAI from a CDP in the past 10 months.", "completion": " SELECT date_trunc('month', tx.block_time) as Month,\nCOUNT(DISTINCT guy)\nFROM makermcd.\"DAI_evt_Mint\" m\nLEFT JOIN (SELECT hash,\n             block_time\n      FROM ethereum.transactions\n      WHERE block_time > now() - interval '10 months'\n        AND block_time < date_trunc('month', NOW())) tx\n        ON m.evt_tx_hash = tx.hash\nAND block_time < date_trunc('month', current_date)::date\nGROUP BY 1;"}
{"prompt": "This query returns the total amount of gas used each day since the Ethereum blockchain began.", "completion": " SELECT\n    date_trunc('day', time) as time,\n    SUM(gas_used) as gas_used\nFROM ethereum.blocks\nWHERE time > '1970-01-01'\nGROUP BY 1\nORDER BY 1 DESC"}
{"prompt": "This SQL query selects the user's name, the amount of VeLFT tokens they have, the amount of tokens they have, and the amount of time the tokens are locked up for.", "completion": " select\n    CASE \n      WHEN ens_name is not null\n      THEN ens_name\n      ELSE q.user::text\n    END,\n    (value/1e18)*((locktime-extract(epoch from now()))/126227808) as velft,\n    (value/1e18) as tokens,\n    (locktime - extract(epoch from now()))/126227808 as years\nfrom (\n    select\n        provider as user,\n        sum(value) as value,\n        max(locktime) as locktime\n    from lend_flare.\"LendFlareVotingEscrowV2_evt_Deposit\"\n    where locktime > extract(epoch from now())\n    group by provider\n) q\nleft join (\n    select \n        address, \n        ens_name \n    from dune_user_generated.\"ens_reverse_records\" \n) ens\nON q.user = ens.address\norder by velft DESC\n"}
{"prompt": "This query returns the number of ethereum transactions that have taken place in the last hour, grouped by hour.", "completion": " SELECT date_trunc('hour', tx.block_time),COUNT(*) FROM oasisdex.\"eth2dai_evt_LogTake\" u\nLEFT JOIN ethereum.transactions tx\nON u.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 40"}
{"prompt": "This SQL query returns a list of all ERC-20 events (transfer and approval) for a specific user address. The query includes the action, from address, to address, amount, transaction hash, block number, and block time.", "completion": " -- Note this is too much for the real USDC, we should run this for a specific address or list of addresses\r\nselect\r\n\taction,\r\n\t\"_from\",\r\n\t\"_to\",\r\n\tamt,\r\n\ttx.block_number,\r\n\tblock_time,\r\n\ttx_hash\r\nfrom\r\n\t((\r\n\tselect\r\n\t\t'Transfer' as action,\r\n\t\tsubstring(topic2 from 13) as \"_from\",\r\n\t\tsubstring(topic3 from 13) as \"_to\",\r\n\t\tbytea2numeric(data)/ 1e6 amt,\r\n\t\ttx_hash,\r\n\tblock_number,\r\n\ttx_index,\r\n\tindex\r\n\tfrom\r\n\t\tethereum.logs\r\n\twhere\r\n\t\ttopic1 = '\\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\r\n\t\t-- Transfer\r\n\t\tand contract_address = '\\x7d9C10E2F7AF22200126A0EA6826c1A16F8F6d38'\r\n\t\t-- Fake USDC\r\n\t\tand (\r\n\t\ttopic2 = '\\x000000000000000000000000{{ user_address }}'\r\n\t\tor\r\n\t\ttopic3 = '\\x000000000000000000000000{{ user_address }}'\r\n\t\t)\r\n\t\t)\r\nunion (\r\nselect\r\n\t'Approval' as action,\r\n\tsubstring(topic2 from 13) as \"_from\",\r\n\tsubstring(topic3 from 13) as \"_to\",\r\n\tbytea2numeric(data)/ 1e6 amt,\r\n\ttx_hash,\r\n\tblock_number,\r\n\ttx_index,\r\n\tindex\r\nfrom\r\n\tethereum.logs\r\nwhere\r\n\ttopic1 = '\\x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925'\r\n\t-- Approval\r\n\tand contract_address = '\\x7d9C10E2F7AF22200126A0EA6826c1A16F8F6d38'\r\n\t-- Fake USDC\r\n\tand (\r\n\t\ttopic2 = '\\x000000000000000000000000{{ user_address }}'\r\n\t\tor\r\n\t\ttopic3 = '\\x000000000000000000000000{{ user_address }}'\r\n\t\t)\r\n)) as events\r\n\tjoin ethereum.transactions tx on tx.hash = tx_hash\r\n\torder by block_number desc,\r\n\ttx_index desc,\r\n\tevents.index desc"}
{"prompt": "This query returns the total value of all transactions made with WBTC (in USD) for each day over the past year, ordered from most recent to least recent.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\nsum(t.\"value\"/1e8*p.price) as transfer_volume from wrappedbtc.\"WBTC_evt_Transfer\" t\nLEFT JOIN ethereum.\"transactions\" tx ON t.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE p.symbol = 'WBTC'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 365"}
{"prompt": "This SQL query calculates the sum of takerAmount in USD using the average price from coincap.tokens/usd table based on the takerToken and the block_time from the ethereum.transactions table.", "completion": " SELECT SUM(filled.\"takerAmount\"/1e18 * price.average)\nFROM airswap.\"Exchange_evt_Filled\" filled\nINNER JOIN ethereum.transactions tx ON filled.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" price ON filled.\"takerToken\" = price.asset AND date_trunc('minute', tx.block_time) = price.time\n;"}
{"prompt": "This SQL query returns the total cover amount per project for Armor.Fi. The cover amount is calculated in ETH and USD, and then rounded to the nearest two decimal places.", "completion": " WITH current_price AS\n  (SELECT MINUTE,\n          price\n   FROM prices.\"layer1_usd\"\n   WHERE symbol = 'ETH'\n   ORDER BY 1 DESC\n   LIMIT 1)\nSELECT project,\n       labels.get(project) AS name,\n       round(cast(eth *\n                    (SELECT price\n                     FROM current_price) + usd AS numeric), 2) AS amount_usd\nFROM\n  (SELECT \"coveredContract\" AS project,\n          coalesce(sum(\"coverAmount\") filter (\n                                              WHERE currency = '\\x45544800'), 0) AS eth,\n          coalesce(sum(\"coverAmount\") filter (\n                                              WHERE currency = '\\x44414900'), 0) AS usd\n   FROM armor_fi.\"arNFT_evt_BuyCover\"\n   GROUP BY 1) a\nORDER BY 3 DESC"}
{"prompt": "This SQL query returns the following data:\n\n- the \"user\" who made the buy order\n- the block time of the order\n- the amount of the buy order (in ETH)\n- the market price of ETH (at the time the order was made)", "completion": " SELECT\n\n    \"user\",\n    date_trunc('minute', block_time) as time,\n    (\"amount\" / 1e18) as buyvolume,\n    eth.average as marketprice\n    \nFROM gnosis.\"DutchExchange_evt_NewBuyOrder\" c\nINNER JOIN ethereum.transactions tx\nON c.tx_hash = tx.hash\n\nINNER JOIN coincap.\"tokens/usd\" eth \non date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\n\nWHERE \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND \"sellToken\" = '\\x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' --dai\nAND \"auctionIndex\" = 3\nAND eth.symbol = 'WETH'\nAND tx.success = true;"}
{"prompt": "Get all data from the \"SAI_call_transfer\" table, up to 10 rows.", "completion": " SELECT * FROM maker.\"SAI_call_transfer\" LIMIT 10;\n"}
{"prompt": "This SQL query returns the first 10 results from the table \"coincap.tokens\".", "completion": " select * from \"coincap.tokens\" limit 10"}
{"prompt": "This SQL query returns the number of unique account holders for the Solana blockchain for the past six months.", "completion": " select     \n    date_trunc('month', block_time) as month, \n    count(distinct account_keys[0]) as mau\nfrom solana.transactions\nwhere block_time >= date_trunc('month', now() - interval '6 months') \n        and block_time < date_trunc('month', now())\ngroup by 1\n"}
{"prompt": "This SQL query retrieves data about successful liquidations of borrows from the Compound v2 and v1 protocols. The data includes the borrower, amount repaid, collateralToken, success status, address, and transaction hash.", "completion": " SELECT\n    cv2.\"borrower\",\n    cv2.\"repayAmount\",\n    cv2.\"cTokenCollateral\",\n    cv2.\"success\",\n    cv2.\"address\",\n    cv2.\"tx_hash\"\nFROM compoundv2.\"cErc20_call_liquidateBorrow\" cv2\nUNION\n(SELECT\n    cv1.\"targetAccount\" as borrower,\n    cv1.\"requestedAmountClose\" as repayAmount,\n    cv1.\"assetCollateral\" as cTokenCollateral,\n    cv1.\"success\" as success,\n    cv1.\"assetBorrow\" as address,\n    cv1.\"tx_hash\" as tx_hash\nFROM\n    compoundv1.\"MoneyMarket_call_liquidateBorrow\" cv1)"}
{"prompt": "This query returns the total number of artists for each day.", "completion": " SELECT date, sum(artists) OVER (\n                                ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_artists\nFROM\n  (SELECT date, count(artist) AS artists\n   FROM\n     (SELECT min(date) AS date,\n             artist\n      FROM\n        (SELECT date_trunc('day', evt_block_time) AS date,\n                _creator AS artist\n         FROM superrare.\"SuperRare_evt_WhitelistCreator\"\n         UNION ALL SELECT date_trunc('day', evt_block_time) AS date,\n                          \"_newAddress\" AS artist\n         FROM superrare.\"SuperRare_v2_evt_AddToWhitelist\") a\n      GROUP BY 2) b\n   GROUP BY 1\n   ORDER BY 1) c"}
{"prompt": "This query returns the total interest accrued for DAI lending on the Compound v2 platform, grouped by day.", "completion": " -- Table of daily interest accrual for DAI lending\n\n\n    SELECT sum(\"interestAccumulated\" / 1e18) AS InterestAccum, date_trunc('day', tx.block_time) as DayTime\n    FROM compoundv2.\"cErc20_evt_AccrueInterest\" interest, ethereum.transactions tx\n    WHERE address = '\\xf5dce57282a584d2746faf1593d3121fcac444dc'\n    AND interest.tx_hash = tx.hash\n    GROUP BY 2\n    ORDER BY 2 DESC\n\n    \n    \n    "}
{"prompt": "This SQL query will select all data from the synthetix.\"ExchangeRates_v2_call_ratesForCurrencies\" table and limit the results to 5.", "completion": " SELECT *\nFROM synthetix.\"ExchangeRates_v2_call_ratesForCurrencies\"\nLIMIT 5"}
{"prompt": "This query returns the total volume of Dai and USDC exchanged on Curve.fi each day.", "completion": " WITH base_info AS\n  (SELECT date_trunc('day', block_time) AS DAY,\n          *\n   FROM curvefi.\"compound_v2_evt_TokenExchangeUnderlying\" e\n   INNER JOIN ethereum.transactions txs ON txs.hash = e.evt_tx_hash)\nSELECT base_info.day,\n       coalesce(SUM(CASE bought_id\n                        WHEN 0 THEN tokens_bought/1e18\n                    END), 0) AS dai,\n       coalesce(SUM(CASE bought_id\n                        WHEN 1 THEN tokens_bought/1e6\n                    END), 0) AS usdc,\n       SUM(CASE bought_id\n               WHEN 0 THEN tokens_bought/1e18\n               WHEN 1 THEN tokens_bought/1e6\n           END) AS volume\nFROM base_info\nGROUP BY DAY"}
{"prompt": "This SQL query returns the average price of WETH and DAI over the past 14 days, truncated to the nearest day. It also returns the average price of WETH and DAI from the CEX exchange over the same time period.", "completion": " SELECT date_trunc('day', tx.block_time) as time,\n       AVG((pay_amt / buy_amt)*d.average) AS price,\n       AVG(p.average) as CEXprice\nFROM oasisdex.\"eth2dai_evt_LogTrade\" trade\nLEFT JOIN ethereum.transactions tx ON tx.hash = trade.tx_hash\nLEFT JOIN coincap.\"tokens/usd\" p ON date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\nLEFT JOIN coincap.\"tokens/usd\" d ON date_trunc('minute', d.time) = date_trunc('minute', tx.block_time)\nWHERE pay_gem = '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359' --dai sold\nAND p.symbol = 'WETH'\nAND d.symbol = 'DAI'\nAND p.time::date > now() - interval '14 days'\nGROUP BY 1\nORDER BY 1 DESC"}
{"prompt": "This SQL query calculates the sum of all transfers made in a given week, including both minting and burning functions.", "completion": " SELECT\nweek,\nSUM(transfer) over (order by week)\nFROM \n (\n    SELECT\n    date_trunc('week', evt_block_time) as week,\n    sum(\"value\") as transfer\n    FROM luna.\"LUNA_evt_Transfer\" tr\n    GROUP BY 1\nUNION\n    SELECT\n    date_trunc('week', evt_block_time) as week,\n    sum(-amount/1e18) as transfer\n    FROM luna.\"LUNA_evt_Burn\" tr\n    GROUP BY 1\n) as net;"}
{"prompt": "This query returns the date, amount, and count of all tornado cash deposits made on the ethereum blockchain, grouped by day.", "completion": " SELECT date_trunc('day', tx.block_time) as date, tx.value / 1e18 as amount, count(*) as count\nFROM tornado_cash.\"eth_evt_Deposit\" e\nLEFT JOIN ethereum.transactions tx ON tx.hash = e.evt_tx_hash\nWHERE tx.value > 0\nGROUP BY tx.value, date\nORDER BY date;"}
{"prompt": "This query returns the total amount of value locked or burned over time. The data is grouped by date.", "completion": " SELECT tx.block_time as date,\n       sum(value / 1e18) OVER (\n                               ORDER BY tx.block_time)\nFROM event e\nLEFT JOIN ethereum.transactions tx ON e.tx_hash = tx.hash\nORDER BY date\nGROUP BY date;"}
{"prompt": "This SQL query returns the balance of Dai for each account. The balance is calculated by subtracting the amount of Dai sent from the amount of Dai received.", "completion": " WITH outbound AS\n  (SELECT \"src\",\n          SUM(wad/1e18) amt\n   FROM maker.\"SAI_evt_Transfer\"\n   WHERE src = '\\x11E4857Bb9993a50c685A79AFad4E6F65D518DDa'\n   GROUP BY 1\n   ),\n     inbound AS\n  (SELECT \"dst\",\n          SUM(wad/1e18) amt\n   FROM maker.\"SAI_evt_Transfer\"\n   WHERE \"dst\" = '\\x11E4857Bb9993a50c685A79AFad4E6F65D518DDa'\n   GROUP BY 1)\nSELECT inbound.\"dst\",\n       CASE\n           WHEN outbound.amt IS NULL THEN inbound.amt\n           ELSE inbound.amt - outbound.amt\n       END AS balance\nFROM inbound\nLEFT JOIN outbound ON outbound.\"src\" = inbound.\"dst\"\nORDER BY balance DESC;"}
{"prompt": "This query selects the account, asset, and amount from the compound \"MoneyMarket_evt_BorrowTaken\" table. The amount is divided by 1e18. The query returns the first 10 results.", "completion": " SELECT account, asset, amount / 1e18 as amount FROM compound.\"MoneyMarket_evt_BorrowTaken\" LIMIT 10"}
{"prompt": "This query returns the total supply of SAI tokens on a given day. It does this by first unioning the \"SAI_evt_Mint\" and \"SAI_evt_Burn\" tables, which contain data on SAI token minting and burning events. It then groups these events by day and calculates the total supply of SAI tokens for each day. Finally, it orders the results by date.", "completion": " WITH dai AS\n  ( SELECT wad / 1e18 AS amount,\n            evt_block_time,\n           evt_tx_hash\n   FROM maker.\"SAI_evt_Mint\"\n   UNION ALL SELECT -wad / 1e18 AS amount,\n                    evt_block_time,\n                     evt_tx_hash\n   FROM maker.\"SAI_evt_Burn\") ,\n     daily_amounts AS\n  (SELECT date_trunc('day', evt_block_time) AS dt,\n          sum(amount) AS amount\n   FROM dai\n   GROUP BY dt)\nSELECT dt,\n       sum(amount) over (\n                         ORDER BY dt ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS supply\nFROM daily_amounts\nORDER BY dt;"}
{"prompt": "This SQL query calculates the sum of all trade values for the address \"b86991c6218b36c1d19d4a2e9eb0ce3606eb48\" in millioins.", "completion": " SELECT SUM(\"tradeValues\"[1]) / 1e6\nFROM idex.\"IDEX1_call_trade\" t\nWHERE \"tradeAddresses\"[1] = '\\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'"}
{"prompt": "This SQL query returns the number of swaps that have taken place on the Totle platform in the last 24 hours.", "completion": " SELECT count(*) FROM ( \n    select * from totle.\"TotlePrimary_evt_LogSwap\" UNION ALL\n    SELECT * FROM totle.\"TotlePrimary2.1_evt_LogSwap\"\n) swap\nLEFT JOIN ethereum.transactions tx on tx.hash = swap.evt_tx_hash\nWHERE DATE_PART('Day',now() - tx.block_time::timestamptz) < 1;"}
{"prompt": "This query returns the total BNB Holdings for all addresses that are not the BNB burn addresses.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    -tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address = '\\xB8c77482e45F1F44dE1745F52C74426C631bDD52' -- BNB ERC20\nUNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\xB8c77482e45F1F44dE1745F52C74426C631bDD52' --BNB ERC20\n)\nSELECT sum(bnb_holdings) as total_bnb_erc20_supply\nFROM (\nSELECT address, 0.5 * ((sum(amount)/1e18) + ABS(sum(amount)/1e18)) as bnb_holdings\nFROM transfers\nWHERE \naddress != '\\x38b661e9df2cc4a7570618aa6645319d6bdf2f46' \nAND \naddress != '\\x00d41f0c9a94edbfac0cc0b3b02bd1f14a5ee237' \nAND address != '\\xbbab93283b0660b741f8b4d9cb03ef752cd1872c'\nAND address != '\\xebdce3b3775c5683c96ca754e4130ea5175de85e'\n-- (BNB Burn Address 1 & 2)\nGROUP BY 1\nORDER BY 2 desc\n) as data\n-- GROUP BY 1\n-- HAVING bnb_holdings > 0 \n\n\n"}
{"prompt": "This query will select all data from the moloch \"Moloch_evt_SubmitProposal\" table, and order it by the first column.", "completion": " SELECT *\nFROM moloch.\"Moloch_evt_SubmitProposal\"\nORDER BY 1"}
{"prompt": "This query calculates the percentage of total ETH spent on the Ethereum Name Service (ENS) Registry that came from primary and secondary markets. \n\nThe data used is from the ENS Registry event logs for \"NewOwner\" and \"Transfer\" events, as well as the prices of ETH in USD from the \"layer1_usd_eth\" table. \n\nThe query first calculates the total ETH spent in each week from primary and secondary markets, then calculates the average price of ETH in USD for each week. It then calculates the cumulative total ETH spent in each market, taking into account the price of ETH for each week. \n\nFinally, the query calculates the percentage of total ETH spent on the ENS Registry that came from primary and secondary markets, for each week since May 17th, 2017.", "completion": " WITH ens1 AS (SELECT date_trunc ('week', tx.block_time) date, SUM (tx.value/1e18) eth_spent\n                FROM ethereumnameservice.\"ENSRegistry_evt_NewOwner\" r\n                LEFT JOIN ethereum.transactions tx\n                ON tx.hash = r.evt_tx_hash\n                GROUP BY 1),\n    ens2 AS (SELECT date_trunc ('week', tx.block_time) date, SUM (tx.value/1e18) eth_spent\n                FROM ethereumnameservice.\"ENSRegistry_evt_Transfer\" r\n                LEFT JOIN ethereum.transactions tx\n                ON tx.hash = r.evt_tx_hash\n                GROUP BY 1),\n    price1 AS (SELECT date_trunc ('week', minute) date, AVG (price) avg_price_eth_usd\n                    FROM prices.layer1_usd_eth\n                    GROUP BY 1),\n    cumul AS (SELECT ens1.date,\n                SUM (ens1.eth_spent * price1.avg_price_eth_usd) OVER (ORDER BY ens1.date) AS primary_spend,\n                SUM (ens2.eth_spent * price1.avg_price_eth_usd) OVER (ORDER BY ens2.date) AS secondary_spend\n                FROM ens1\n                JOIN price1\n                  ON ens1.date = price1.date\n                JOIN ens2\n                  ON ens2.date = price1.date)\n\nSELECT cumul.date, \n        COALESCE (cumul.primary_spend / NULLIF ((cumul.primary_spend + cumul.secondary_spend), 0), 0) AS primary_mkt_spend_pct,\n        COALESCE (cumul.secondary_spend / NULLIF ((cumul.primary_spend + cumul.secondary_spend), 0), 0) AS secondary_mkt_spend_pct\nFROM cumul\nWHERE cumul.date > '20170517'"}
{"prompt": "The following SQL query returns the total number of trades on DEX.AG for each week, as well as the date of each week. The data is ordered by the date of the week.", "completion": " SELECT date_trunc('week', block_time) AS Date,\n        COUNT(*) AS \"Total trades\"\nFROM dexag.\"DexTrading_evt_Trade\" trade\nLEFT JOIN ethereum.transactions tx\nON trade.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "The following query selects the date, dai transaction volume, and all time dai transaction volume for the past 10 days from the erc20 transfer table. The data is ordered by day, with the most recent day appearing first.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\nsum(e.value/1e18) as dai_transaction_volume,\nsum(sum(e.value/1e18)) over (order by date_trunc('day', block_time)) as all_time_dai_transaction_volume\nFROM erc20.\"Transfer\" e\nLEFT JOIN ethereum.\"transactions\" tx ON e.tx_hash = tx.hash\nWHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\nGROUP BY 1 \nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This SQL query calculates the average \"DutchX price\" and the average \"Market price\" for the GNO token, as well as the \"GNO discount\" (the difference between the two prices, expressed as a percentage). The data is grouped by day.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    avg(\"buyVolume\" / \"sellVolume\") as \"DutchX price\",\n    avg(gno.average / eth.average) as \"Market price\",\n    (avg(gno.average / eth.average) / avg(\"buyVolume\" / \"sellVolume\") - 1)*100 as \"GNO discount\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" gno \n\nWHERE \"sellToken\" = '\\x6810e776880c02933d47db1b9fc05908e5386b96' --gno\nAND \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', gno.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND gno.symbol = 'GNO'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "This SQL query returns a table with the following columns:\n\n- \"\uc77c\uc790\": The date of the event, truncated to the nearest day.\n- \"\uba54\ubaa8\ub9ac\uc5bc \ud06c\ub9ac\uc2a4\ud0c8\": The ID of the memorial crystal.\n- \"\uac74\uc218\": The number of events that occurred on the given day and involved the given memorial crystal.\n\nThe table only includes events that occurred on or after 2022-06-02 and on or before 2022-06-03, and only includes events where the \"from\" address was the null address (0x0) and the \"to\" address was not the null address.", "completion": " select date_trunc('day', evt_block_time) as \"\uc77c\uc790\", \r\n       id as \"\uba54\ubaa8\ub9ac\uc5bc \ud06c\ub9ac\uc2a4\ud0c8\", \r\n       count(\"value\") as \"\uac74\uc218\" \r\n--22.07.11. \ubbfc\ud305\uc758 \uacbd\uc6b0\ub9cc \ub098\uc624\ub294 \ud14c\uc774\ube14 \ud655\uc778\r\nfrom erc1155.\"ERC1155_evt_TransferSingle\"\r\nwhere 1=1\r\n      --Desperado: Crystal\r\n      and contract_address='\\x82C289CD41a793f1AAe5b2cA9FC63C219Ea8ed81'\r\n      --\ubbfc\ud305 \uc2e4\uc218\uc774\uae30 \ub54c\ubb38\uc5d0 \uc81c\uc678\r\n      and evt_block_time not between to_timestamp('2022-06-02 00:01', 'yyyy-mm-dd hh24:mi') and  to_timestamp('2022-06-03 00:00', 'yyyy-mm-dd hh24:mi')\r\n      --\ubbfc\ud305\r\n      and \"from\"='\\x0000000000000000000000000000000000000000'\r\n      --burn \uc81c\uc678\r\n      and \"to\" <> '\\x0000000000000000000000000000000000000000'\r\ngroup by 1, 2\r\norder by 1, 2;"}
{"prompt": "This query returns the number of unique buyers from the uniswap Exchange_evt_TokenPurchase and _EthPurchase events who have made a transaction in the past week.", "completion": " SELECT COUNT(DISTINCT \"buyer\")\nFROM (SELECT *\n      FROM uniswap.\"Exchange_evt_TokenPurchase\"\n      UNION ALL \n      SELECT *\n      FROM uniswap.\"Exchange_evt_EthPurchase\") as unique_address\n      INNER JOIN ethereum.transactions tx ON unique_address.tx_hash = tx.hash\n      WHERE tx.block_time > now() - interval '1 week'\n\n"}
{"prompt": "This query returns the total transaction fees paid by a bot in USD terms. The bot's ID is 10aab4b0ef76aa2ac9b5909e671517a1171b050e. The query only returns data for transactions that occurred in 2019.", "completion": " -- bot 10aab4b0ef76aa2ac9b5909e671517a1171b050e \nWITH eth_prices as (\n    select \n        minute, \n        price,\n        symbol\n    from prices.usd\n    where symbol in ('ETH')\n        and minute > '2019-01-01' and minute < '2020-01-01'\n        -- only for 2019!\n),\nbot_liquidations as (\n        select \n            liquidator,\n            borrower,\n            \"repayAmount\",\n            cast(\"cTokenCollateral\" as varchar) as collateral,\n            \"seizeTokens\",\n            cast(contract_address as varchar) as repaid,\n            evt_tx_hash\n        from compound_v2.\"cErc20_evt_LiquidateBorrow\"\n        where liquidator = '\\x10aab4b0ef76aa2ac9b5909e671517a1171b050e'\n        UNION\n        select\n            liquidator,\n            borrower,\n            \"repayAmount\",\n            cast(\"cTokenCollateral\" as varchar) as collateral,\n            \"seizeTokens\",\n            cast(contract_address as varchar) as repaid,\n            evt_tx_hash\n        from compound_v2.\"cEther_evt_LiquidateBorrow\"\n        where liquidator = '\\x10aab4b0ef76aa2ac9b5909e671517a1171b050e'\n),\nbot_liquidations_complete as (\n    SELECT bot_liquidations.liquidator\n    , tx.hash\n    , tx.block_time\n    , tx.gas_price as gas_price\n    , p.price as eth_price\n    , r.gas_used\n    FROM bot_liquidations \n    LEFT JOIN ethereum.transactions tx\n    ON bot_liquidations.evt_tx_hash = tx.hash\n    LEFT JOIN eth_prices p\n    ON date_trunc('minute', tx.block_time) = p.minute\n    LEFT JOIN ethereum.receipts r\n    ON bot_liquidations.evt_tx_hash = r.tx_hash\n)\n\n-- TODO: failed tx fees\n-- how to get failed tx fees? maybe just get failed txes from liquidator to compound? this isn't quite right b/c there may be failures that are *non*-liquidations, but it's more likely right than not\n\nselect liquidator, tx_hash\n, gas_used * (gas_price * eth_price) / (10^18) as tx_fee_usd\nfrom bot_liquidations_complete;"}
{"prompt": "This query returns the tx_hash, address, and amount for all ERC20 \"Transfer\" events for the contract with the address \"0x4Fabb145d64652a948d72533023f6E7A623C7C53\".", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\x4Fabb145d64652a948d72533023f6E7A623C7C53' --BUSD\n)\n"}
{"prompt": "This SQL query calculates the total amount of SAI in circulation. It does this by summing the amount of SAI minted and the amount of SAI burned.", "completion": " WITH mint AS (SELECT SUM(wad/1e18) as amount FROM maker.\"SAI_evt_Mint\"),\nburn AS(SELECT SUM(-wad/1e18) as amount FROM maker.\"SAI_evt_Burn\")\nSELECT mint.amount+burn.amount AS \"SAI in circulation\" FROM mint, burn\n"}
{"prompt": "This query returns the total fees collected by Uniswap over the past 365 days in USD, broken down by day.", "completion": " SELECT date_trunc('days', tx.block_time) AS Date,\n       SUM(eth/1e18*p.price*0.003) AS fees,\n       SUM (SUM(eth/1e18*p.price*0.003)) OVER (ORDER BY date_trunc('days', tx.block_time)) AS TOTAL\nFROM (\n        (SELECT evt_tx_hash,\n                eth_sold AS eth\n         FROM uniswap.\"Exchange_evt_TokenPurchase\")\n      UNION ALL\n        (SELECT evt_tx_hash,\n                eth_bought AS eth\n         FROM uniswap.\"Exchange_evt_EthPurchase\")) ether\nINNER JOIN\n  (SELECT hash,\n          block_time\n   FROM ethereum.transactions tx\n   WHERE tx.block_time > now() - interval '365 days'\n     AND block_time < date_trunc('day', NOW())) tx ON ether.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 DESC;"}
{"prompt": "This SQL query returns the top 50 accounts that have staked ZRX tokens, as well as the total value of those tokens in USD.", "completion": " WITH staked AS\n(\nSELECT \n\"_from\" as account, \nsum(\"_value\"/1e18) as ZRX_staked\nFROM zeroex.\"ZRXToken_evt_Transfer\"\nWHERE \"_to\" = '\\xBa7f8b5fB1b19c1211c5d49550fcD149177A5Eaf'\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 50\n),\n\nZRX_price AS (\nSELECT\nminute,\nprice\nFROM prices.\"usd\" \nWHERE symbol = 'ZRX'\nGROUP BY 1, 2\nORDER BY 1 desc\nLIMIT 1\n)\n\nSELECT account, ZRX_staked, sum(ZRX_staked* p.price) as ZRX_staked_USD\nFROM staked, ZRX_price p\nGROUP BY 1,2\nORDER BY 2 desc\n"}
{"prompt": "This SQL query returns the total number of axies held by each address.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address = '\\x37236cd05b34cc79d3715af2383e96dd7443dcf1' -- SLP\n-- UNION ALL\n    -- SELECT\n    -- evt_tx_hash AS tx_hash,\n    -- tr.\"to\" AS address,\n    -- tr.value AS amount\n    --  FROM erc20.\"ERC20_evt_Transfer\" tr \n    --  WHERE contract_address = '\\x37236cd05b34cc79d3715af2383e96dd7443dcf1' --SLP\n)\n\nSELECT address, count(tx_hash) as total_axies\nFROM transfers\n--WHERE address != '\\x0000000000000000000000000000000000000000' AND address != '\\xf4158e282f2317597e31c028978c7fb7275d6fb4'\n\nGROUP BY 1\nORDER BY 2 desc\n-- LIMIT 25\n"}
{"prompt": "This SQL query returns the total volume of WBTC transactions over the past 7 days, grouped by day.", "completion": " SELECT date_trunc('days', tx.block_time) AS Date,\n      SUM(amount/1e8*p.price) AS volume\nFROM (\n     select call_tx_hash,amount,asset_address from (\n\t\tselect \n\t\t  cast(subactions->>'actionType' as integer) as action_type,\n\t\t  substring((subactions->'encodedParams')::text, 28, 40) as asset_address,\n\t\t  hex2numeric(substring((subactions->'encodedParams')::text, 68, 64)) as amount,\n\t\t  call_tx_hash\n\t\t from (select  jsonb_array_elements(actions) as subactions, call_tx_hash from hydroprotocol.\"Margin_call_batch\") a ) b where b.action_type = 5 and asset_address = '2260fac5e5542a773aa44fbcfedf7c193bc2c599'\n    ) deposits\nINNER JOIN\n     (SELECT hash,\n             block_time\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '7 days'\n        AND block_time < date_trunc('day', NOW())) tx ON deposits.call_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'BTC'\nGROUP BY 1\nORDER by 1"}
{"prompt": "This SQL query calculates the success rate of liquidations on the Compound v2 platform for the past 50 weeks. It does this by first calculating the number of successful liquidations and total liquidations for each week, and then dividing the number of successful liquidations by the total number of liquidations.", "completion": " WITH successful AS \n(\nSELECT\ndate_trunc('week', block_time) week,\ncount(\"call_tx_hash\") as success\nFROM compound_v2.\"cEther_call_liquidateBorrow\" s\nLEFT JOIN ethereum.\"transactions\" tx on s.call_tx_hash = tx.hash\nWHERE call_success = true\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50),\n\ntotal AS \n(SELECT\ndate_trunc('week', block_time) week,\ncount(\"call_tx_hash\") as total\nFROM compound_v2.\"cEther_call_liquidateBorrow\" t\nLEFT JOIN ethereum.\"transactions\" tx on t.call_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50)\n\nSELECT successful.\"week\",sum(\"success\")/sum(\"total\") as success_rate\nFROM successful\nLEFT JOIN total on successful.week = total.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This SQL query calculates the net borrows for the Fulcrum USDC iToken contract on a daily basis, and also calculates the cumulative net borrows over time.", "completion": " WITH net_borrow AS \n(\n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(\"borrowAmount\"/1e18) as borrows\n    FROM fulcrum.\"iToken_evt_Borrow\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\n    GROUP BY 1 \nUNION ALL\n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(-Amount/1e18) as borrows\n    FROM fulcrum.\"iToken_evt_Repay\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\n    GROUP BY 1 \n)\n\nSELECT \nnet_borrow.day,\nsum(borrows) as net_borrow,\nsum(sum(borrows)) over (order by net_borrow.day) as cumul_net_borrow\nFROM net_borrow\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This SQL query returns the name of the token, the date of the trade, and the total volume of the trade for each token.", "completion": " SELECT name, trade_time::date, SUM(quantity * price)\nFROM trades t, tokens tok\nWHERE t.base_asset = tok.symbol\nGROUP BY 1, 2;"}
{"prompt": "This SQL query returns a list of all Authereum contracts sorted by the amount of DAI stored in each contract.", "completion": " WITH wallets AS\n  (SELECT address\n   FROM ethereum.traces\n   WHERE \"from\" IN ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8',\n                    '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea',\n                    '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046')\n     AND TYPE = 'create'),\n     peraddress AS\n  (SELECT \"from\" AS address, -value / 1e18 AS amount\n   FROM erc20.\"ERC20_evt_Transfer\"\n   WHERE \"from\" IN\n       (SELECT address\n        FROM wallets)\n     AND contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n   UNION ALL SELECT \"to\" AS address,\n                    value / 1e18 AS amount\n   FROM erc20.\"ERC20_evt_Transfer\"\n   WHERE \"to\" IN\n       (SELECT address\n        FROM wallets)\n     AND contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f')\nSELECT concat('https://etherscan.io/address/0',right(text(address),41)) AS address,\n       sum(amount) AS amount\nFROM peraddress\nGROUP BY address\nORDER BY amount DESC"}
{"prompt": "This SQL query gets the total amount of USD borrowed from the Compound v1 smart contract per token, grouped by week, for the last two months.", "completion": " SELECT date_trunc('week', tx.block_time) AS weekStarting,       --Get the time from the Ethereum transactions table\n       p.symbol AS token,                                       --Get token symbols from the coincap USD price table\n       SUM((b.amount / 1e18) * p.average) AS usdAmount          --Get the amount borrowed from the smart contract event\nFROM compoundv1.\"MoneyMarket_evt_BorrowTaken\" b,                  --Table with the relevant event\n     ethereum.transactions tx,                                  --Table with Ethereum transactions\n     coincap.\"tokens/usd\" p                                     --Table with token/USD prices\nWHERE b.tx_hash = tx.hash                                       --Join the smart contract event on transactions\n  AND b.\"asset\" = p.asset                                       --Join asset from smart contract event with USD prices\n  AND date_trunc('minute', p.time) = date_trunc('minute', tx.block_time) --Join USD price on time from transactions\n  AND p.time > now() - interval '2 months'                      --See the last two months\n  AND tx.success = TRUE                                         --Remove invalid transactions\nGROUP BY weekStarting,                                          \n         token\nORDER BY weekStarting;"}
{"prompt": "This SQL query returns the top Art Blocks collections by volume, including the ID, collection link, number of sales, total ETH value, total USD value, floor price, median price, and high price.", "completion": " SELECT\n    '<a href=\"https://dune.com/cryptuschrist/art-blocks-custom-dashboard?Project+ID=' || ROUND(project_id,0)::text || '\"> \ud83d\udd32 ' || ROUND(project_id,0)::text || '</a>'   as \"ID\",\n    collection_link, \n    COUNT(*) AS sales, \n    SUM(price) AS eth, \n    SUM(price_usd) AS usd,\n    CASE WHEN COUNT(*) > 1 THEN MIN(price) ELSE NULL END AS floor, \n    percentile_cont(.5) within GROUP (ORDER BY price) AS median, \n    CASE WHEN COUNT(*) > 1 THEN MAX(price) ELSE NULL END  AS high \nFROM dune_user_generated.cryptuschrist_allexchange3 a \nLEFT JOIN  dune_user_generated.cryptus_art_blocks_tokens blo ON blo.nft_contract_address = a.nft_contract_address AND a.token_id = blo.token_id::text   \nWHERE CASE WHEN '{{Time}}' = '5 Year' THEN '5 Year' = '5 Year' ELSE block_time > (NOW() - INTERVAL '{{Time}}') END \nAND a.nft_contract_address IN ('\\xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270', '\\x059edd72cd353df5106d2b9cc5ab83a52287ac3a') \nGROUP BY 1,2 \nHAVING SUM(price) > 0.01 \nORDER BY 4 DESC NULLS LAST "}
{"prompt": "This query returns the number of unique lenders per day on the Fulcrum platform, for the past 60 days. The data is grouped by day and ordered from most recent to least recent.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\ncount(distinct minter) as lenders\nFROM fulcrum.\"iToken_evt_Mint\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1 \nORDER BY 1 desc \nLIMIT 60"}
{"prompt": "This query returns the number of transactions made with Authereum wallets each day. The data is ordered by the date of the transactions.", "completion": " WITH wallets AS\n  (SELECT block_time AS creation_time,\n          block_number AS creation_block_number,\n          address\n   FROM ethereum.traces\n   WHERE \"from\" IN ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8',\n                    '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea',\n                    '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046')\n     AND TYPE = 'create'),\n     DATA AS\n  (SELECT date_trunc('day', et.\"block_time\") AS \"day\",\n          count(DISTINCT et.tx_hash) AS transactions\n   FROM ethereum.traces et\n   JOIN wallets ON wallets.address = et.\"from\"\n   WHERE et.\"to\" IN ('\\x237EDCDd43349227ef511581Cc834962ECf23076',\n                     '\\x20af9e54a3670ef6a601bca1f1ec22b1f93cbe23',\n                     '\\x2e1723d1dfa2947f0d08d5c5d214b71def4f951f',\n                     '\\x79fee076b1bcd4054dff0b4364c26899492198dc',\n                     '\\x211deb5c0a28a213fcf5976ac22c70ff96b9004c',\n                     '\\x185c46c8d3ef5155f3678e69c827db7a2116a6cd',\n                     '\\xd8cab604bdd8cbb7c3eb0c26f7dc3abffb005a92',\n                     '\\xae1710e83211decb356f031a9346a24ef55055e0')\n     AND call_type = 'delegatecall'\n     AND tx_success = TRUE\n     AND error IS NULL\n     AND substring(\"input\"\n                   FOR 4) IN ('\\x26aa4655',\n                              '\\xd5553b88')\n   GROUP BY 1)\nSELECT \"day\",\n       transactions\nFROM DATA\nORDER BY \"day\""}
{"prompt": "This SQL query shows the number of distinct URLs for GSN relayers that have been added in the past 10 weeks.", "completion": " SELECT date_trunc('week', tx.block_time), COUNT(DISTINCT r.url)\nFROM gasstationnetwork.\"RelayHub_evt_RelayAdded\" r\nLEFT JOIN ethereum.transactions tx on r.evt_tx_hash = tx.hash\nWHERE block_time > now() - interval '10 weeks'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns the number of unique addresses that have made trades on the Dexag decentralized exchange. The query uses the DexTrading_evt_Trade table to get information on all trades that have taken place, and then uses the ethereum.transactions table to get information on the corresponding Ethereum transactions.", "completion": " SELECT COUNT(DISTINCT tx.\"from\") as \"Unique Addresses\"\nFROM dexag.\"DexTrading_evt_Trade\" trade\nLEFT JOIN ethereum.transactions tx\nON trade.evt_tx_hash = tx.hash"}
{"prompt": "This SQL query returns the price of BZRX on the Uniswap decentralized exchange, denominated in ETH. The price is calculated by taking the trade volume of BZRX token swaps on Uniswap and dividing it by the total ETH volume of those trades. The data is sourced from the dex.\"trades\" and prices.layer1_usd_eth tables.", "completion": " SELECT block_time,\n       CASE\n           WHEN token_a_symbol = 'WETH' THEN token_a_amount / (token_b_amount_raw / 1e18) * price\n           WHEN token_b_symbol = 'WETH' THEN token_b_amount / (token_a_amount_raw / 1e18) * price\n       END\nFROM dex.\"trades\" d\nINNER JOIN prices.layer1_usd_eth p ON date_trunc('minute', d.block_time) = p.minute\nWHERE project = 'Uniswap'\n  AND (token_a_address = '\\x56d811088235f11c8920698a204a5010a788f4b3'\n       OR token_b_address = '\\x56d811088235f11c8920698a204a5010a788f4b3')\n  AND (token_a_symbol = 'WETH'\n       OR token_b_symbol = 'WETH')\nORDER BY block_time"}
{"prompt": "This SQL query returns the number of Loopring withdrawals that have occurred in the past 56 days, grouped by day.", "completion": " SELECT date_trunc('day', e.evt_block_time),\n       COUNT(*)\nFROM loopring.\"DEXBetaV1_evt_WithdrawalRequested\" e\nWHERE date_trunc('day', evt_block_time) >= now() - interval '56 days'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "The SQL query below returns the total ETH volume traded on Kyber Network for each day in the past week.", "completion": " SELECT date_trunc('day', tx.block_time),\n       SUM(sumeth)\nFROM (SELECT hash, block_time FROM ethereum.transactions tx\n                WHERE tx.block_time > now() - interval '1 weeks'\n                AND block_time < date_trunc('week', NOW())) AS tx\nINNER JOIN (WITH volume AS\n                (WITH fee_mapping AS\n                   (SELECT evt_tx_hash, evt_index, \"ethWeiValue\" /1e18 AS value, (SELECT count(*)\n                                                                            FROM kyber.\"FeeBurner_evt_AssignBurnFees\"\n                                                                            WHERE evt_tx_hash = trade.evt_tx_hash\n                                                                            AND evt_index < trade.evt_index) AS burnFees\n                    FROM kyber.\"Network_evt_KyberTrade\" trade\n                    ORDER BY 1, 2)\n                SELECT evt_tx_hash, (value * (burnFees - lag(burnFees, '1', '0') OVER (PARTITION BY evt_tx_hash ORDER BY evt_index))) AS ethvolume\n                 FROM fee_mapping f\n                 ORDER BY evt_tx_hash)\n                 \n            SELECT evt_tx_hash, SUM(ethvolume) as sumeth\n              FROM volume\n              GROUP BY 1\n              ORDER BY 1) AS volume\n            ON volume.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1;\n"}
{"prompt": "This query returns the total number of transactions made with Authereum wallets. The data is grouped by day, and the total number of transactions is calculated for each day.", "completion": " WITH wallets AS\n  (SELECT block_time AS creation_time,\n          block_number AS creation_block_number,\n          address\n   FROM ethereum.traces\n   WHERE \"from\" IN ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8',\n                    '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea',\n                    '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046')\n     AND TYPE = 'create'),\n     DATA AS\n  (SELECT date_trunc('day', et.\"block_time\") AS \"day\",\n          count(DISTINCT et.tx_hash) AS transactions\n   FROM ethereum.traces et\n   JOIN wallets ON wallets.address = et.\"from\"\n   WHERE et.\"to\" IN ('\\x237EDCDd43349227ef511581Cc834962ECf23076',\n                     '\\x20af9e54a3670ef6a601bca1f1ec22b1f93cbe23',\n                     '\\x2e1723d1dfa2947f0d08d5c5d214b71def4f951f',\n                     '\\x79fee076b1bcd4054dff0b4364c26899492198dc',\n                     '\\x211deb5c0a28a213fcf5976ac22c70ff96b9004c',\n                     '\\x185c46c8d3ef5155f3678e69c827db7a2116a6cd',\n                     '\\xd8cab604bdd8cbb7c3eb0c26f7dc3abffb005a92',\n                     '\\xae1710e83211decb356f031a9346a24ef55055e0')\n     AND call_type = 'delegatecall'\n     AND tx_success = TRUE\n     AND error IS NULL\n     AND substring(\"input\"\n                   FOR 4) IN ('\\x26aa4655',\n                              '\\xd5553b88')\n   GROUP BY 1)\nSELECT \"day\",\n       sum(transactions) OVER (\n                               ORDER BY \"day\" ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS transactions_running_total\nFROM DATA"}
{"prompt": "This SQL query returns the top 10 holders of DAI by address, sorted by the amount of DAI held.", "completion": " WITH DAI_transfers AS \n(\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    -tr.value/1e18 AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f' \nUNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value/1e18 AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f' \nUNION ALL\n    SELECT \n    call_tx_hash as tx_hash, \n    \"src\" AS address,\n    sum(rad/1e45) as amount\n    FROM makermcd.\"VAT_call_move\" \n    WHERE dst = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\n    GROUP BY 1,2\nUNION ALL \n    SELECT \n    call_tx_hash as tx_hash,\n    \"dst\" AS address,\n    sum(-rad/1e45) as amount\n    FROM makermcd.\"VAT_call_move\" \n    WHERE src = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\n    GROUP BY 1,2\n)\n\nSELECT\naddress,\nsum(amount)\nFROM DAI_transfers\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 10\n"}
{"prompt": "The following SQL query will select the date and time of a transaction, the sum of the amount of the transaction in US dollars, and the volume of the transaction in US dollars.", "completion": " \nSELECT date_trunc('day', tx.block_time),\nSUM((\"_toAmount\")/10^decimals * p.price) as volume\nFROM bancor.\"BancorNetwork_v1_evt_Conversion\" b\nLEFT JOIN ethereum.transactions tx ON b.evt_tx_hash = tx.hash \nLEFT JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time) AND p.contract_address = \"_toToken\"\nLEFT JOIN erc20.tokens erc ON erc.contract_address = \"_toToken\"\nWHERE tx.block_time > now() - interval '7 days'\nGROUP BY 1\nORDER BY 1\n\n\n/*\n\n--- OLD contracts\n\nSELECT date_trunc('week', tx.block_time) AS time, SUM((bnt)/1e18 * p.price) as volume\nFROM ((SELECT evt_tx_hash, \"_return\" AS bnt FROM bancor.\"BancorConverter_evt_Conversion\"\n        WHERE \"_toToken\" = '\\x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c')\n      UNION ALL\n        (SELECT evt_tx_hash, \"_amount\" AS bnt FROM bancor.\"BancorConverter_evt_Conversion\"\n            WHERE \"_fromToken\" = '\\x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c')) bnt\n            \nINNER JOIN (SELECT hash, block_time FROM ethereum.transactions tx\n                WHERE tx.block_time > now() - interval '24 weeks'\n                ) tx\n    ON bnt.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'BNT'\nGROUP BY 1\nORDER BY 1;8*/"}
{"prompt": "This query returns the number of transactions made to a certain address, grouped by day. The data is ordered by day.", "completion": " WITH jobs AS\n  (SELECT date_trunc('day', tx.block_time) AS DAY,\n          *\n   FROM ethereum.transactions tx\n   WHERE tx.\"to\" = '\\xbf07ff45f14c9ff0571b9fbdc7e2b62d29931224'\n     AND substring(DATA,1,4) = '\\x307c6f8e')\nSELECT COUNT(*),\n       DAY\nFROM jobs\nGROUP BY DAY\nORDER BY DAY"}
{"prompt": "This SQL query returns a list of all the addresses that sent ETH to the addresses that got HEX from the Origin address, along with the number of transactions each address made.", "completion": " select \"from\", count(*) as number_of_txs\nfrom ethereum.transactions\nwhere \"to\" IN ('\\x015375e92e38b3fb110e01b822a89656d941c681','\\x06da460035ec6ae4ce1f85bf236c6f41660032d2','\\x3e3ecc7b9a463dcaa9d7539e29a076da2293c974','\\x676af67097609f000ba49a466e06031df8af1c40','\\x6d991fc33c29bbb2d2c77689004e82886def07b6','\\x76182558cbf59dec0c022835e92c3eab81f23fcf','\\x82932ecd90b20d79a2808d76901cab48a117f6a1','\\x9860cc899d884f00d9b46a12de21e6d318063687','\\xa5ca8a28536c25b019fa2fb910a0e38417e49057','\\xc4e8d9f135fa63c1ef590bcc62a45bae2745419d','\\xe938a00dde6a248e3c9fba02fd540cfa2b53bec8','\\xf5340751be89a2af00a086a9f69ea541b18344cc')\ngroup by \"from\""}
{"prompt": "This SQL query returns the total amount of liquidity provided by each provider on the curve.fi platform.", "completion": " select provider, sum(token_supply/1e18) from curvefi.\"compound_v2_evt_AddLiquidity\" group by provider;"}
{"prompt": "The following SQL query returns the average gas used and the average gas limit for each hour over the past 14 days, ordered from most recent to least recent.", "completion": " SELECT \n    date_trunc('hour', time) as day,\n    AVG(gas_used*100 / gas_limit) as \"avg_block_filled_%\",\n    AVG(gas_limit),\n    AVG(gas_used) as avg_gas_used\nFROM ethereum.\"blocks\"\nWHERE time > now() - interval '14 days'\nGROUP BY 1\nORDER BY 1 DESC\n"}
{"prompt": "This query returns the total amount of ETH sent to the fairwin address, grouped by week and year.", "completion": " /**\n * Get the total ETH sent to fairwin, grouped by week and year\n */\nWITH addresses(addr) AS (VALUES ('\\x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c'))\nselect sum(value / 1e18) as total_eth, \n       date_trunc('week', block_time) as \"ym\"\nfrom ethereum.transactions \nwhere \"to\" IN (select addr::bytea from addresses) \n  and block_number >= 8235058\ngroup by \"ym\""}
{"prompt": "This SQL query returns the sum of all ETH stored in Dharma contracts.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\xfc00C80b0000007F73004edB00094caD80626d8D') -- DharmaSmartWalletFactoryV1\n\tand type = 'create'\n),\nperaddress as (\n    SELECT address, sum(amount) / 1e18 as amount\n    FROM (\n        SELECT \"from\" AS address, -value AS amount\n         FROM ethereum.traces\n         WHERE \"from\" IN (SELECT address FROM wallets)\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    UNION ALL\n        SELECT \"to\" AS address, value AS amount\n         FROM ethereum.traces\n         WHERE \"to\" IN (SELECT address FROM wallets )\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    ) t\n    group by 1\n)\nselect sum(amount)\nfrom peraddress"}
{"prompt": "This query returns the price of a given token (buyToken) in terms of another token (sellToken), averaged over all trades in a given batch. The price is returned in terms of how many buyTokens can be bought with one sellToken.", "completion": " SELECT\n    (solution.\"batchId\" - 1) as \"batchId\",\n    sell_token.\"symbol\" as \"sellToken\",\n    buy_token.\"symbol\" as \"buyToken\",\n    SUM(\"executedBuyAmount\") / SUM(\"executedSellAmount\") / 10^(buy_token.\"decimals\" - sell_token.\"decimals\") as \"price\"\nFROM gnosis_protocol.\"BatchExchange_evt_Trade\" trades\nJOIN gnosis_protocol.\"view_tokens\" buy_token\n    ON trades.\"buyToken\" = buy_token.\"token_id\"\nJOIN gnosis_protocol.\"view_tokens\" sell_token\n    ON trades.\"sellToken\" = sell_token.\"token_id\"\nJOIN ethereum.\"transactions\" transactions\n    ON transactions.hash = trades.evt_tx_hash\n    AND transactions.success = true\nJOIN gnosis_protocol.\"BatchExchange_call_submitSolution\" solution\n    ON solution.call_tx_hash=transactions.hash\nWHERE \n    0=0\n    -- AND trades.\"buyToken\" = 15\n    AND buy_token.\"symbol\" = 'SNX'\n    -- \nGROUP BY \n    solution.\"batchId\",\n    sell_token.\"symbol\",\n    buy_token.\"symbol\",\n    buy_token.\"decimals\",\n    sell_token.\"decimals\"\nORDER BY \n    buy_token.\"symbol\",\n    sell_token.\"symbol\",\n    solution.\"batchId\" desc;"}
{"prompt": "This SQL query returns data on the market, block time, and open interest for the Augur v2 market. The data is ordered by block time.", "completion": " SELECT market,\n       evt_block_time,\n       \"marketOI\" / 1e18 AS open_interest\nFROM augur_v2.\"Augur_evt_MarketOIChanged\"\nORDER BY 2"}
{"prompt": "This query returns the number of CDPs created per day, as well as the total number of CDPs created over time.", "completion": " SELECT \ndate_trunc('day', tx.block_time) AS day, \ncount(cdp) AS \"vaults created\",\nsum(count(cdp)) over (order by date_trunc('day', tx.block_time)) as \"all time vaults created\"\nFROM makermcd.\"CDP_MANAGER_evt_NewCdp\" cdp\nLEFT JOIN ethereum.transactions tx ON tx.hash = cdp.evt_tx_hash\nGROUP BY 1\nORDER BY 1 desc\n"}
{"prompt": "This query returns the amount of MGN minted by a particular user, as well as the success of the minting transaction and the block time of the minting transaction.", "completion": " SELECT \n    --mint.user,\n    mint.amount * 1e-18 as MGN,\n    mint.success,\n    -- mint.address as tx_address,\n    mint.tx_hash,\n    block.time as mint_time\nFROM dxdao.\"TokenFRTProxy_call_mintTokens\" mint\nJOIN ethereum.\"transactions\" tx\n    ON mint.tx_hash = tx.hash\nJOIN ethereum.\"blocks\" block\n    ON block.number = tx.block_number\nWHERE\n    -- mint.success AND\n    mint.user = '\\x305dc6d8bc5e3fd550a75909ab1ec04d73864525'::bytea\nORDER BY\n    block.time ASC\n    \n    \nSELECT \n    --mint.user,\n    mint.amount * 1e-18 as MGN,\n    mint.success,\n    -- mint.address as tx_address,\n    mint.tx_hash,\n    block.time as mint_time\nFROM dxdao.\"TokenFRTProxy_call_mintTokens\" mint\nJOIN ethereum.\"transactions\" tx\n    ON mint.tx_hash = tx.hash\nJOIN ethereum.\"blocks\" block\n    ON block.number = tx.block_number\nWHERE\n    -- mint.success AND\n    mint.tx_hash = '\\xe197f2c87767056ea5ca9fe8cc8b11dc03c15909d00dc5b441ffafb35338f130'::bytea\nORDER BY\n    block.time ASC\n    \n    https://bloxy.info/tx/0xe197f2c87767056ea5ca9fe8cc8b11dc03c15909d00dc5b441ffafb35338f130\n\n\nSELECT \n    --mint.user,\n    mint.amount * 1e-18 as MGN,\n    mint.success,\n    -- mint.address as tx_address,\n    mint.tx_hash\nFROM dxdao.\"TokenFRTProxy_call_mintTokens\" mint\nWHERE\n    -- mint.success AND\n    mint.tx_hash = '\\xe197f2c87767056ea5ca9fe8cc8b11dc03c15909d00dc5b441ffafb35338f130'::bytea\n    \n    \n\nSELECT \n    SUM(mint.amount * 1e-18) as MGN\nFROM dxdao.\"TokenFRTProxy_call_mintTokens\" mint\nWHERE\n    -- mint.success AND\n    mint.user = '\\x305dc6d8bc5e3fd550a75909ab1ec04d73864525'::bytea\n\n"}
{"prompt": "This SQL query returns the number of active users on the Avalanche network each month, as well as the rate of change in active users from the previous month.", "completion": " with users_monthly as (\n    select date_trunc('month', block_time) as block_date,\n        count(distinct `from`) as active_users_count\n    from avalanche_c.transactions\n    group by 1\n    order by 1\n),\n\nusers_monthly_change as (\n    select block_date,\n        active_users_count,\n        (active_users_count - lag(active_users_count, 1) over (order by block_date)) / (lag(active_users_count, 1) over (order by block_date)) as change_rate\n    from users_monthly\n    order by block_date\n)\n\nselect block_date,\n    active_users_count,\n    (case when change_rate > 50 then 50 else change_rate end) as change_rate  -- Do some normalize\nfrom users_monthly_change\norder by block_date"}
{"prompt": "This query returns data on the amount of money and tokens minted and redeemed for each type of currency. It also calculates the net amount of money and tokens for each type of currency.", "completion": " WITH mint AS\n  (SELECT CASE\n              WHEN contract_address = '\\x6c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e' THEN 'BAT'\n              WHEN contract_address = '\\xf5dce57282a584d2746faf1593d3121fcac444dc' THEN 'DAI'\n              WHEN contract_address = '\\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'ETH'\n              WHEN contract_address = '\\x158079ee67fce2f58472a96584a73c7ab9ac95c1' THEN 'REP'\n              WHEN contract_address = '\\x39aa39c021dfbae8fac545936693ac917d5e7563' THEN 'USDC'\n              WHEN contract_address = '\\xc11b1268c1a384e55c48c2391d8d480264a3a7f4' THEN 'WBTC'\n              WHEN contract_address = '\\xb3319f5d18bc0d84dd1b4825dcde5d5f7266d407' THEN 'ZRX'\n          END AS symbol, SUM(\"mintAmount\" / 10e18) AS sum_mint_amount, SUM(\"mintTokens\" / 10e18) AS sum_mint_token, minter\n  FROM compound_v2.\"cEther_evt_Mint\"\n  GROUP BY 1, 4),\n\nredeem AS (SELECT\n    CASE\n          WHEN contract_address = '\\x6c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e' THEN 'BAT'\n          WHEN contract_address = '\\xf5dce57282a584d2746faf1593d3121fcac444dc' THEN 'DAI'\n          WHEN contract_address = '\\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' THEN 'ETH'\n          WHEN contract_address = '\\x158079ee67fce2f58472a96584a73c7ab9ac95c1' THEN 'REP'\n          WHEN contract_address = '\\x39aa39c021dfbae8fac545936693ac917d5e7563' THEN 'USDC'\n          WHEN contract_address = '\\xc11b1268c1a384e55c48c2391d8d480264a3a7f4' THEN 'WBTC'\n          WHEN contract_address = '\\xb3319f5d18bc0d84dd1b4825dcde5d5f7266d407' THEN 'ZRX'\n      END AS symbol,\n     SUM(\"redeemTokens\" / 10e18) AS sum_redeem_token,\n     SUM(\"redeemAmount\" / 10e18) AS sum_redeem_amount,\n     redeemer\nFROM compound_v2.\"cEther_evt_Redeem\"\nGROUP BY 1, 4)\n\nSELECT \n    mint.symbol,\n    mint.sum_mint_amount,\n    mint.sum_mint_token,\n    redeem.sum_redeem_token,\n    redeem.sum_redeem_amount,\n    mint.sum_mint_amount - COALESCE(redeem.sum_redeem_amount, 0) AS amount,\n    mint.sum_mint_token - COALESCE(redeem.sum_redeem_token, 0) AS token,\n    redeem.redeemer AS address\nFROM mint\nLEFT JOIN redeem\nON mint.minter = redeem.redeemer\nORDER BY amount DESC"}
{"prompt": "This query returns data on the Sollet Solana Bridge for the period of time starting from 2021-01-01. The data includes the month, direction (in or out of ETH), number of users, volume in USD, and number of transactions.", "completion": " with sollet_to_sol as (\n    select\n        evt_tx_hash,\n        evt_block_time,\n        token,\n        amount,\n        recipient,\n        -- swap.contract_address,\n        'Solana Sollet Bridge' as bridge,\n        'out of eth' as direction\n    from solana.\"SplTokenSwap_evt_Swap\" swap\n    where evt_block_time > '2021-01-01'\n),\nsollet_to_eth as (\n    select\n        evt_tx_hash,\n        evt_block_time,\n        token,\n        amount,\n        recipient::text,\n        -- swap.contract_address,\n        'Solana Sollet Bridge' as bridge,\n        'into eth' as direction\n    from solana.\"SplTokenSwap_evt_Withdraw\" swap\n    where evt_block_time > '2021-01-01'\n),\nsollet as (\n    select * from sollet_to_sol\n    union all\n    select * from sollet_to_eth\n),\nprices as (\n    select minute, symbol, price from prices.usd\n    union all\n    select minute, symbol, price from prices.layer1_usd\n\n),\nsollet_with_price as (\n    select \n        s.*,\n        t.symbol,\n        t.decimals,\n        p.price,\n        tx.\"from\"\n    from sollet s\n    left join erc20.tokens t on s.token = t.contract_address\n    left join prices p on t.symbol = p.symbol and date_trunc('minute', s.evt_block_time) = p.minute\n    left join (select hash, \"from\" from ethereum.transactions) tx on tx.hash = s.evt_tx_hash\n)\n\nselect\n    date_trunc('month', evt_block_time) as month,\n    direction,\n    count(distinct \"from\") as users,\n    sum(amount / 10^decimals * price) as volume_usd,\n    count(distinct evt_tx_hash) as transactions\nfrom sollet_with_price\ngroup by 1,2\n\n-- select * from prices.usd\n-- limit 10"}
{"prompt": "This query returns the total Dai swapped to Sai by hour, starting from 2019-11-18 16:00:00.", "completion": " SELECT date_trunc('hour', tx.block_time) AS time,\n       SUM(wad/1e18),\nSUM (SUM(wad/1e18)) OVER (ORDER BY date_trunc('hour', tx.block_time)) as TOTAL\nFROM makermcd.\"ScdMcdMigration_call_swapDaiToSai\" m\nLEFT JOIN ethereum.transactions tx ON tx.hash = m.call_tx_hash\nWHERE call_success = TRUE\n  AND date_trunc('minute', tx.block_time) > '2019-11-18 16:00:00'\nGROUP BY 1;"}
{"prompt": "The following SQL query will find the total amount of iSAI received by each address, and order the results by the amount of iSAI received in descending order.", "completion": " WITH transfers AS (\n--     SELECT\n--     evt_tx_hash AS tx_hash,\n--     tr.\"from\" AS address,\n--     -tr.value AS amount\n--      FROM erc20.\"ERC20_evt_Transfer\" tr\n--      WHERE contract_address = '\\x14094949152eddbfcd073717200da82fed8dc960' -- iSAI\n-- UNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\x14094949152eddbfcd073717200da82fed8dc960' -- iSAI\n)\n\nSELECT address, sum(amount)/1e18 as total_isai_received\nFROM transfers\n-- WHERE address = '\\x0000000000000000000000000000000000000000'\nGROUP BY 1\nORDER BY 2 desc\n-- LIMIT 25\n"}
{"prompt": "This SQL query calculates the total amount of BNB that has been burned and swapped to the mainnet.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    -tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address = '\\xB8c77482e45F1F44dE1745F52C74426C631bDD52' -- BNB ERC20\nUNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\xB8c77482e45F1F44dE1745F52C74426C631bDD52' --BNB ERC20\n)\nSELECT sum(bnb_holdings) as total_swapped\nFROM (\nSELECT address, sum(amount)/1e18 as bnb_holdings\nFROM transfers\nWHERE \naddress != '\\x38b661e9df2cc4a7570618aa6645319d6bdf2f46' \nAND \naddress != '\\x00d41f0c9a94edbfac0cc0b3b02bd1f14a5ee237' \n-- (BNB Burn Address 1 & 2)\nGROUP BY 1\nORDER BY 2 desc\n) as data\n\n"}
{"prompt": "This query returns a list of the top 100 stakers of the arNXM cryptocurrency, along with the total amount of the currency that they have staked.", "completion": " SELECT staker,\n       sum(amount) AS wnxm\nFROM\n  (SELECT \"user\" AS staker,\n          \"wAmount\" / 1e18 AS amount\n   FROM armor_fi.\"arNXMVault_evt_Deposit\"\n   UNION ALL SELECT \"user\",\n                    \"wAmount\" / -1e18\n   FROM armor_fi.\"arNXMVault_evt_Withdrawal\") a\nGROUP BY 1\nORDER BY 2 DESC\nLIMIT 100"}
{"prompt": "This SQL query returns the total USD value of all ERC20 bets made by 'degens' (a nickname for risk-taking investors) over the course of a year, broken down by token.", "completion": " WITH data as (\nSELECT \ndate_trunc('day', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ncase \nwhen t.symbol= 'WETH' THEN e.value/1e18 * p_weth.price\nWHEN t.symbol = 'DAI' THEN e.value/1e18\nend\nas usd_value,\nt.symbol,\ne.evt_tx_hash\n-- p_weth.price as  curr_weth_price,\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\nJOIN prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 p_weth on (p_weth.symbol = t.symbol AND p_weth.minute = date_trunc('minute', tx.block_time))\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\nAND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n\nUNION (\nSELECT \ndate_trunc('day', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ne.value/1e18 as usd_value,\nt.symbol,\ne.evt_tx_hash\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\nAND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n)\n)\n\nSELECT data.datetime, sum(usd_value) as total_usd_value, data.symbol\nFROM data \nGROUP BY 1, 3\n"}
{"prompt": "This SQL query selects all data from the \"SalesClockAuction_evt_AuctionSuccessful\" table and limits the results to 1000.", "completion": " SELECT *\nFROM cryptokitties.\"SalesClockAuction_evt_AuctionSuccessful\"\nLIMIT 1000;"}
{"prompt": "This SQL query returns the number of distinct users who have made a transaction to a specific address, grouped by day, in the past 60 days.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\ncount(distinct \"from\") as distinct_users\nFROM ethereum.\"transactions\"\nWHERE \"to\" = '\\x29fe7D60DdF151E5b52e5FAB4f1325da6b2bD958'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 60"}
{"prompt": "This query returns the minimum price for ETH in USD for every minute starting from 2018-04-17.", "completion": " SELECT MINUTE,\n       price\nFROM prices.layer1_usd\nWHERE symbol = 'ETH'\n  AND MINUTE >= '2018-04-17'"}
{"prompt": "This SQL query returns the number of 1inch transactions per week.", "completion": " SELECT\n    date_trunc('week', tx.block_time) AS time,\n    COUNT(*) AS \"number\"\nFROM\n(\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v1_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v2_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v3_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v4_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v5_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v6_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minReturnAmount\" as \"toAmount\", \"fromTokenAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v7_call_swap\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minReturnAmount\" as \"toAmount\", \"fromTokenAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v8_call_swap\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minReturnAmount\" as \"toAmount\", \"fromTokenAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"OneInchExchange_call_swap\" WHERE call_success -- UNION ALL\n) oi\nLEFT JOIN ethereum.transactions tx on tx.hash = oi.tx_hash\nGROUP BY 1\nORDER BY 1 DESC;\n"}
{"prompt": "This SQL query returns the block number, time, and age of the most recent 100 blocks in the Ethereum blockchain.", "completion": " SELECT\n    number AS block_number,\n    time AS block_time,\n    date_trunc('second', now()) - time AS block_age\nFROM ethereum.\"blocks\"    \nORDER BY block_number desc\nLIMIT 100\n"}
{"prompt": "This SQL query returns the average price of KNC tokens auctioned for WETH tokens on the DutchX exchange, along with the average market price of KNC and WETH tokens and the percentage difference between the two.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    avg(\"sellVolume\" / \"buyVolume\") as \"DutchX price\",\n    avg(knc.average / eth.average) as \"Market price\",\n    (avg(knc.average / eth.average) / avg(\"sellVolume\" / \"buyVolume\") - 1)*100 as \"KNC discount\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" knc \n\nWHERE \"sellToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth \nAND \"buyToken\" = '\\xdd974d5c2e2928dea5f71b9825b8b646686bd200' --knc\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', knc.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND knc.symbol = 'KNC'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "This SQL query counts the number of entries in the \"Augur_evt_OrderFilled\" table.", "completion": " SELECT COUNT(*) FROM augur.\"Augur_evt_OrderFilled\""}
{"prompt": "This query returns the total number of users for each date in the table.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT evt_block_time AS date,\n                \"user\" AS account\n         FROM yamfinance.\"YAMPool_evt_Staked\") AS table1\n      GROUP BY account) AS table2\n   GROUP BY date\n   ORDER BY date) AS table3"}
{"prompt": "This query returns data on the price of UST and LUNA in USD, as well as the total supply of each currency, over the past 2880 minutes (approximately 2 days). The data is returned in chronological order, with the most recent data appearing first.", "completion": " select * from(\nselect   price UST\u4ef7\u683c, price*11281000000*5 \u65b0UST\u5e02\u503c, price*11281000000 \u65e7UST\u5e02\u503c, minute + interval '8 hour' \u65f6\u95f4, 11281000000 UST\u4f9b\u5e94\u91cf from  prices.usd\nwhere  contract_address='\\x692597b009d13c4049a947cab2239b7d6517875f'  order by minute desc limit 2880\n) t1\nINNER JOIN\n(\nselect   price LUNA\u4ef7\u683c, price*6907000000000*10 \u65b0LUNA\u5e02\u503c, price*6907000000000 \u65e7LUNA\u5e02\u503c, minute + interval '8 hour' \u65f6\u95f4, 6907000000000 LUNA\u4f9b\u5e94\u91cf from  prices.usd\nwhere  contract_address='\\x24834bbec7e39ef42f4a75eaf8e5b6486d3f0e57'  order by minute desc limit 2880\n) t2\nON t1.\u65f6\u95f4 = t2.\u65f6\u95f4 order by t1.\u65f6\u95f4 desc limit 2880"}
{"prompt": "This SQL query shows the cumulative fees paid for the ZRX 0x v3 contract, updated for the past 30 days.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\nsum(e.\"value\"/1e18*p.price) as fees_paid,\nsum(sum(e.\"value\"/1e18*p.price)) over (order by date_trunc('day', block_time)) as cumulative_fees\nFROM erc20.\"ERC20_evt_Transfer\" e\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE e.contract_address = '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' \nAND e.to = '\\xa26e80e7Dea86279c6d778D702Cc413E6CFfA777'\nAND p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 30"}
{"prompt": "This query returns the number of unique owners of the \"BatchExchange_evt_Trade\" event from the Gnosis Dfusion Protocol.", "completion": " SELECT\ncount(distinct owner)\nFROM gnosis_protocol.\"BatchExchange_evt_Trade\"\nLIMIT 10"}
{"prompt": "This query returns the total USD volume of WETH auctioned for DAI on the DutchX exchange, broken down by day.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    sum(\"buyVolume\" / 1e18 * dai.average) as usdvolume\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" dai \n\nWHERE \"sellToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND \"buyToken\" = '\\x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' --dai\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', dai.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND dai.symbol = 'DAI'\nAND tx.success = true\n\nGROUP BY 1"}
{"prompt": "This query calculates the total outstanding debt on the Compound v1 platform as of May 23, 2019. It does this by subtracting the total amount borrowed, repaid, and liquidated from each other.", "completion": " with borrowed as (SELECT SUM((b.amount / 1e18) * p.average) AS usdBorrowed\nFROM compoundv1.\"MoneyMarket_evt_BorrowTaken\" b,\n     ethereum.transactions tx,\n     coincap.\"tokens/usd\" p\nWHERE b.tx_hash = tx.hash\n  AND b.\"asset\" = p.asset\n  AND date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\n  AND date_trunc('day', tx.block_time) < '2019-05-23'\n  AND tx.success = TRUE),\n  \n  repaid as (SELECT SUM((r.amount / 1e18) * p.average) AS usdRepaid\nFROM compoundv1.\"MoneyMarket_evt_BorrowRepaid\" r,\n     ethereum.transactions tx,\n     coincap.\"tokens/usd\" p\nWHERE r.tx_hash = tx.hash\n  AND r.\"asset\" = p.asset\n  AND date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\n  AND date_trunc('day', tx.block_time) < '2019-05-23'\n  AND tx.success = TRUE),\n  \n  liquidated as (SELECT SUM((l.\"amountRepaid\" / 1e18) * p.average) AS usdLiquidated\nFROM compoundv1.\"MoneyMarket_evt_BorrowLiquidated\" l,\n     ethereum.transactions tx,\n     coincap.\"tokens/usd\" p\nWHERE l.tx_hash = tx.hash\n  AND l.\"assetBorrow\" = p.asset\n  AND date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\n  AND date_trunc('day', tx.block_time) < '2019-05-23'\n  AND tx.success = TRUE)\n  \n  SELECT \n  \n  (usdBorrowed - usdRepaid - usdLiquidated) as outstandingDebt\n  \n  FROM borrowed, repaid, liquidated\n  \n  "}
{"prompt": "This SQL query gets the total USD amount borrowed for each token over the past two months, grouped by week. First, it gets the time from the Ethereum transactions table. Then, it gets token symbols from the coincap USD price table. Finally, it calculates the total USD amount borrowed from the smart contract event.", "completion": " SELECT date_trunc('week', tx.block_time) AS weekStarting,       --Get the time from the Ethereum transactions table\n       p.symbol AS token,                                       --Get token symbols from the coincap USD price table\n       SUM((b.amount / 1e18) * p.average) AS usdAmount          --Get the amount borrowed from the smart contract event\nFROM compound.\"MoneyMarket_evt_BorrowTaken\" b,                  --Table with the relevant event\n     ethereum.transactions tx,                                  --Table with Ethereum transactions\n     coincap.\"tokens/usd\" p                                     --Table with token/USD prices\nWHERE b.tx_hash = tx.hash                                       --Join the smart contract event on transactions\n  AND b.\"asset\" = p.asset                                       --Join asset from smart contract event with USD prices\n  AND date_trunc('minute', p.time) = date_trunc('minute', tx.block_time) --Join USD price on time from transactions\n  AND p.time > now() - interval '2 months'                      --See the last two months\n  AND tx.success = TRUE                                         --Remove invalid transactions\nGROUP BY weekStarting,                                          \n         token\nORDER BY weekStarting;"}
{"prompt": "This query returns the number of IDEX trades per month, as well as the month that the trade occurred. The data is taken from the IDEX1_call_trade table and the ethereum.transactions table, and is grouped by month and ordered by the month the trade occurred.", "completion": " SELECT count(*), date_trunc('month', tx.block_time)\nFROM idex.\"IDEX1_call_trade\" t, ethereum.transactions tx \nWHERE t.tx_hash = tx.hash\nGROUP BY 2\nORDER BY 2"}
{"prompt": "How many vaults have been created?", "completion": " SELECT COUNT(*)\nFROM makermcd.\"CDP_MANAGER_evt_NewCdp\";"}
{"prompt": "This SQL query returns the total amount of ETH bought on Uniswap over the past 7 days, broken down by day.", "completion": " WITH tx AS (SELECT block_time, hash FROM\nethereum.transactions\nWHERE block_time > now() - interval '7 days'\n)\n\nSELECT date_trunc('day', tx.block_time),\n       SUM(eth_bought / 1e18)\nFROM uniswap.\"Exchange_evt_EthPurchase\" p\nINNER JOIN tx \nON tx.hash = p.tx_hash\nGROUP BY 1;"}
{"prompt": "The following SQL query will select the top 10 tokens from the 'erc20' table, and then select the top 10 compound events from the 'compound_v2' table.", "completion": " SELECT * FROM \nerc20.\"tokens\"\nLIMIT 10 \n\nSELECT * \nFROM compound_v2.\"cErc20_evt_LiquidateBorrow\" c\nLEFT JOIN erc20.tokens contract_address on c.cTokenCollateral = contract_address\nGROUP BY 4\nORDER BY 1 desc\nLIMIT 10\n\nSELECT * FROM compound_v2.\"cErc20_evt_LiquidateBorrow\"\nLIMIT 10"}
{"prompt": "This SQL query returns the net deposits (deposits minus withdrawals) for each day over the past 60 days, as well as the cumulative net deposits (the sum of net deposits over all days).", "completion": " WITH deposits AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(amount/1e18) as deposit\nFROM pooltogether.\"MCDAwarePool_evt_Deposited\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\n),\n\nwithdrawals AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(amount/1e18) as withdraw\nFROM pooltogether.\"MCDAwarePool_evt_Withdrawn\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT deposits.day, \nsum(deposit-withdraw) as net_deposits,\nsum(sum(deposit-withdraw)) over (order by deposits.day) as cumulative_net_deposits\nFROM deposits\nLEFT JOIN withdrawals ON deposits.day = withdrawals.day\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 60\n\n"}
{"prompt": "The following SQL query decodes the data column in the ethereum.\"logs\" table that match the topic 1 below. The query sums the data_row_3 column for each unique data_row_2.", "completion": " /*\nWITH data_table_decoded AS\n    (\n*/\n        SELECT \n            \"data\",\n            bytea2numeric(decode(SUBSTRING(encode(\"data\",'hex'), 1, 64),'hex')) as data_row_1,\n            bytea2numeric(decode(SUBSTRING(encode(\"data\",'hex'), 65, 64),'hex')) as data_row_2,\n            bytea2numeric(decode(SUBSTRING(encode(\"data\",'hex'), 129, 64),'hex')) as data_row_3,\n            bytea2numeric(decode(SUBSTRING(encode(\"data\",'hex'), 193, 64),'hex'))/1e18 as data_row_4\n            -- decodes the data column in the ethereum.\"logs\" that match the topic 1 below\n        FROM ethereum.\"logs\"\n        WHERE \"topic1\" = '\\x329dc4322e1eca93c98ac9c5f53e4213d68c0fcbcb08895b3b80a886a0051cee'\n/*\n    )\n    \nSELECT SUM(data_table_decoded.data_row_3)\nFROM data_table_decoded\nGROUP BY data_table_decoded.data_row_2\n*/"}
{"prompt": "This SQL query retrieves data on all sales of a particular NFT token, including information on the buyer, seller, price, and age of the sale.", "completion": " SELECT \n    block_time,        \n    CONCAT('<a href=\"https://dune.xyz/cryptuschrist/Wallet-Stats-Dash?Wallet%20Address=0', substring(buyer::text from 2), '\">\ud83d\udfe1  ',COALESCE(SUBSTRING(b.\"name\"::text, 0, 23) , CONCAT(UPPER(SUBSTRING(buyer::text, 39, 42)))), '</a>') as buyer_link,\n    CONCAT('<a href=\"https://dune.xyz/cryptuschrist/Wallet-Stats-Dash?Wallet%20Address=0', substring(seller::text from 2), '\">\ud83d\udfe1  ',COALESCE(SUBSTRING(s.\"name\"::text, 0, 23) , CONCAT(UPPER(SUBSTRING(seller::text, 39, 42)))), '</a>') as seller_link,\n    token_id_link AS token,\n    price,    \n    price_usd AS usd_price,  \n    CASE \n        WHEN (NOW() - block_time) < '1 hour' THEN TO_CHAR((NOW() - block_time), 'FMMI \"minutes\" ago') \n        WHEN (NOW() - block_time) < '2 hour' THEN TO_CHAR((NOW() - block_time), 'FMhh24 \"hour ago\"') \n        WHEN (NOW() - block_time) < '24 hour' THEN TO_CHAR((NOW() - block_time), 'FMhh24 \"hours ago\"') \n        WHEN (NOW() - block_time) < '48 hour' THEN TO_CHAR((NOW() - block_time), 'FMdd \"day ago\"')  \n        WHEN (NOW() - block_time) < '60 day' THEN TO_CHAR((NOW() - block_time), 'FMdd \"days ago\"') \n        WHEN (NOW() - block_time) < '2 months' THEN TO_CHAR((NOW() - block_time), 'FMww \"weeks ago\"')\n        WHEN (NOW() - block_time) < '365 day' THEN to_char(age(NOW()::timestamp, block_time),'FMMM \"months\" ago')\n        WHEN (NOW() - block_time) < '2 year' THEN to_char(age(NOW()::timestamp, block_time),'FMYY \"year\" ago')\n    ELSE to_char(age(NOW()::timestamp, block_time),'FMYY \"years\" ago')\n    END AS age, \n    tx\nFROM dune_user_generated.cryptuschrist_allexchange3  \nLEFT JOIN dune_user_generated.\"cryptuschrist_ens_opensea2\" b ON b.address = buyer \nLEFT JOIN dune_user_generated.\"cryptuschrist_ens_opensea2\" s ON s.address = seller  \nWHERE nft_contract_address = CONCAT('\\x', substring('{{NFT Contract}}' from 3))::bytea\nAND price > 0.001 \nORDER BY 1 DESC \nLIMIT 100000\n"}
{"prompt": "This query will return the trade_time, base, quote, price, and quantity for the last 20 trades. The base and quote will be returned as the token name, and the base_asset will be looked up in the tokens table.", "completion": " SELECT trade_time, tok.name as base, quote_asset as quote, price, quantity\nFROM trades tr, tokens tok\nWHERE tr.base_asset = tok.symbol\nORDER BY trade_time DESC LIMIT 20;"}
{"prompt": "This query returns the total USD value of all Kyber trades in each month, ordered from most recent to oldest.", "completion": " SELECT\n    date_trunc('month', tx.block_time) AS time,\n    SUM(\n        \"ethWeiValue\"\n        -- \"srcAmount\" * (\n        --     CASE\n        --         WHEN src = '\\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' OR src = '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' THEN (\n        --             SELECT p.price\n        --             FROM prices.\"usd\" p\n        --             WHERE p.contract_address is NULL\n        --             ANd p.symbol = 'ETH'\n        --             AND p.minute = date_trunc('minute', tx.block_time)\n        --             LIMIT 1\n        --         )\n        --         ELSE (\n        --             SELECT p.price\n        --             FROM prices.\"usd\" p\n        --             WHERE p.contract_address = src\n        --             AND p.minute = date_trunc('minute', tx.block_time)\n        --             LIMIT 1\n        --         )\n        --     END\n        -- )\n    ) / 1e18 as usd_volume\nFROM kyber.\"Network_evt_KyberTrade\" kyber\nLEFT JOIN ethereum.transactions tx ON tx.hash = kyber.evt_tx_hash AND tx.success\nGROUP BY 1\nORDER BY 1 DESC"}
{"prompt": "This SQL query returns the number of unique users on the 1inch exchange per week.", "completion": " SELECT\n    date_trunc('week', tx.block_time) AS time,\n    COUNT(DISTINCT tx.from)\nFROM -- oneinch.\"OneInchExchange_evt_Swapped\" oi\n(\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v1_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v2_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v3_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v4_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v5_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v6_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minReturnAmount\" as \"toAmount\", \"fromTokenAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v7_call_swap\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minReturnAmount\" as \"toAmount\", \"fromTokenAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v8_call_swap\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minReturnAmount\" as \"toAmount\", \"fromTokenAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"OneInchExchange_call_swap\" WHERE call_success -- UNION ALL\n) oi\nLEFT JOIN ethereum.transactions tx on tx.hash = oi.tx_hash\nGROUP BY 1\nORDER BY 1 DESC;\n"}
{"prompt": "This SQL query returns all transactions with a to address of 0x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c and a block number greater than 8235058 where the data field starts with 0x188f9b5b.", "completion": " select tx.hash\nfrom ethereum.transactions tx\ninner join ethereum.receipts r\non tx.hash = r.tx_hash\nwhere tx.\"to\" = '\\x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c'\nand tx.block_number >= 8235058\nand substring(data,1,4) = '\\x188f9b5b'"}
{"prompt": "This SQL query returns the top traders on the 1inch exchange over the past 24 hours, as well as the volume and number of trades for each trader.", "completion": " SELECT\n    ROW_NUMBER() OVER () as idx,\n    '<a href=\"https://etherscan.io/address/0x' || ENCODE(sender, 'hex') || '\">0x' || ENCODE(sender, 'hex') || '</a>'  as sender,\n    volume,\n    trades\nFROM (\n    SELECT\n        ROW_NUMBER() OVER (ORDER BY 4 DESC),\n        tx_from as sender,\n        COUNT(*) as trades,\n        SUM(usd_amount) AS volume\n    FROM dex.trades\n    -- (\n    --     SELECT to_token, from_token, to_amount, from_amount, tx_hash, block_time, from_usd, to_usd, tx_from FROM oneinch.swaps UNION All\n    --     SELECT to_token, from_token, to_amount, from_amount, tx_hash, block_time, from_usd, to_usd, tx_from FROM onesplit.swaps\n    --     WHERE tx_hash NOT IN (SELECT tx_hash FROM oneinch.swaps)\n    -- ) oi\n    WHERE project = '1inch' AND DATE_PART('Day', now() - block_time::timestamptz) < 1\n    GROUP BY 2\n    ORDER BY 4 DESC NULLS LAST\n) tt\n"}
{"prompt": "The following SQL query calculates the total USD value for each token traded on the Radar Relay exchange over the course of the past 24 weeks. The data is grouped by week.", "completion": " WITH per_token AS (SELECT price.symbol,\n          date_trunc('week', tx.block_time) AS time,\n            SUM(\"takerAssetFilledAmount\" /(10^tokens.decimals) * price.price) AS total_usd_value\n   FROM zeroex_v2.\"Exchange2.1_evt_Fill\" filled\n    INNER JOIN\n     (SELECT hash,\n             block_time\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '24 weeks'\n        AND block_time < date_trunc('week', NOW())) tx ON filled.evt_tx_hash = tx.hash\n   INNER JOIN prices.usd price ON date_trunc('minute', tx.block_time) = price.minute\n   INNER JOIN erc20.tokens tokens ON substring(filled.\"takerAssetData\" FROM 17) = tokens.contract_address\n   AND substring(filled.\"takerAssetData\"\n                 FROM 17) = price.contract_address\n    AND filled.\"feeRecipientAddress\" = '\\xa258b39954cef5cb142fd567a46cddb31a670124' -- Radar Relay fee address\n   GROUP BY 1,\n            2)\nSELECT TIME,\n       SUM(total_usd_value) AS \"USD Volume\"\nFROM per_token\nGROUP BY 1"}
{"prompt": "The following SQL query returns the total amount of ETH in Upbit 3's hot/cold wallet outward activity for each week, as well as the total number of transactions for each week. The data is ordered by week, ascending.", "completion": " SELECT sum(value/1e18) AS total_eth,\n       date_trunc('week', block_time) AS \"ym\",\n       count(*) as total_tx_out\nFROM ethereum.transactions\nWHERE \"from\" = '\\x5e032243d507c743b061ef021e2ec7fcc6d3ab89' /* Upbit 3 */\nGROUP BY \"ym\"\nORDER BY \"ym\" ASC"}
{"prompt": "This SQL query counts the number of CDPs created each day, based on the block time of the transaction. It groups the results by day.", "completion": " SELECT date_trunc('day', tx.block_time) AS day, COUNT(*) AS \"Vaults created\"\nFROM makermcd.\"CDP_MANAGER_evt_NewCdp\" cdp\nLEFT JOIN ethereum.transactions tx\nON tx.hash = cdp.evt_tx_hash\nGROUP BY 1;"}
{"prompt": "This query returns the total volume of trades on DDEX(legacy) in the past 7 days, broken down by day.", "completion": " SELECT date_trunc('days', tx.block_time) AS Date,\n       SUM(eth/1e18*p.price) AS volume\nFROM (\n     select evt_tx_hash, (result->>'quoteTokenFilledAmount')::numeric as eth from hydroprotocol.\"HybridExchange_evt_Match\" where \"addressSet\"->>'quoteToken' = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n     ) ether\n\nINNER JOIN\n     (SELECT hash,\n             block_time\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '7 days'\n        AND block_time < date_trunc('day', NOW())) tx ON ether.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'WETH'\nGROUP BY 1"}
{"prompt": "The following SQL query returns the USD volume for each week for the past 12 weeks for the Oasis DEX. The volume is calculated by summing the amount of DAI traded for each transaction, multiplied by the price of DAI in USD for that transaction.", "completion": " SELECT date_trunc('week', tx.block_time) AS time,    SUM((dai)/1e18 * p.price) as \"USD volume\"\nFROM \n (SELECT hash, block_time FROM ethereum.transactions tx\n                WHERE tx.block_time > now() - interval '12 weeks'\n                ) tx\n\nLEFT JOIN\n((SELECT evt_tx_hash, buy_amt AS dai FROM oasisdex.\"eth2dai_evt_LogTrade\"\n        WHERE buy_gem = '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359')\n      UNION\n        (SELECT evt_tx_hash, pay_amt AS dai FROM oasisdex.\"eth2dai_evt_LogTrade\"\n            WHERE pay_gem = '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359')) dai\n            \n\n    ON dai.evt_tx_hash = tx.hash\n            \nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'DAI'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns the buyer, the amount of ETH, the amount of USD, and the total cover amount per buyer for the Armor.Fi cover event.", "completion": " WITH current_price AS\n  (SELECT MINUTE,\n          price\n   FROM prices.\"layer1_usd\"\n   WHERE symbol = 'ETH'\n   ORDER BY 1 DESC\n   LIMIT 1)\nSELECT buyer,\n       round(cast(eth *\n                    (SELECT price\n                     FROM current_price) + usd AS numeric), 2) AS amount_usd\nFROM\n  (SELECT buyer,\n          coalesce(sum(\"coverAmount\") filter (\n                                              WHERE currency = '\\x45544800'), 0) AS eth,\n          coalesce(sum(\"coverAmount\") filter (\n                                              WHERE currency = '\\x44414900'), 0) AS usd\n   FROM armor_fi.\"arNFT_evt_BuyCover\"\n   GROUP BY 1) a\nORDER BY 2 DESC"}
{"prompt": "SELECT\n\nSUM(tr.value) as tokens,\n\nSUM(tr.value * (24000 - 6000) * tx.gas_price) / 1e18 as eth,\n\nSUM(tr.value * (24000 - 6000) * tx.gas_price * p.price) / 1e18 as usd\n\nFROM dex.trades dt\n\nINNER JOIN (\n\n    SELECT value, evt_tx_hash as tx_hash, evt_block_time as block_time FROM chi.\"ChiToken_evt_Transfer\" WHERE \"to\" = '\\x0000000000000000000000000000000000000000' AND value > 0 UNION ALL\n\n    -- SELECT value, call_tx_hash as tx_hash, call_block_time as block_time FROM gastoken.\"GasToken2_call_free\" WHERE call_success AND value > 0 UNION ALL\n\n    -- SELECT value, call_tx_hash as tx_hash, call_block_time as block_time FROM gastoken.\"GasToken2_call_freeUpTo\" WHERE call_success AND value > 0 UNION ALL\n\n    -- SELECT value, call", "completion": " SELECT \n    SUM(tr.value) as tokens,\n    SUM(tr.value * (24000 - 6000) * tx.gas_price) / 1e18 as eth,\n    SUM(tr.value * (24000 - 6000) * tx.gas_price * p.price) / 1e18 as usd\nFROM dex.trades dt\nINNER JOIN (\n    SELECT value, evt_tx_hash as tx_hash, evt_block_time as block_time FROM chi.\"ChiToken_evt_Transfer\" WHERE \"to\" = '\\x0000000000000000000000000000000000000000' AND value > 0 UNION ALL\n    -- SELECT value, call_tx_hash as tx_hash, call_block_time as block_time FROM gastoken.\"GasToken2_call_free\" WHERE call_success AND value > 0 UNION ALL\n    -- SELECT value, call_tx_hash as tx_hash, call_block_time as block_time FROM gastoken.\"GasToken2_call_freeUpTo\" WHERE call_success AND value > 0 UNION ALL\n    -- SELECT value, call_tx_hash as tx_hash, call_block_time as block_time FROM gastoken.\"GasToken2_call_freeFrom\" WHERE call_success AND value > 0 UNION ALL\n    SELECT value, call_tx_hash as tx_hash, call_block_time as block_time FROM gastoken.\"GasToken2_call_freeFromUpTo\" WHERE call_success AND value > 0\n) tr ON dt.tx_hash = tr.tx_hash\nINNER JOIN ethereum.transactions tx ON tx.hash = tr.tx_hash AND tx.success\nINNER JOIN prices.layer1_usd p ON p.symbol = 'ETH' AND p.minute = date_trunc('minute', tr.block_time)\nWHERE project = '1inch'\n"}
{"prompt": "This query returns the number of transactions, the total ETH spent on gas, and the USD value of those transactions at the time and as of now, for a given Ethereum account, over a given number of days.", "completion": " WITH current_price AS (\n    SELECT p1.*\n      FROM prices.layer1_usd_eth p1\n     WHERE minute = (\n        SELECT max(minute)\n          FROM prices.usd p2\n        )\n)\n\n-- SELECT *\n-- FROM current_price\n\nSELECT date_trunc('day', tx.block_time) as date,\n    count(1) as \"Number of transactions\",\n    SUM((tx.gas_price * r.gas_used)/1e18) as \"Total ETH spent on gas\",\n    SUM(((tx.gas_price * r.gas_used)/1e18)*p.price) AS \"USD value at the time\",\n    SUM(((tx.gas_price * r.gas_used)/1e18)*cp.price) AS \"USD value as of now\"\nFROM ethereum.transactions tx\nINNER JOIN ethereum.traces r ON tx.hash = r.tx_hash\nINNER JOIN prices.layer1_usd_eth p ON p.minute = date_trunc('minute', tx.block_time)\nINNER JOIN current_price cp ON true -- there is only one row in current_price \nWHERE tx.\"from\" = '\\x{{ from_address }}'\n  AND tx.block_time < date_trunc('day', NOW())\n  AND tx.block_time >= date_trunc('day', NOW()) - interval '{{ Days since }} days'\nGROUP BY 1;\n"}
{"prompt": "This SQL query returns the number of safes that have been created.", "completion": " select count(*) from gnosis_safe.view_safes "}
{"prompt": "This SQL query returns the uniswap weekly USD trading volume for each week since 2019.", "completion": " SELECT date_trunc('week', tx.block_time) as Date,\n       SUM(eth/1e18 * p.average) as \"USD volume\"\nFROM ((SELECT tx_hash, eth_sold AS eth FROM uniswap.\"Exchange_evt_TokenPurchase\")\n      UNION\n        (SELECT tx_hash, eth_bought AS eth FROM uniswap.\"Exchange_evt_EthPurchase\")) ether\nINNER JOIN ethereum.transactions tx ON ether.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" p ON date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'WETH'\nAND date_part('year', tx.block_time) >= '2019'\nAND tx.block_time < date_trunc('week', current_date)::date\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns data from the dYdX \"LiquidatorProxyV1ForSoloMargin_call_liquidate\" and \"SoloMargin_evt_LogLiquidate\" tables, specifically data on successful liquidations (call_success = true) and the corresponding events.", "completion": " WITH dydx_liq_calls AS (\n    SELECT\n        tx.from\n        , tx.to\n        , tx.block_time\n        dydx.*\n    FROM dydx.\"LiquidatorProxyV1ForSoloMargin_call_liquidate\" s\n    LEFT JOIN ethereum.\"transactions\" tx on s.call_tx_hash = tx.hash\n    WHERE call_success = true\n),\ndydx_liq_events AS (\n    SELECT\n        dydx.*\n        , events.*\n    FROM dydx_liq_calls dydx\n    LEFT JOIN dydx.\"SoloMargin_evt_LogLiquidate\" events\n    ON dydx.call_tx_hash = events.evt_tx_hash\n    AND dydx.\n)\n\nSELECT *\nFROM dydx_liq_events\nLIMIT 10"}
{"prompt": "This SQL query returns the total amount of deposits made in each asset (ETH, DAI, or USDC) over the course of the past month, partitioned by asset.", "completion": " with data as (\n    SELECT date_trunc('minute', eth.block_time) AS ttime,\n       eth.hash AS \"txHash\",\n       eth.from AS \"depositerAddress\",\n        CASE dep.\"market\"::integer \n            WHEN 0 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 1 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 2 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 6 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 6, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e6)::decimal\n                END\n        END AS \"depositAmount\",\n       CASE dep.\"market\"::integer \n       WHEN 0 THEN\n        'ETH'::text\n       WHEN 1 THEN\n        'DAI'::text\n       WHEN 2 THEN\n        'USDC'::text\n       END AS \"Asset\"\nFROM dydx.\"SoloMargin_evt_LogDeposit\" dep\nJOIN ethereum.transactions eth ON eth.hash = dep.evt_tx_hash\nWHERE date_trunc('minute', eth.block_time) >= date_trunc('month', now()) - interval '1 month'\nORDER BY date_trunc('minute', eth.block_time) DESC)\n\nSELECT\n  data.ttime,\n  sum(\"depositAmount\") over (partition by \"Asset\" order by data.ttime) AS \"sum\",\n  \"Asset\"\nfrom data\n"}
{"prompt": "This query returns the total amount of ETH spent on ENS names, broken down by week.", "completion": " SELECT week, SUM(cost)\nFROM \n(\n(SELECT\ndate_trunc('week', block_time) as week,\nSUM(cost/1e18) AS cost\nFROM ethereumnameservice.\"%ETHRegistrarController_v2._evt_NameRegistered\" e\nLEFT JOIN ethereum.transactions tx \nON tx.hash = e.evt_tx_hash\nGROUP BY 1\nLIMIT 10\n)\n\nUNION ALL\n\n(\nSELECT\ndate_trunc('week', block_time) as week,\nSUM(e.value/1e18) AS cost\nFROM ethereumnameservice.\"Registrar_old_evt_HashRegistered\" e\nLEFT JOIN ethereum.transactions tx \nON tx.hash = e.evt_tx_hash\nGROUP BY 1\nLIMIT 10\n)\n) AS total\nGROUP BY 1"}
{"prompt": "This query returns the total amount of Dai created from Sai, grouped by hour, from 2019-11-18 16:00:00 onwards.", "completion": " SELECT date_trunc('hour', tx.block_time) AS time,\n       SUM(wad/1e18),\nSUM (SUM(wad/1e18)) OVER (ORDER BY date_trunc('hour', tx.block_time)) as TOTAL\nFROM makermcd.\"ScdMcdMigration_call_swapSaiToDai\" m\nLEFT JOIN ethereum.transactions tx ON tx.hash = m.call_tx_hash\nWHERE call_success = TRUE\n  AND date_trunc('minute', tx.block_time) > '2019-11-18 16:00:00'\nGROUP BY 1;"}
{"prompt": "This SQL query returns the distinct market ID for the contract address 'xc59b0e4de5f1248c1140964e0ff287b192407e0c', where topic1 is 'x2e6bb91f8cbcda0c93623c54d0403a43514fabc40084ec96b6d5379a74786298' and topic4 is 'xa601b0639ba2c04b06621db033e014a0883de4aa097b4da56de762c888e5bba2'.", "completion": " SELECT DISTINCT substring(cast(topic2 AS text), 27)\nFROM ethereum.\"logs\"\nWHERE contract_address = '\\xc59b0e4de5f1248c1140964e0ff287b192407e0c'\n  AND topic1 = '\\x2e6bb91f8cbcda0c93623c54d0403a43514fabc40084ec96b6d5379a74786298'\n  AND topic4 = '\\xa601b0639ba2c04b06621db033e014a0883de4aa097b4da56de762c888e5bba2'"}
{"prompt": "This SQL query returns the average daily DEX and CEX prices for WETH over the past week.", "completion": " SELECT date_trunc('day', tx.block_time) AS DAY,\n       AVG(pay_amt / buy_amt) AS DEX,\n       AVG(p.average) AS CEX\nFROM oasisdex.\"eth2dai_evt_LogTrade\" tr\nLEFT JOIN ethereum.transactions tx ON tx.hash = tr.tx_hash\nLEFT JOIN coincap.\"tokens/usd\" p ON date_trunc('minute', tx.block_time) = date_trunc('minute', p.time)\nWHERE pay_gem = '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'\nAND p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 7"}
{"prompt": "This SQL query returns the number of funders by Ethereum experience level. The experience levels are defined as follows:\n\n- first time (1 tx): this is the funder's first transaction\n- average (< 40 txs): the funder has made less than 40 transactions\n- seasoned (< 200 txs): the funder has made less than 200 transactions\n- veteran (> 200 txs): the funder has made more than 200 transactions", "completion": " WITH \n    rph as (\n        SELECT \n            date_trunc('minute',\"block_time\") as minute,\n            \"from\" as funder,\n            \"value\"/1e18 as raised\n        FROM ethereum.\"transactions\"\n        WHERE \"to\" = '\\x5663e3E096f1743e77B8F71b5DE0CF9Dfd058523'\n            OR \"to\" = '\\x3545192b340F50d77403DC0A64cf2b32F03d00A9'\n            OR \"to\"= '\\x90B3832e2F2aDe2FE382a911805B6933C056D6ed'\n            ),\n    \n    number_of_txs as (\n        SELECT \"from\" AS account, COUNT(*) as nt\n        FROM ethereum.transactions tx\n        RIGHT JOIN rph ON rph.\"funder\"=tx.\"from\"\n        GROUP BY 1\n    )\n    \nSELECT \n    CASE \n        WHEN \"nt\" = 1 THEN 'first time (1 tx)'\n        WHEN \"nt\" > 1 AND \"nt\" <= 40 THEN 'average (< 40 txs)'\n        WHEN \"nt\" > 40 AND \"nt\" <= 200 THEN 'seasoned (< 200 txs)'\n        WHEN \"nt\" > 200 THEN 'veteran (> 200 txs)'\n    END as funder_type,\n    COUNT(raised) as raised\nFROM rph\nLEFT JOIN number_of_txs nt ON nt.\"account\" = rph.\"funder\"\nGROUP BY 1"}
{"prompt": "This query returns the total gas paid by Authereum relayers for each day.", "completion": " WITH wallets AS\n  (SELECT address\n   FROM ethereum.traces\n   WHERE \"from\" IN ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8',\n                    '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea',\n                    '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046')\n     AND TYPE = 'create'),\n     DATA AS\n  (SELECT date_trunc('day', txn.block_time) AS DAY,\n          txn.gas_price * txn.gas_used / 1e18 AS gas\n   FROM ethereum.traces et\n   INNER JOIN wallets ON wallets.address = et.\"from\"\n   INNER JOIN ethereum.transactions txn ON et.tx_hash = txn.hash\n   WHERE et.\"to\" IN ('\\x237EDCDd43349227ef511581Cc834962ECf23076',\n                     '\\x20af9e54a3670ef6a601bca1f1ec22b1f93cbe23',\n                     '\\x2e1723d1dfa2947f0d08d5c5d214b71def4f951f',\n                     '\\x79fee076b1bcd4054dff0b4364c26899492198dc',\n                     '\\x211deb5c0a28a213fcf5976ac22c70ff96b9004c',\n                     '\\x185c46c8d3ef5155f3678e69c827db7a2116a6cd',\n                     '\\xd8cab604bdd8cbb7c3eb0c26f7dc3abffb005a92',\n                     '\\xae1710e83211decb356f031a9346a24ef55055e0')\n     AND call_type = 'delegatecall'\n     AND tx_success = TRUE\n     AND error IS NULL\n     AND substring(\"input\"\n                   FOR 4) IN ('\\x26aa4655',\n                              '\\xd5553b88'))\nSELECT DAY,\n       sum(gas) OVER (\n                      ORDER BY DAY ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS eth_amount\nFROM DATA"}
{"prompt": "This SQL query returns the block time and the sum of the number of accounts for all borrow taken events, grouped by block time.", "completion": " SELECT block_time, sum(count(account)) OVER (ORDER BY block_time)\nFROM (\n    SELECT DISTINCT ON (account) tx.block_time, account\n    FROM compound.\"MoneyMarket_evt_BorrowTaken\" e\n    LEFT JOIN ethereum.transactions tx\n    ON e.tx_hash = tx.hash \n    ORDER BY account, tx.block_time\n) AS subq\nGROUP BY block_time;"}
{"prompt": "This SQL query will select * (all columns) from the uniswap.\"Exchange_evt_EthPurchase\" table and limit the results to 10.", "completion": " SELECT * FROM uniswap.\"Exchange_evt_EthPurchase\" LIMIT 10"}
{"prompt": "The following SQL query returns the number of successful multi-asset swaps by month. The data is grouped by month.", "completion": " \n\nselect count(*),\ndate_trunc('month', \"call_block_time\") as month\n\nfrom genieswap.\"GenieSwap_call_multiAssetSwap\"\n\nwhere call_success = TRUE\n\ngroup by month"}
{"prompt": "This query returns a list of the top 1000 arbitrum users, sorted by the number of transactions they have made. For each user, the query returns the user's address, the number of transactions made, and a link to the user's profile on arbiscan.", "completion": " with top_users as (\n    select `from` as user, count(*) as transaction_count\n    from arbitrum.transactions\n    group by user\n)\n\nselect user, transaction_count as transactions, '<a href=https://arbiscan.io/address/' || user || '>Link</a>' as arbiscan_link\nfrom top_users\norder by transactions desc\nlimit 1000"}
{"prompt": "This query calculates the percentage of participants that are smart contracts.", "completion": " WITH tokenlockers AS\n  (SELECT DISTINCT (_locker) AS repholder\n   FROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\"),\n     ETHlockers AS\n  (SELECT DISTINCT (_locker) AS repholder\n   FROM dxdao.\"DxLockEth4Rep_evt_Lock\"),\n     MGNregisters AS\n  (SELECT DISTINCT (address) AS repholder\n   FROM dxdao.\"DxLockMgnForRep_evt_Register\"),\n     GENauction AS\n  (SELECT DISTINCT (_bidder) AS repholder\n   FROM dxdao.\"DxGenAuction4Rep_evt_Bid\"),\n     all_holders AS\n  ( SELECT repholder\n   FROM tokenlockers\n   UNION\n     (SELECT repholder\n      FROM ETHlockers)\n   UNION\n     (SELECT repholder\n      FROM GENauction)\n   UNION\n     (SELECT repholder\n      FROM MGNregisters)),\n     contracts AS\n  (SELECT repholder,\n          t.address AS a -- a will be null when repholder is not a contract\nFROM all_holders\n   LEFT JOIN ethereum.traces t\n   ON repholder = t.address )\nSELECT SUM(CASE WHEN a IS NOT NULL THEN 1 ELSE 0 END)::numeric/ COUNT(DISTINCT repholder)::numeric * 100 AS contract_proportion\nFROM contracts;"}
{"prompt": "This query returns the sum of the amount of the MGN token in circulation.", "completion": " SELECT SUM(amount/1e18) as MGNamount\nFROM dxdao.\"TokenFRTProxy_call_mintTokens\"\nWHERE success;"}
{"prompt": "This query returns the block time and hash for all transactions that occurred after May 23, 2019, ordered by block time. It also returns the contract address and symbol for all cToken contracts, and finally returns the price and symbol for ETH, DAI, USDC, ZRX, BAT, WBTC, and REP for all minutes after May 23, 2019.", "completion": " -- transaction hash x time by the minute\nselect \n    block_time,\n    hash\nfrom ethereum.transactions\nwhere block_time > '2019-05-23'\norder by 1\nlimit 100\n\n-- contracts for token symbols\nwith contract_addresses as (\n        select distinct\n            cast(\"cTokenCollateral\" as varchar) as contract_address\n        from compound_v2.\"cErc20_evt_LiquidateBorrow\"\n        UNION\n        select distinct\n            cast(\"cTokenCollateral\" as varchar) as contract_address\n        from compound_v2.\"cEther_evt_LiquidateBorrow\"\n    )\nselect \n    contract_address,\n    case \n        when contract_address = '\\x6c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e' then 'cBAT'\n        when contract_address = '\\xf5dce57282a584d2746faf1593d3121fcac444dc' then 'cDAI'\n        when contract_address = '\\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5' then 'cETH'\n        when contract_address = '\\x158079ee67fce2f58472a96584a73c7ab9ac95c1' then 'cREP'\n        when contract_address = '\\x39aa39c021dfbae8fac545936693ac917d5e7563' then 'cUSDC'\n        when contract_address = '\\xc11b1268c1a384e55c48c2391d8d480264a3a7f4' then 'cWBTC'\n        when contract_address = '\\xb3319f5d18bc0d84dd1b4825dcde5d5f7266d407' then 'cZRX'\n    end as symbol\nfrom contract_addresses\n\n\n-- prices by the minute\nselect \n    minute, \n    price,\n    symbol\nfrom prices.usd\nwhere symbol in ('ETH', 'DAI', 'USDC', 'ZRX', 'BAT', 'WBTC', 'REP')\n    and minute > '2019-05-23'\norder by symbol, minute\n"}
{"prompt": "This SQL query returns the liquidation success rate for the dYdX Solo Margin contract. The success rate is calculated as the number of successful liquidations divided by the total number of liquidations attempted, for a given week. The data is limited to the past 50 weeks.", "completion": " WITH successful AS \n(\nSELECT\ndate_trunc('week', block_time) week,\ncount(\"call_tx_hash\") as success\nFROM dydx.\"LiquidatorProxyV1ForSoloMargin_call_liquidate\" s\nLEFT JOIN ethereum.\"transactions\" tx on s.call_tx_hash = tx.hash\nWHERE call_success = true\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50),\n\ntotal AS \n(SELECT\ndate_trunc('week', block_time) week,\ncount(\"call_tx_hash\") as total\nFROM dydx.\"LiquidatorProxyV1ForSoloMargin_call_liquidate\" t\nLEFT JOIN ethereum.\"transactions\" tx on t.call_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50)\n\nSELECT successful.\"week\", 100 - (100.0 * (sum(\"success\")/sum(\"total\"))) as failure_rate\nFROM successful\nLEFT JOIN total on successful.week = total.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "The following SQL query returns the total value of ERC20 deposits made to a specific address, grouped by day and ordered by descending date. Only the top 10 results are shown.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\nsum(e.\"value\"/1e18) as deposits\nFROM erc20.\"ERC20_evt_Transfer\" e\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nWHERE e.\"to\" = '\\x29fe7D60DdF151E5b52e5FAB4f1325da6b2bD958' \nand e.\"contract_address\" = '\\x6b175474e89094c44da98b954eedeac495271d0f'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "The SQL query returns the reputation earned by each token, as a proportion of the total reputation earned.", "completion": " WITH symbols (address, symbol) AS (VALUES \n    ('\\x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6'::bytea, 'RDN'),\n    ('\\x744d70fdbe2ba4cf95131626614a1763df805b9e'::bytea, 'SNT'),\n    ('\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'::bytea, 'DAI'),\n    ('\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'::bytea, 'MKR'),\n    ('\\xd26114cd6ee289accf82350c8d8487fedb8a0c07'::bytea, 'OMG'),\n    ('\\x6810e776880c02933d47db1b9fc05908e5386b96'::bytea, 'GNO'),\n    ('\\xdd974d5c2e2928dea5f71b9825b8b646686bd200'::bytea, 'KNC'),\n    ('\\x543ff227f64aa17ea132bf9886cab5db55dcaddf'::bytea, 'GEN'),\n    ('\\x985dd3d42de1e256d09e1c10f112bccb8015ad41'::bytea, 'OCEAN'),\n    ('\\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'::bytea, 'LRC'),\n    ('\\x8f8221afbb33998d8584a2b05749ba73c37a938a'::bytea, 'REQ')\n),\nperToken as (\n\nSELECT  _token as token,\n        s.symbol,\n       SUM((_amount / 1e18) * (_numerator/_denominator) * _period) * 300000 as tokenScore\nFROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\" l\nINNER JOIN dxdao.\"DxLockWhitelisted4Rep_evt_LockToken\" lt ON l.\"_lockingId\" = lt.\"_lockingId\"\nLEFT JOIN symbols s ON lt._token = s.address \nGROUP BY 1,2),\ntotalScore as (\nSELECT  \n       SUM((_amount / 1e18) * (_numerator/_denominator) * _period) * 300000 as totalScore\nFROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\" l\nINNER JOIN dxdao.\"DxLockWhitelisted4Rep_evt_LockToken\" lt ON l.\"_lockingId\" = lt.\"_lockingId\"\nLEFT JOIN symbols s ON lt._token = s.address \n)\n\nSELECT symbol, (tokenscore / totalscore) * 300000 as Reputation FROM perToken, totalScore\nGROUP BY symbol, tokenscore, totalscore\n\n\n"}
{"prompt": "The SQL query selects * from the table \"ethereum.\"transactions\" and limits the number of results to 10.", "completion": " select * from ethereum.\"transactions\"\nlimit 10\n"}
{"prompt": "This query returns the first 10 events of type \"EthPurchase\" from the table \"uniswap.Exchange\" where the \"address\" field equals the specified value.", "completion": " SELECT * from uniswap.\"Exchange_evt_EthPurchase\"\nWHERE \"address\" = '\\xF53bBFBff01c50F2D42D542b09637DcA97935fF7'\nLIMIT 10"}
{"prompt": "This query returns the first 10 results from the 'cEther_call_liquidateBorrow' table and the first 10 results from the 'cErc20_evt_Redeem' table in the 'compound_v2' database.", "completion": " SELECT * FROM compound_v2.\"cEther_call_liquidateBorrow\"\nLIMIT 10\n\nSELECT * FROM compound_v2.\"cErc20_evt_Redeem\"\nLIMIT 10"}
{"prompt": "This SQL query select the date and number of unique sender from the \"Pool3_evt_Deposited\" and \"transactions\" table who deposited in the last 74 days and orders it by date.", "completion": " SELECT\ndate_trunc('week', block_time) as week,\ncount(distinct sender)\nFROM pooltogether_v2.\"Pool3_evt_Deposited\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nWHERE block_time < now() - interval '74 days'\nGROUP BY 1 \nORDER BY 1 desc\nLIMIT 60"}
{"prompt": "This query returns the number of distinct transactions made with Dapper contracts.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\xa78bbf97033e534c54b0a4fa62aa77b652ae4097', '\\xab76c6d00c603a7615d5459132c1745eb1fb4f6c') -- Dapper  WalletFactories \n\tand type = 'create'\n)\nselect count(distinct tx_hash) as num_transactions\nfrom ethereum.logs el\n\tjoin ethereum.blocks eb \n\t\ton el.block_number = eb.\"number\"\t\n\twhere topic1 = '\\x101214446435ebbb29893f3348e3aae5ea070b63037a3df346d09d3396a34aee' -- InvokeSuccess event\n\t\tand contract_address in (select address from wallets)"}
{"prompt": "This query returns the number of WETH prices for each day in the last 100 days, ordered from most recent to least recent.", "completion": " SELECT date_trunc('day', minute), COUNT(*)\nFROM prices.usd \nWHERE symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 100"}
{"prompt": "This query returns the balance of a wallet. The same value can be found on Etherscan.io by searching for the address 0xBa96009C200fACB2aEBB550925c0B6b3B9665E3a.\n\nThe query first calculates the total amount of outbound transfers from the wallet by looking at the 'from' field in the ethereum.traces table. It then calculates the total amount of inbound transfers to the wallet by looking at the 'to' field in the ethereum.traces table. Finally, it calculates the total amount of gas costs associated with the wallet by looking at the 'from' field in the ethereum.transactions table.\n\nAll of these values are then summed up and grouped by address.", "completion": " -- Find the balance of a wallet\n-- Same value as https://etherscan.io/address/0xBa96009C200fACB2aEBB550925c0B6b3B9665E3a\n\nSELECT address, sum(amount) as \"total\"\nFROM (\n\n    -- outbound transfers\n    SELECT \"from\" AS address, -tr.value AS amount\n    FROM ethereum.traces tr --unable to use ethereum.transactions as the table does not have [call_type]\n    WHERE \"from\" = '\\xd161F7FA342DCefEafDEb0827B83a400F57ad0a4'\n    AND success\n    AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n\n\n    UNION ALL\n\n    -- inbound transfers\n    SELECT \"to\" AS address, value AS amount\n    FROM ethereum.traces --unable to use ethereum.transactions as the table does not have [call_type]\n    WHERE \"to\" = '\\xd161F7FA342DCefEafDEb0827B83a400F57ad0a4'\n    AND success\n    AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n\n    UNION ALL\n    \n    -- gas costs\n    SELECT \"from\" AS address, -gas_used * gas_price AS amount\n    FROM ethereum.transactions\n    WHERE \"from\" = '\\xd161F7FA342DCefEafDEb0827B83a400F57ad0a4'\n    \n) table1 -- an alias required, otherwise \"Error: Subquery in FROM must have an alias at line 5, position 6. For example, FROM (SELECT ...) [AS] foo.\"\"\ngroup by address\n"}
{"prompt": "The SQL query shown will return the total amount of DAI bought on Uniswap within the past 24 hours.", "completion": " SELECT SUM(token_a_amount) AS dai_bought\nFROM dex.\"trades\"\nWHERE block_time > now() - interval '24 hours'\nAND token_a_symbol = 'DAI'\nAND project = 'Uniswap'\n;"}
{"prompt": "This query returns the number of distinct markets created per week, ordered by the most recent week first.", "completion": " SELECT\ndate_trunc('week', block_time) week,\ncount(distinct \"market\") markets\nFROM augur.\"Augur_evt_MarketCreated\" s\nLEFT JOIN ethereum.\"transactions\" tx ON s.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 100 "}
{"prompt": "This SQL query returns the number of GEN holders that auctioned for Rep on each day.", "completion": " SELECT date, sum(count(_bidder)) OVER (ORDER BY date)\nFROM (\n    SELECT DISTINCT ON (_bidder) date_trunc('day', tx.block_time) as date, _bidder\n    FROM dxdao.\"DxGenAuction4Rep_evt_Bid\" e\n    LEFT JOIN ethereum.transactions tx\n    ON e.tx_hash = tx.hash \n    ORDER BY _bidder, date asc\n) AS subq\nGROUP BY date;"}
{"prompt": "The following SQL query will select the tx_hash, sender, and \"totalPrice\"/1e18 as price from the pooltogether.\"Pool_evt_BoughtTickets\" table and limit the results to 10.", "completion": " SELECT tx_hash, sender, \"totalPrice\"/1e18 as price\nFROM pooltogether.\"Pool_evt_BoughtTickets\"\nLIMIT 10;"}
{"prompt": "This query returns the number of active traders on OpenSea each month. Active traders are defined as those who have made at least one trade on the platform. The data is grouped by month and ordered chronologically.", "completion": " SELECT date, count(account) AS users\nFROM\n  (SELECT date_trunc('month', evt_block_time) AS date,\n          maker AS account\n   FROM opensea.\"WyvernExchange_evt_OrdersMatched\"\n   WHERE evt_tx_hash not in\n       (SELECT *\n        FROM dune_user_generated.transactions_not_on_OS)\n   UNION SELECT date_trunc('month', evt_block_time) AS date,\n                taker AS account\n   FROM opensea.\"WyvernExchange_evt_OrdersMatched\"\n   WHERE evt_tx_hash not in\n       (SELECT *\n        FROM dune_user_generated.transactions_not_on_OS)\n   UNION SELECT date_trunc('month', block_time) AS date,\n                seller AS account\n   FROM seaport.view_transactions\n   WHERE zone_address in ('\\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',\n                          '\\x9b814233894cd227f561b78cc65891aa55c62ad2',\n                          '\\x004C00500000aD104D7DBd00e3ae0A5C00560C00',\n                          '\\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')\n   UNION SELECT date_trunc('month', block_time) AS date,\n                buyer AS account\n   FROM seaport.view_transactions\n   WHERE zone_address in ('\\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',\n                          '\\x9b814233894cd227f561b78cc65891aa55c62ad2',\n                          '\\x004C00500000aD104D7DBd00e3ae0A5C00560C00',\n                          '\\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')\n   UNION SELECT date_trunc('month', block_time) AS date,\n                tx_from AS account\n   FROM nft.trades\n   WHERE platform = 'OpenSea' ) a\nGROUP BY 1\nORDER BY 1"}
{"prompt": "This SQL query returns the total number of unique transactions with sandwiches swaps.", "completion": " SELECT\n  COUNT(DISTINCT(transaction_hash)) AS `Total Unique Transactions with Sandwiches Swaps`\nFROM\n  flashbots.sandwiched_swaps"}
{"prompt": "This query lists the addresses that called the xfLobbyFlush() function to send ETH to the Origin address, as well as the number of times they called the function. The query is sorted by the number of times the function was called, in descending order.", "completion": " SELECT \"from\", count(*) as times_called\nFROM ethereum.traces t\nWHERE t.\"to\" = '\\x2b591e99afe9f32eaa6214f7b7629768c40eeb39' /* HEX Contract Address */\n  AND t.block_number >= 9041184\n  AND t.tx_success = TRUE\n  and t.input = '\\x5ac1f357' /* xfLobbyFlush() */\ngroup by \"from\"\norder by times_called desc\n\n-- this is interesting to see who is calling xfLobbyFlush\n-- because the *only* beneficiary is the Origin address (ie: Richard Heart)\n-- there is no bounty paid so nobody (apart from Richard Heart) has incentive\n-- to call it."}
{"prompt": "This SQL query will select the contract address, sender, receiver, and encoded value for the top 10 token transfers where the topic1 is equal to 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, topic2 is not null, topic3 is not null, and data is not null.", "completion": " SELECT\n    contract_address AS token,\n    decode(right(topic2::text, 40), 'hex') AS sender,\n    decode(right(topic3::text, 40), 'hex') AS receiver,\n    data AS encoded_value\nFROM ethereum.logs\nWHERE topic1='\\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\nAND topic2 IS NOT NULL\nAND topic3 IS NOT NULL\nand data IS NOT NULL\nLIMIT 10;"}
{"prompt": "Get all data from the ethereum.traces_p7000000 table, limited to 10 rows.", "completion": " SELECT *\nFROM ethereum.traces_p7000000\nLIMIT 10;"}
{"prompt": "This SQL query returns the total balance of ETH staking rewards for the address 'a26e80e7Dea86279c6d778D702Cc413E6CFfA777'.", "completion": " SELECT SUM(amount) as balance\nFROM (\n    SELECT \"from\" as address, -value/1e18 as amount\n     FROM ethereum.traces\n     WHERE \"from\" = '\\xa26e80e7Dea86279c6d778D702Cc413E6CFfA777'\n     AND tx_success = true\n     AND call_type != 'delegatecall'\nUNION ALL\n    SELECT \"to\" as address, value/1e18 as amount\n     FROM ethereum.traces\n     WHERE \"to\" = '\\xa26e80e7Dea86279c6d778D702Cc413E6CFfA777'\n     AND tx_success = true\n     AND call_type != 'delegatecall'\n) "}
{"prompt": "This SQL query returns the total number of contracts created each week, as well as the cumulative total of contracts created up to that week.", "completion": " SELECT time\n, SUM(created_contracts) AS created_contracts\n, SUM(SUM(created_contracts)) OVER (ORDER BY time RANGE UNBOUNDED PRECEDING) AS cum_created_contracts\nFROM (\n    SELECT date_trunc('week', block_time) AS time\n    , COUNT(*) AS created_contracts\n    FROM ethereum.traces\n    WHERE `type` = 'create'\n    AND block_time < date_trunc('week', NOW())\n    GROUP BY time\n    ) non_cum\nGROUP BY time"}
{"prompt": "This SQL query calculates the reputation earned by each token holder for the 'MKR' token. The reputation is calculated by taking the sum of the amount of the token held, divided by the total amount of the token held by all users, multiplied by the total reputation score.", "completion": " WITH perToken as (\nWITH symbols (address, symbol) AS (VALUES \n    ('\\x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6'::bytea, 'RDN'),\n    ('\\x744d70fdbe2ba4cf95131626614a1763df805b9e'::bytea, 'SNT'),\n    ('\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'::bytea, 'DAI'),\n    ('\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'::bytea, 'MKR'),\n    ('\\xd26114cd6ee289accf82350c8d8487fedb8a0c07'::bytea, 'OMG'),\n    ('\\x6810e776880c02933d47db1b9fc05908e5386b96'::bytea, 'GNO'),\n    ('\\xdd974d5c2e2928dea5f71b9825b8b646686bd200'::bytea, 'KNC'),\n    ('\\x543ff227f64aa17ea132bf9886cab5db55dcaddf'::bytea, 'GEN'),\n    ('\\x985dd3d42de1e256d09e1c10f112bccb8015ad41'::bytea, 'OCEAN'),\n    ('\\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'::bytea, 'LRC'),\n    ('\\x8f8221afbb33998d8584a2b05749ba73c37a938a'::bytea, 'REQ')\n)\nSELECT  \n \n        _token as token,\n        s.symbol,\n       SUM((_amount / 1e18) * (_denominator/_numerator)) as tokenScore\nFROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\" l\nINNER JOIN dxdao.\"DxLockWhitelisted4Rep_evt_LockToken\" lt ON l.\"_lockingId\" = lt.\"_lockingId\"\nLEFT JOIN symbols s ON lt._token = s.address \nWHERE s.symbol = 'MKR'\nGROUP BY 1,2),\n\ntotalScore as (\nWITH symbols (address, symbol) AS (VALUES \n    ('\\x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6'::bytea, 'RDN'),\n    ('\\x744d70fdbe2ba4cf95131626614a1763df805b9e'::bytea, 'SNT'),\n    ('\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'::bytea, 'DAI'),\n    ('\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'::bytea, 'MKR'),\n    ('\\xd26114cd6ee289accf82350c8d8487fedb8a0c07'::bytea, 'OMG'),\n    ('\\x6810e776880c02933d47db1b9fc05908e5386b96'::bytea, 'GNO'),\n    ('\\xdd974d5c2e2928dea5f71b9825b8b646686bd200'::bytea, 'KNC'),\n    ('\\x543ff227f64aa17ea132bf9886cab5db55dcaddf'::bytea, 'GEN'),\n    ('\\x985dd3d42de1e256d09e1c10f112bccb8015ad41'::bytea, 'OCEAN'),\n    ('\\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'::bytea, 'LRC')\n)\nSELECT  \n       SUM((_amount / 1e18) * (_numerator/_denominator) * _period) * 300000 as totalScore\nFROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\" l\nINNER JOIN dxdao.\"DxLockWhitelisted4Rep_evt_LockToken\" lt ON l.\"_lockingId\" = lt.\"_lockingId\"\nLEFT JOIN symbols s ON lt._token = s.address \n)\n\nSELECT symbol, (tokenscore / totalscore) * 300000 as Reputation FROM perToken, totalScore\nGROUP BY symbol, tokenscore, totalscore\n\n\n"}
{"prompt": "This SQL query calculates the reputation score for different tokens and auctions. The score is based on the amount of the token locked, the length of the lock period, and the number of tokens locked.", "completion": " WITH mgn_score (name, score) AS (\n    SELECT 'MGN'::text, SUM(_amount) / 1e18 * 500000\n    FROM dxdao.\"DxLockMgnForRep_evt_Lock\"\n),\neth_score (name, score) AS (\n    SELECT 'ETH'::text, SUM(_amount) / 1e18 * 80000\n    FROM dxdao.\"DxLockEth4Rep_evt_Lock\"\n),\n_token_score(token, score) AS (\n    SELECT _token, SUM((_amount / 1e18) * (_numerator/_denominator) * _period) * 300000\n    FROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\" l INNER JOIN dxdao.\"DxLockWhitelisted4Rep_evt_LockToken\" lt\n    ON l.\"_lockingId\" = lt.\"_lockingId\"\n    GROUP BY 1\n),\ntoken_score (name, score) AS (\n    SELECT 'TOKEN'::text, SUM(score)\n    FROM _token_score\n),\n_gen_auction_score(auction, score) AS (\n    SELECT \"_auctionId\", SUM(_amount * 10000)\n    FROM dxdao.\"DxGenAuction4Rep_evt_Bid\"\n    GROUP BY 1\n),\ngen_auction_score(name, score) AS (\n    SELECT 'GENAUCTION'::text, SUM(score)\n    FROM _gen_auction_score\n)\nSELECT name, score FROM mgn_score UNION\n(SELECT name, score FROM eth_score) UNION\n(SELECT name, score FROM token_score) UNION\n(SELECT name, score FROM gen_auction_score)\n"}
{"prompt": "The following SQL query returns the total volume of Dai and USDC exchanged on the Curve.fi platform, broken down by hour.", "completion": " WITH base_info as (SELECT date_trunc('hour', block_time) as hour, *\r\nFROM curvefi.\"compound_v2_evt_TokenExchangeUnderlying\" e \r\nINNER JOIN ethereum.transactions txs ON txs.hash = e.evt_tx_hash)\r\nSELECT \r\nbase_info.hour,\r\ncoalesce(SUM(CASE bought_id\r\nWHEN 0 THEN tokens_bought/1e18 END), 0) as dai,\r\ncoalesce(SUM(CASE bought_id\r\nWHEN 1 THEN tokens_bought/1e6 END), 0) as usdc,\r\nSUM(CASE bought_id\r\nWHEN 0 THEN tokens_bought/1e18\r\nWHEN 1 THEN tokens_bought/1e6\r\nEND) as volume \r\nFROM base_info\r\nGROUP BY hour"}
{"prompt": "This SQL query calculates the hourly net cumulative DAI supply (mint - burn) from the data in the \"DAI_call_mint\" and \"DAI_call_burn\" tables.", "completion": " SELECT date_trunc('hour', block_time) AS TIME,\n       sum(c.migrated),\n       SUM (SUM(c.migrated)) OVER (ORDER BY date_trunc('hour', block_time)) as TOTAL\n\nFROM\n  (SELECT block_time,\n          wad/1e18 AS migrated\n   FROM makermcd.\"DAI_call_mint\" a\n   LEFT JOIN ethereum.transactions tx ON tx.hash = a.call_tx_hash\n   WHERE call_success = TRUE\n   UNION SELECT block_time, -wad/1e18 AS migrated\n   FROM makermcd.\"DAI_call_burn\" b\n   LEFT JOIN ethereum.transactions tx ON tx.hash = b.call_tx_hash\n   WHERE call_success = TRUE) c\nGROUP BY time\nORDER BY time DESC"}
{"prompt": "This SQL query returns the average price of several stablecoins over the past 720 days. The stablecoins included are AMPL, UST, FRAX, USDD, USDN, and Alchemix. The query groups the prices by day and coin.", "completion": " --from (\nSELECT\n    time, \n    '1$' AS symbol,\n    1 AS prices\nfrom generate_series(date_trunc('day',now()) - interval '720 days', date_trunc('day',now()), '1 day') time\n\nUNION ALL\n\nSELECT\n    date_trunc('day',minute) as time, \n    CASE \"contract_address\"\n        WHEN '\\xd46ba6d942050d489dbd938a2c909a5d5039a161' then 'AMPL'\n        WHEN '\\xa47c8bf37f92aBed4A126BDA807A7b7498661acD' then 'UST'\n        WHEN '\\x674C6Ad92Fd080e4004b2312b45f796a192D27a0' then 'USDN'\n        WHEN '\\x0c10bf8fcb7bf5412187a595ab97a3609160b5c6' then 'USDD'\n        WHEN '\\x853d955acef822db058eb8505911ed77f175b99e' then 'Frax'\n        WHEN '\\xBC6DA0FE9aD5f3b0d58160288917AA56653660E9' then 'Alchemix'\n    END AS symbol,\n    AVG(price) AS prices\nfrom prices.\"usd\"\nWHERE contract_address IN (\n('\\xD46bA6D942050d489DBd938a2C909A5d5039A161'), --AMPL\n('\\xa47c8bf37f92aBed4A126BDA807A7b7498661acD'), --UST\n('\\x853d955acef822db058eb8505911ed77f175b99e'), --FRAX\n('\\x0c10bf8fcb7bf5412187a595ab97a3609160b5c6'), --USDD\n('\\x674C6Ad92Fd080e4004b2312b45f796a192D27a0'), --USDN\n('\\xBC6DA0FE9aD5f3b0d58160288917AA56653660E9') --Alchemix\n)\nand minute >= date_trunc('day',now()) - interval '720 days'\nGROUP BY time, 2"}
{"prompt": "This SQL query returns the total SOL, max SOL, min SOL, and count of transactions for the past 20 days for a specific account key.", "completion": " SELECT\n  block_date,\n  sum(pre_balances[0] - post_balances[0]) / power(10, 9) as total_sol,\n  max(pre_balances[0] - post_balances[0]) / power(10, 9) as max_sol,\n  min(pre_balances[0] - post_balances[0]) / power(10, 9) as min_sol,\n  count(1)\nFROM\n  solana.transactions\nWHERE\n  block_date >= (CURRENT_DATE - '20 days':: INTERVAL)\n  AND error is NULL\n  and array_contains(\n    account_keys,\n    \"namesLPneVptA9Z5rqUDD9tMTWEJwofgaYwp8cawRkX\"\n  )\nGROUP BY\n  block_date\nORDER BY\n  block_date desc"}
{"prompt": "This query returns the sum of all stablecoin transfers for each day over the past 31 days.", "completion": " SELECT date_trunc('day', block_time),\nSUM(amount)\nFROM stablecoin.transfer\nWHERE date_trunc('day', block_time) > now() - interval '31 day'\nAND block_time < date_trunc('day', now())\nGROUP BY 1\n;"}
{"prompt": "This SQL query calculates the total volume of swaps made on the Totle platform. It does this by looking at the source and destination assets and amounts for each swap, and then converting those into USD prices using data from the prices.\"usd\" table. Finally, it sums up the total volume for all swaps.", "completion": " SELECT\n    SUM(\n        GREATEST(\n            swap.\"sourceAmount\" * (\n                CASE\n                    WHEN swap.\"sourceAsset\" = '\\x0000000000000000000000000000000000000000' THEN (\n                        SELECT p.price\n                        FROM prices.\"usd\" p\n                        WHERE p.contract_address is NULL\n                        ANd p.symbol = 'ETH'\n                        AND p.minute = date_trunc('minute', tx.block_time)\n                        LIMIT 1\n                    )\n                    ELSE (\n                        SELECT p.price\n                        FROM prices.\"usd\" p\n                        WHERE p.contract_address = swap.\"sourceAsset\"\n                        AND p.minute = date_trunc('minute', tx.block_time)\n                        LIMIT 1\n                    )\n                END\n            ) / POWER(10, (\n                    SELECT decimals FROM (\n                        (SELECT decimals FROM erc20.tokens WHERE contract_address = swap.\"sourceAsset\" LIMIT 1) UNION ALL\n                        SELECT '18'\n                    ) ttt LIMIT 1\n                )),\n            swap.\"destinationAmount\" * (\n                CASE\n                    WHEN swap.\"destinationAsset\" = '\\x0000000000000000000000000000000000000000' THEN (\n                        SELECT p.price\n                        FROM prices.\"usd\" p\n                        WHERE p.contract_address is NULL\n                        ANd p.symbol = 'ETH'\n                        AND p.minute = date_trunc('minute', tx.block_time)\n                        LIMIT 1\n                    )\n                    ELSE (\n                        SELECT p.price\n                        FROM prices.\"usd\" p\n                        WHERE p.contract_address = swap.\"destinationAsset\"\n                        AND p.minute = date_trunc('minute', tx.block_time)\n                        LIMIT 1\n                    )\n                END\n            ) / POWER(10, (\n                    SELECT decimals FROM (\n                        (SELECT decimals FROM erc20.tokens WHERE contract_address = swap.\"destinationAsset\" LIMIT 1) UNION ALL\n                        SELECT '18'\n                    ) ttt LIMIT 1\n                ))\n        )\n    ) AS volume\nFROM (\n    SELECT \"sourceAsset\", \"destinationAsset\", \"sourceAmount\", \"destinationAmount\", \"evt_tx_hash\" as \"tx_hash\" FROM totle.\"TotlePrimary_evt_LogSwap\" UNION ALL\n    SELECT \"sourceAsset\", \"destinationAsset\", \"sourceAmount\", \"destinationAmount\", \"evt_tx_hash\" as \"tx_hash\" FROM totle.\"TotlePrimary2.1_evt_LogSwap\"\n) swap\nLEFT JOIN ethereum.transactions tx on tx.hash = swap.tx_hash\n"}
{"prompt": "This query returns the total fees paid on the 0x exchange protocol, broken down by day, as well as the average Ethereum price in USD for each day.", "completion": " SELECT \ndate_trunc('day', evt_block_time) as day,\nsum(\"protocolFeePaid\"/1e18*p.price) as fees_paid, \nsum(sum(\"protocolFeePaid\"/1e18*p.price)) over (order by date_trunc('day', evt_block_time)) as cumulative_fees,\navg(p.price) as ETH_usd\nFROM zeroex_v3.\"Exchange_evt_Fill\"\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', evt_block_time)\nWHERE p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 desc\n\n"}
{"prompt": "The SQL query below returns the call block time and output_mcrtp divided by 100 (mcr_pct) from the nexusmutual.\"MCR_call_calculateVtpAndMCRtp\" table, where output_mcrtp is not equal to 0, ordered by the first column (call_block_time).", "completion": " SELECT call_block_time,\n       output_mcrtp / 100 AS mcr_pct\nFROM nexusmutual.\"MCR_call_calculateVtpAndMCRtp\"\nWHERE output_mcrtp != 0\nORDER BY 1"}
{"prompt": "This query returns the USD borrow volume per token for the last two months, grouped by week.", "completion": " SELECT date_trunc('week', tx.block_time) AS weekStarting,       --Get the time from the Ethereum transactions table\n       p.symbol AS token,                                       --Get token symbols from the coincap USD price table\n       SUM((b.\"borrowAmount\" / 1e18) * p.average) AS usdAmount          --Get the amount borrowed from the smart contract event\nFROM compoundv2.\"cErc20_evt_Borrow\" b,                  --Table with the relevant event\n     ethereum.transactions tx,                                  --Table with Ethereum transactions\n     coincap.\"tokens/usd\" p                                     --Table with token/USD prices\nWHERE b.tx_hash = tx.hash                                       --Join the smart contract event on transactions\n  AND b.\"address\" = p.asset                                       --Join asset from smart contract event with USD prices\n  AND date_trunc('minute', p.time) = date_trunc('minute', tx.block_time) --Join USD price on time from transactions\n  AND p.time > now() - interval '2 months'                      --See the last two months\n  AND tx.success = TRUE                                         --Remove invalid transactions\nGROUP BY weekStarting,                                          \n         token\nORDER BY weekStarting;"}
{"prompt": "Select all fields from the table \"WyvernExchange_evt_OrdersMatched\" limited to the first 10 entries.", "completion": " SELECT *\nFROM wyvern.\"WyvernExchange_evt_OrdersMatched\" LIMIT 10"}
{"prompt": "This SQL query returns the number of distinct receivers for the SAI event transfer table.", "completion": " SELECT \n\nCOUNT(DISTINCT dst) AS receivers\n             \n      FROM maker.\"SAI_evt_Transfer\" t\n      "}
{"prompt": "This SQL query returns the total sponsorship for each week, as well as the cumulative sponsorship for the past 10 weeks.", "completion": " WITH spons_dep AS \n(\nSELECT\ndate_trunc('week', block_time) as week,\nsum(amount/1e18) as depos\nFROM pooltogether.\"MCDAwarePool_evt_SponsorshipDeposited\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n),\n\nspons_with AS\n(\nSELECT\ndate_trunc('week', block_time) as week,\nsum(amount/1e18) as withdr\nFROM pooltogether.\"MCDAwarePool_evt_SponsorshipAndFeesWithdrawn\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n)\n\nSELECT spons_dep.\"week\", \nsum(depos-withdr) as sponsorship,\nsum(sum(depos-withdr)) over (order by spons_dep.week) as cumulative_sponsorship\nFROM spons_dep\nLEFT JOIN spons_with ON spons_dep.week = spons_with.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This query returns the total number of collectors for each day.", "completion": " SELECT date, sum(collectors) OVER (\n                                   ORDER BY date ASC ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS total_collectors\nFROM\n  (SELECT date, count(collector) AS collectors\n   FROM\n     (SELECT min(date) AS date,\n             collector\n      FROM\n        (SELECT date_trunc('day', evt_block_time) AS date,\n                _buyer AS collector\n         FROM superrare.\"SuperRareMarketAuction_evt_Sold\"\n         UNION ALL SELECT date_trunc('day', evt_block_time) AS date,\n                          _buyer AS collector\n         FROM superrare.\"SuperRare_evt_Sold\"\n         UNION ALL SELECT date_trunc('day', evt_block_time) AS date,\n                          _bidder AS collector\n         FROM superrare.\"SuperRareMarketAuction_evt_AcceptBid\"\n         UNION ALL SELECT date_trunc('day', evt_block_time) AS date,\n                          _bidder AS collector\n         FROM superrare.\"SuperRare_evt_AcceptBid\"\n         UNION SELECT block_time,\n                      substring(DATA\n                                FROM 13\n                                FOR 20)\n         FROM ethereum.\"logs\"\n         WHERE contract_address = '\\x8c9f364bf7a56ed058fc63ef81c6cf09c833e656'\n           AND topic1 = '\\xea6d16c6bfcad11577aef5cc6728231c9f069ac78393828f8ca96847405902a9'\n           AND bytea2numeric(substring(DATA\n                                       FROM 33\n                                       FOR 32)) > 0\n         UNION ALL SELECT block_time,\n                          substring(topic3\n                                    FROM 13\n                                    FOR 20)\n         FROM ethereum.\"logs\"\n         WHERE contract_address = '\\x65b49f7aee40347f5a90b714be4ef086f3fe5e2c'\n           AND topic1 in ('\\x2a9d06eec42acd217a17785dbec90b8b4f01a93ecd8c127edd36bfccf239f8b6',\n                          '\\x5764dbcef91eb6f946584f4ea671217c686fa7e858ce4f9f42d08422b86556a9')\n         UNION ALL SELECT evt_block_time,\n                          _bidder\n         FROM superrare.\"SuperRareBazaar_evt_AcceptOffer\"\n         UNION ALL SELECT evt_block_time,\n                          _bidder\n         FROM superrare.\"SuperRareBazaar_evt_AuctionSettled\"\n         WHERE _amount > 0\n         UNION ALL SELECT evt_block_time,\n                          _buyer\n         FROM superrare.\"SuperRareBazaar_evt_Sold\") a\n      GROUP BY 2) b\n   GROUP BY 1\n   ORDER BY 1) c"}
{"prompt": "This query returns the total number of mStable users over time. It does this by first counting the number of unique users per day, then summing those numbers up over time.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(evt_block_time)) AS date,\n                minter AS account\n         FROM mstable.\"Masset_evt_Minted\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      minter AS account\n         FROM mstable.\"Masset_evt_MintedMulti\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      saver AS account\n         FROM mstable.\"SavingsContract_evt_SavingsDeposited\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      provider AS account\n         FROM mstable.\"IncentivisedStakingLockup_evt_Deposit\"\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "This SQL query returns the date and the total amount of WBTC minted for each week. The data is ordered by the date.", "completion": " SELECT date_trunc ('week', tx.block_time) date, \n        SUM (wbtc_mint.amount/100000000) OVER (ORDER BY date_trunc ('week', tx.block_time)) wbtc_minted\nFROM wrappedbtc.\"WBTC_evt_Mint\" wbtc_mint\nLEFT JOIN ethereum.transactions tx\nON tx.hash = wbtc_mint.evt_tx_hash"}
{"prompt": "This SQL query returns the number of WBTC transactions that occurred in each week, as well as the total number of transactions for that week. The data is ordered by week, with the most recent week being first. Only the top 50 weeks are included in the results.", "completion": " SELECT \ndate_trunc('week', block_time) as week,\ncount(\"evt_tx_hash\") as tx_count FROM wrappedbtc.\"WBTC_evt_Transfer\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This query returns the cumulative sum of WBTC minted and burned for the past 10 weeks.", "completion": " WITH mint AS\n(\nSELECT\ndate_trunc('week', block_time) as week,\nsum(\"amount\"/1e8) as wbtc_minted FROM wrappedbtc.\"WBTC_evt_Mint\" m\nLEFT JOIN ethereum.\"transactions\" tx on m.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10),\n\nburn AS \n(\nSELECT\ndate_trunc('week', block_time) as week,\nsum(b.\"value\"/1e8) as wbtc_burned FROM wrappedbtc.\"WBTC_evt_Burn\" b\nLEFT JOIN ethereum.\"transactions\" tx on b.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n)\n\nSELECT mint.\"week\", sum(sum(\"wbtc_minted\")-sum(\"wbtc_burned\")) OVER (ORDER BY mint.\"week\") as wbtc_outstanding \nFROM mint\nLEFT JOIN burn ON mint.week = burn.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n"}
{"prompt": "This query calculates the sum of gas prices multiplied by gas used, divided by 1e18, from the ethereum.transactions and ethereum.receipts tables, where the block time is greater than now minus 14 days, the transaction was unsuccessful, and the gas limit is equal to the gas used.", "completion": " SELECT SUM(tx.gas_price * r.gas_used/1e18)\nFROM ethereum.transactions as tx\nINNER JOIN ethereum.receipts as r ON r.tx_hash = hash\nWHERE tx.block_time > now() - interval '14 days'\nAND tx.success = false\nAND tx.gas_limit = r.gas_used"}
{"prompt": "This SQL query returns the sum of ETH deposits and borrows for the Fulcrum DAI contract for the past 10 days.", "completion": " WITH net_deposit AS \n(\n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(\"assetAmount\"/1e18) as ETH_deposits\n    FROM fulcrum.\"iToken_evt_Mint\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\n    GROUP BY 1\nUNION ALL \n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(-\"assetAmount\"/1e18) as ETH_deposits\n    FROM fulcrum.\"iToken_evt_Burn\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\n    GROUP BY 1\n),\n\nnet_borrow AS \n(\n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(\"borrowAmount\"/1e18) as borrows\n    FROM fulcrum.\"iToken_evt_Borrow\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\n    GROUP BY 1 \nUNION ALL\n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(-Amount/1e18) as borrows\n    FROM fulcrum.\"iToken_evt_Repay\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\n    GROUP BY 1 \n)\n\nSELECT net_deposit.day,\nsum(ETH_deposits) as dep,\nsum(borrows) as bor\nFROM net_deposit\nINNER JOIN net_borrow b ON net_deposit.day = b.day\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n"}
{"prompt": "This SQL query returns the data on ETH utilization on the Fulcrum platform. It includes the day, the cumulative borrow, the cumulative deposit, and the utilization percentage.", "completion": " WITH net_deposit AS \n(\n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(\"assetAmount\"/1e18) as ETH_deposits,\n    sum(sum(\"assetAmount\"/1e18)) over (order by date_trunc('day', block_time)) as cumul_deposits\n    FROM fulcrum.\"iToken_evt_Mint\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\n    GROUP BY 1\nUNION ALL \n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(-\"assetAmount\"/1e18) as ETH_deposits,\n    sum(sum(-\"assetAmount\"/1e18)) over (order by date_trunc('day', block_time)) as cumul_deposits\n    FROM fulcrum.\"iToken_evt_Burn\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\n    GROUP BY 1\n),\n\nnet_borrow AS \n(\n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(\"borrowAmount\"/1e18) as borrows,\n    sum(sum(\"borrowAmount\"/1e18)) over (order by date_trunc('day', block_time)) as cumul_borrow\n    FROM fulcrum.\"iToken_evt_Borrow\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\n    GROUP BY 1 \nUNION ALL\n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(-Amount/1e18) as borrows,\n    sum(sum(-Amount/1e18)) over (order by date_trunc('day', block_time)) as cumul_borrow\n    FROM fulcrum.\"iToken_evt_Repay\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\n    GROUP BY 1 \n)\n\nSELECT net_deposit.day,\nsum(cumul_borrow/2) as cumulative_borrow,\nsum(cumul_deposits/2) as cumulative_deposit,\nsum(cumul_borrow)/sum(cumul_deposits)*100 as utilization\nFROM net_deposit\nINNER JOIN net_borrow b ON net_deposit.day = b.day\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 100\n"}
{"prompt": "This query returns the safe addresses that were created from a specific transaction hash. The transaction must be successful and of the type \"create.\"", "completion": " -- select et.address as safe_addresses\n-- from ethereum.traces et \n-- where et.tx_success = True\n-- and et.tx_hash = '\\xccea710505d461b46e571d8e840138c033d58f221628a58f9cbea4ab91d1d6af'\n-- -- and et.type = 'create'\n-- -- and code = '\\x608060405273ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415603d573d6000fd5b3d6000f3fea165627a7a723058201e7d648b83cfac072cbccefc2ffc62a6999d4a050ee87a721942de1da9670db80029'\n\nselect *\nfrom gnosis_safe.\"Safev1.0.0_call_setup\" gs\nleft join ethereum.traces et \n    on gs.call_tx_hash = et.tx_hash \nwhere et.tx_success = True\n    and et.call_type = 'delegatecall'\n    and et.to = '\\xb6029ea3b2c51d09a50b53ca8012feeb05bda35a' -- mastercopy\n    and et.from = '\\x08fb5a287ad671126ae4544afefca21b37d9777b' -- safe that seems ti have several successful setup calls oO\norder by block_time, sub_traces"}
{"prompt": "This SQL query will select the date, token symbol, and sum of mint amount in USD from the compound view mint table, where the block time is within the last 8 weeks. It will group the results by date and token symbol, and order them by date.", "completion": " SELECT\ndate_trunc('week', block_time),\ntoken_symbol,\nSUM(\"mint_amount_usd\")\nFROM dune_user_generated.\"compound_view_mint\"\nWHERE block_time > now() - interval '8 weeks' \nGROUP BY 1,2 \nORDER BY 1;\n\n-- See data table examples:\n--SELECT * FROM dune_user_generated.\"compound_view_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_borrow\" when format is decided\n--SELECT * FROM dune_user_generated.\"compound_view_repay_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_repay_borrow\" when format is decided"}
{"prompt": "This query returns the total transaction fees for each day, for all transactions that were either \"commitBlock\" or \"verifyBlocks\" calls on the Loopring Exchange.", "completion": " WITH loopring_transactions AS(\nSELECT call_tx_hash as tx_hash\nFROM loopring.\"ExchangeV3_call_commitBlock\"\nUNION\nSELECT call_tx_hash as tx_hash\nFROM loopring.\"ExchangeV3_call_verifyBlocks\"\n)\nSELECT date_trunc('day', tx.block_time),\n       sum((tx.gas_price*r.gas_used)/1e18) as total_tx_fees\nFROM loopring_transactions b\nLEFT JOIN ethereum.transactions tx ON tx.hash = b.tx_hash\nLEFT JOIN ethereum.receipts r ON tx.\"hash\" = r.tx_hash\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns the top three spenders of Ethereum Name Service (ENS) on days when a lot of money was spent, in terms of US dollars. The query first calculates the total amount of ETH spent by each owner on each day. It then joins this with data on the average ETH/USD price for each day, in order to calculate the total USD amount spent by each owner on each day. Finally, it groups and orders the data by day, and returns the top three spenders for each day.", "completion": " WITH ens1 AS (SELECT date_trunc ('day', tx.block_time) date, SUM (tx.value/1e18) eth_spent, owner\n                FROM ethereumnameservice.\"ENSRegistry_evt_NewOwner\" r\n                LEFT JOIN ethereum.transactions tx\n                ON tx.hash = r.evt_tx_hash\n                GROUP BY 1, 3),\n    price1 AS (SELECT date_trunc ('day', minute) date, AVG (price) avg_price_eth_usd\n                    FROM prices.layer1_usd_eth\n                    GROUP BY 1)\n\nSELECT ens1.date, (ens1.eth_spent * price1.avg_price_eth_usd) AS total_usd_spent, ens1.owner\nFROM ens1\nJOIN price1\nON ens1.date = price1.date\nGROUP BY 1, 2, 3\nORDER BY 2 DESC\nLIMIT 3"}
{"prompt": "This SQL query will select all information from the tables in the information schema.", "completion": " select * from information_schema.tables"}
{"prompt": "This SQL query calculates the total number of transactions made with Dapper contracts, accumulated daily over time.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\xa78bbf97033e534c54b0a4fa62aa77b652ae4097', '\\xab76c6d00c603a7615d5459132c1745eb1fb4f6c') -- Dapper  WalletFactories \n\tand type = 'create'\n),\ndata as (\n    select date_trunc('day', eb.\"time\") AS \"day\", count(distinct el.tx_hash) as transactions\n    from ethereum.logs el\n\tjoin ethereum.blocks eb \n\t\ton el.block_number = eb.\"number\"\t\n\twhere topic1 = '\\x101214446435ebbb29893f3348e3aae5ea070b63037a3df346d09d3396a34aee' -- InvokeSuccess event\n\t\tand contract_address in (select address from wallets)\n    group by 1\n)\nselect \"day\", sum(transactions) over (order by \"day\" asc rows between unbounded preceding and current row) as transactions_running_total\nfrom data"}
{"prompt": "This SQL query returns the median gas price for each hour over the past month.", "completion": " SELECT date_trunc('hour', block_time) AS time,\n    (PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY gas_price))/POWER(10, 9)  AS median_gas\nFROM ethereum.transactions\nWHERE block_time > NOW() - interval '1 month'\nGROUP BY time"}
{"prompt": "This query returns the number of unique users who have created a new CDP.", "completion": " SELECT COUNT(DISTINCT usr) AS addresses \nFROM makermcd.\"CDP_MANAGER_evt_NewCdp\";"}
{"prompt": "This SQL query returns the total number of Dharma contracts created each day, accumulated over time.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\xfc00C80b0000007F73004edB00094caD80626d8D') -- DharmaSmartWalletFactoryV1\n\tand type = 'create'\n),\ndata as (\n    select date_trunc('day', creation_time) AS \"day\", count(address) as created_wallets\n    from wallets\n    group by 1\n)\nselect \"day\", sum(created_wallets) over (order by \"day\" asc rows between unbounded preceding and current row) as created_wallets_running_total\nfrom data"}
{"prompt": "The query returns the number of unique users who have made trades for the 1inch project.", "completion": " SELECT COUNT(DISTINCT tx_from) as users\nFROM dex.trades\nWHERE project = '1inch'\n"}
{"prompt": "The SQL query will return the total number of Uniswap liquidity pools that were created successfully.", "completion": " SELECT COUNT ( \"call_success\")  as \"Total Uniswap Liquidity Pools\"\nFROM uniswap.\"Factory_call_createExchange\"\nWHERE \"call_success\" = TRUE\n"}
{"prompt": "This SQL query returns the total volume of ETH deposited in the past 7 days, grouped by day.", "completion": " SELECT date_trunc('days', tx.block_time) AS Date,\n      SUM(amount/1e18*p.price) AS volume\nFROM (\n     select call_tx_hash,amount,asset_address from (\n\t\tselect \n\t\t  cast(subactions->>'actionType' as integer) as action_type,\n\t\t  substring((subactions->'encodedParams')::text, 28, 40) as asset_address,\n\t\t  hex2numeric(substring((subactions->'encodedParams')::text, 68, 64)) as amount,\n\t\t  call_tx_hash\n\t\t from (select  jsonb_array_elements(actions) as subactions, call_tx_hash from hydroprotocol.\"Margin_call_batch\") a ) b where b.action_type = 5 and asset_address = '000000000000000000000000000000000000000e'\n    ) deposits\nINNER JOIN\n     (SELECT hash,\n             block_time\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '7 days'\n        AND block_time < date_trunc('day', NOW())) tx ON deposits.call_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'ETH'\nGROUP BY 1\nORDER by 1"}
{"prompt": "This query will show the total trading volume for all transactions where the tokens were sent to the address '0x0000000000000000000000000000000000000000'.", "completion": " SELECT\n--\"batchId\",\n--\"block_time\",\nSUM (tokens.\"value\"/10^18*2/0.1*100) as trading_volume\n-- CONCAT ('0x', ENCODE (\"evt_tx_hash\", 'hex')) as transaction_hash,\n-- CONCAT('https://etherscan.io/tx/0x',right(text(\"evt_tx_hash\"),64)) as Etherscan_link\n-- tokens.\"to\"\nFROM gnosis.\"OWLProxy_evt_Transfer\" tokens\nINNER JOIN gnosis_protocol.\"BatchExchange_call_submitSolution\" dfusion\n    ON dfusion.call_tx_hash = tokens.evt_tx_hash\nWHERE tokens.\"to\"='\\x0000000000000000000000000000000000000000';"}
{"prompt": "This SQL query returns the following data:\n\n- The date of the call block time, truncated to the nearest day\n- The sum of all tokens \"value\" divided by 10^18 (i.e. the number of OWL burnt)\n- The sum of all tokens \"value\" divided by 10^18 and multiplied by 2 (i.e. the fees collected in OWL)\n- The sum of all tokens \"value\" divided by 10^18 and multiplied by 2 and 0.7 (i.e. the fees collected in $approx)\n- The sum of all tokens \"value\" divided by 10^18 and multiplied by 2 and divided by 0.1 and multiplied by 100 and 0.7 and divided by 2 (i.e. the trading volume in $approx)", "completion": " SELECT\ndate_trunc('day', call_block_time) as day,\nSUM (tokens.\"value\"/10^18) as OWL_burnt,\nSUM (tokens.\"value\"/10^18*2) as fees_collected_in_OWL,\nSUM (tokens.\"value\"/10^18*2*0.7) as \"fees_collected_$approx\",\nSUM (tokens.\"value\"/10^18*2/0.1*100*0.7/2) as \"trading_volume_$approx\"\nFROM gnosis.\"OWLProxy_evt_Transfer\" tokens\nINNER JOIN gnosis_protocol.\"BatchExchange_call_submitSolution\" dfusion\n    ON dfusion.call_tx_hash = tokens.evt_tx_hash\nWHERE tokens.\"to\"='\\x0000000000000000000000000000000000000000'\nGROUP BY 1\nORDER BY 1 desc"}
{"prompt": "This query returns the top requesters in the Erasure Bay system, sorted by the amount of DAI they have requested.", "completion": " WITH dai_amount AS\n  (SELECT address,\n          sum(amount)/1e18 AS amount\n   FROM\n     (SELECT \"to\" AS address,\n             value AS amount\n      FROM erc20.\"ERC20_evt_Transfer\"\n      WHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n        AND \"to\" IN\n          (SELECT contract_address\n           FROM erasure_bay.\"view_request_data\")\n      UNION ALL SELECT \"from\" AS address, -value AS amount\n      FROM erc20.\"ERC20_evt_Transfer\"\n      WHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n        AND \"from\" IN\n          (SELECT contract_address\n           FROM erasure_bay.\"view_request_data\")) table1\n   GROUP BY address)\nSELECT requester,\n       sum(dai_reward) AS amount_requested\nFROM erasure_bay.\"view_request_data\" r\nLEFT JOIN erasure_bay.\"view_deposit_stake\" d ON r.contract_address = d.contract_address\nWHERE\n    (SELECT amount\n     FROM dai_amount\n     WHERE address = r.contract_address) > 0\n  OR fulfiller IS NOT NULL\nGROUP BY requester\nORDER BY amount_requested DESC"}
{"prompt": "This query returns the number of distinct guys who have minted SAI in the last 10 months.", "completion": " SELECT date_trunc('month', tx.block_time) as Month,\nCOUNT(DISTINCT guy)\nFROM maker.\"SAI_evt_Mint\" m\nLEFT JOIN (SELECT hash,\n             block_time\n      FROM ethereum.transactions\n      WHERE block_time > now() - interval '10 months'\n        AND block_time < date_trunc('month', NOW())) tx\n        ON m.evt_tx_hash = tx.hash\nAND block_time < date_trunc('month', current_date)::date\nGROUP BY 1;"}
{"prompt": "This SQL query returns the total ETH volume traded for KNC on the DutchX exchange for each day. The ETH and KNC volume traded is calculated by summing the \"sellVolume\" from all \"DutchExchange_evt_AuctionCleared\" events that occurred on that day, divided by 1e18.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    sum(\"sellVolume\" / 1e18) as ethvolume \n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" knc \n\nWHERE \"sellToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND \"buyToken\" =   '\\xdd974d5c2e2928dea5f71b9825b8b646686bd200' --knc\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', knc.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND knc.symbol = 'KNC'\nAND tx.success = true\n\nGROUP BY 1"}
{"prompt": "This SQL query returns the total number of Erasure Bay requests over time, as well as the amount of DAI associated with each request.", "completion": " WITH dai_amount AS\n  (SELECT address,\n          sum(amount)/1e18 AS amount\n   FROM\n     (SELECT \"to\" AS address,\n             value AS amount\n      FROM erc20.\"ERC20_evt_Transfer\"\n      WHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n        AND \"to\" IN\n          (SELECT contract_address\n           FROM erasure_bay.\"view_request_data\")\n      UNION ALL SELECT \"from\" AS address, -value AS amount\n      FROM erc20.\"ERC20_evt_Transfer\"\n      WHERE contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n        AND \"from\" IN\n          (SELECT contract_address\n           FROM erasure_bay.\"view_request_data\")) table1\n   GROUP BY address)\nSELECT r.block_time AS date,\n       sum(1) OVER (\n                    ORDER BY r.block_time ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS requests\nFROM erasure_bay.\"view_request_data\" r\nLEFT JOIN erasure_bay.\"view_deposit_stake\" d ON r.contract_address = d.contract_address\nWHERE\n    (SELECT amount\n     FROM dai_amount\n     WHERE address = r.contract_address) > 0\n  OR fulfiller IS NOT NULL"}
{"prompt": "The query returns the document with the ID 'dsfd' and the name 'test1'.", "completion": " dsfd"}
{"prompt": "The SQL query returns a table with the following columns:\n\n- buyer: the address of the buyer\n- tx_eth: the total ETH value of all transactions\n- tx_cnt: the number of transactions\n\nThe table is filtered to only include buyers who have made at least 10 ETH worth of transactions, and is sorted by the total ETH value of transactions.", "completion": " with \nopensea as (\nSELECT \ntransfer.from,\ntransfer.to as buyer,\ntransfer.contract_address,\n(OS.price * 1e-18) as price_eth,\nOS.evt_tx_hash,\nAM.addrs,\nAM.uints,\ncast(AM.call_block_time as DATE) AS call_date,\nAM.call_block_time as block_time,\nextract(YEAR FROM AM.call_block_time)as \"year\",\nextract(month from AM.call_block_time) as \"month\",\nSUBSTRING(CAST(AM.\"addrs\" as varchar),280, 42) as source_currency,\ntransfer.\"tokenId\"\nFROM \nopensea.\"WyvernExchange_evt_OrdersMatched\" as OS\nLEFT JOIN opensea.\"WyvernExchange_call_atomicMatch_\" AM\nON AM.call_tx_hash = OS.evt_tx_hash\nLEFT JOIN erc721.\"ERC721_evt_Transfer\" as transfer\nON OS.evt_tx_hash = transfer.evt_tx_hash\nWHERE transfer.contract_address = '\\x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85'\n)\n\nselect * from (\nSELECT\nbuyer,\nsum(price_eth) as tx_eth,\ncount(*) as tx_cnt\nFROM opensea\nWHERE TRIM(opensea.source_currency) IN ('\\x0000000000000000000000000000000000000000','\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2')\n--and opensea.call_date > current_date - 3\nGROUP BY 1) a\nwhere tx_eth >= 0.1\norder by tx_eth desc\n--Might be undershooting volume since ENS table only starts in mid 2019 I think theres older ENS names????\n"}
{"prompt": "The SQL query below returns the average DutchX price, market price, and MKR discount for MKR auctioned for WETH over the past week.\n\nSELECT\n\ndate_trunc('day', block_time) as date,\navg(\"buyVolume\" / \"sellVolume\") as \"DutchX price\",\navg(mkr.average / eth.average) as \"Market price\",\n(avg(mkr.average / eth.average) / avg(\"buyVolume\" / \"sellVolume\") - 1)*100 as \"MKR discount\"\n\nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" mkr\n\nWHERE \"sellToken\" = '\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2' --mkr\nAND \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --w", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    avg(\"buyVolume\" / \"sellVolume\") as \"DutchX price\",\n    avg(mkr.average / eth.average) as \"Market price\",\n    (avg(mkr.average / eth.average) / avg(\"buyVolume\" / \"sellVolume\") - 1)*100 as \"MKR discount\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" mkr \n\nWHERE \"sellToken\" = '\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2' --mkr\nAND \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', mkr.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND mkr.symbol = 'MKR'\nAND tx.success = true\nAND tx.block_time > now() - interval '1 week'\n\nGROUP BY 1;"}
{"prompt": "This SQL query returns the date of the first day of the week for the first 100 trade_time values.", "completion": " SELECT  date_trunc('week', trade_time)   FROM trades limit 100"}
{"prompt": "This query returns a list of addresses sending ETH to addresses that are funding addresses that got HEX from the Origin address, along with a count of the number of transactions from each address.", "completion": " select \"from\", count(*) as number_of_txs\nfrom ethereum.transactions\nwhere \"to\" IN ('\\x9a6a414d6f3497c05e3b1de90520765fa1e07c03')\ngroup by \"from\""}
{"prompt": "This query returns the total amount of SAI that has been minted and burned since the launch of MCD.", "completion": " WITH mint AS\n(\nSELECT date_trunc('day', tx.block_time) AS day, SUM(wad/1e18) AS mint\nFROM maker.\"SAI_evt_Mint\" m\nLEFT JOIN ethereum.transactions tx ON tx.hash = m.evt_tx_hash\nWHERE tx.block_time > '2019-11-18 16:00:00'\nGROUP BY 1\n),\n\nburn AS (\nSELECT date_trunc('day', tx.block_time) AS day, -SUM(wad/1e18) AS burn\nFROM maker.\"SAI_evt_Burn\" m\nLEFT JOIN ethereum.transactions tx ON tx.hash = m.evt_tx_hash\nWHERE tx.block_time > '2019-11-18 16:00:00'\nGROUP BY 1\n)\n\nSELECT SUM(mint) AS mint, SUM(burn) AS burn, SUM(mint + burn) AS \"Net minted\" FROM mint\nLEFT JOIN burn ON mint.day = burn.day;"}
{"prompt": "This SQL query returns the USD volume for each week over the past two months, for the Ethereum token WETH.", "completion": " SELECT date_trunc('week', tx.block_time) as Date,\n       SUM(eth/1e18 * p.average) as \"USD volume\"\nFROM ((SELECT tx_hash, eth_sold AS eth FROM uniswap.\"Exchange_evt_TokenPurchase\")\n      UNION\n        (SELECT tx_hash, eth_bought AS eth FROM uniswap.\"Exchange_evt_EthPurchase\")) ether\nINNER JOIN ethereum.transactions tx ON ether.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" p ON date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'WETH'\nAND tx.block_time > now() - interval '2 months'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "The following SQL query returns the total number of transactions made with Argent contracts, accumulated daily over time.", "completion": " WITH wallets AS (\n    select substring(topic2 from 13 for 20) as \"address\", block_time as creation_time, block_number as creation_block_number\n\tfrom ethereum.logs el\n\twhere \n\t(\n\t    topic1 = '\\x5b03bfed1c14a02bdeceb5fa582eb1a5765fc0bc64ca0e6af4c20afc9487f081' \n\t\tand contract_address = '\\x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020'  \n\t) OR (\n\t\ttopic1 = '\\xca0b7dde26052d34217ef1a0cee48085a07ca32da0a918609937a307d496bbf5' \n\t\tand contract_address in (\n\t\t    '\\x40C84310Ef15B0c0E5c69d25138e0E16e8000fE9',\n\t\t    '\\x9ae0AcdB750bFcF694675f46B580847fC49A48bF'\n\t\t)\n\t) OR (\n\t\ttopic1 = '\\xacd43e061b8ee386537b57919358cfa44933c4e47ccd4b2e1916e54133cec748' \n\t\tand contract_address in (\n\t\t    '\\x536384FCd25b576265B6775F383D5ac408FF9dB7',\n\t\t    '\\x1d09a6D1C45d1a9Eb8CB8A8354BCd78e225f06d3'\n\t\t)\n\t)\n),\ndata as (\n    select date_trunc('day', el.block_time) AS \"day\", count(distinct el.tx_hash) as transactions\n    from ethereum.logs el\n    join wallets w\n        on w.address = el.contract_address and el.block_number <> w.creation_block_number  -- filter out creation tx\n    where topic1 = '\\x7d2476ab50663f025cff0be85655bcf355f62768615c0c478f3cd5293f807365' -- Invoke event\n    group by 1\n)\nselect \"day\", sum(transactions) over (order by \"day\" asc rows between unbounded preceding and current row) as transactions_running_total\nfrom data"}
{"prompt": "The following SQL query returns the total amount deposited for each asset in the dYdX SoloMargin contract for the past day, broken down by minute.", "completion": " with data as (\n    SELECT date_trunc('minute', eth.block_time) AS ttime,\n       eth.hash AS \"txHash\",\n       eth.from AS \"depositerAddress\",\n        CASE dep.\"market\"::integer \n            WHEN 0 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 1 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 2 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 6 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 6, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e6)::decimal\n                END\n        END AS \"depositAmount\",\n       CASE dep.\"market\"::integer \n       WHEN 0 THEN\n        'ETH'::text\n       WHEN 1 THEN\n        'DAI'::text\n       WHEN 2 THEN\n        'USDC'::text\n       END AS \"Asset\"\nFROM dydx.\"SoloMargin_evt_LogDeposit\" dep\nJOIN ethereum.transactions eth ON eth.hash = dep.evt_tx_hash\nWHERE date_trunc('minute', eth.block_time) >= date_trunc('day', now()) - interval '1 day'\nORDER BY date_trunc('minute', eth.block_time) DESC)\n\nSELECT\n  data.ttime,\n  sum(\"depositAmount\") over (partition by \"Asset\" order by data.ttime) AS \"sum\",\n  \"Asset\"\nfrom data\n"}
{"prompt": "This SQL query returns the net deposits of ETH into the Fulcrum ETH Pool for each day over the past 60 days.", "completion": " WITH deposit AS \n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(\"assetAmount\"/1e18) as ETH_deposits\nFROM fulcrum.\"iToken_evt_Mint\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nWHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\nGROUP BY 1\nORDER BY 1 desc\n),\n\nwithdraw AS \n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(\"assetAmount\"/1e18) as ETH_withdraws\nFROM fulcrum.\"iToken_evt_Burn\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nWHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT deposit.day,\nsum(ETH_deposits-ETH_withdraws) as net_deposits\nFROM deposit\nLEFT JOIN withdraw w ON deposit.day = w.day\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 60"}
{"prompt": "This SQL query calculates the total number of SushiSwap users over time. It does this by first counting the number of unique users for each day, and then summing up these values over time.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT block_time AS date,\n                \"from\" AS account\n         FROM ethereum.\"transactions\"\n         WHERE \"to\" = '\\xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd'\n           AND block_time >= '2020-08-26 13:00'\n           AND success) AS table1\n      GROUP BY account) AS table2\n   GROUP BY date\n   ORDER BY date) AS table3"}
{"prompt": "The following SQL query selects the sum of ETH bought on Uniswap in units of 1e18.", "completion": " SELECT SUM(eth_bought / 1e18)\nFROM uniswap.\"Exchange_evt_EthPurchase\";"}
{"prompt": "This SQL query returns the total amount of ETH and tokens locked over time in USD equivalents.", "completion": " WITH etherPrice AS (\n    SELECT time, average AS price\n    FROM coincap.\"tokens/usd\"\n    WHERE symbol='WETH'\n),\ntoken_locks AS (\n    SELECT l.tx_hash, tx.block_time, _token, _amount / 1e18 * (_numerator/_denominator) * p.price as amt\n    FROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\" l\n    INNER JOIN dxdao.\"DxLockWhitelisted4Rep_evt_LockToken\" lt ON l.\"_lockingId\" = lt.\"_lockingId\"\n    INNER JOIN ethereum.transactions tx ON tx.hash = l.tx_hash\n    INNER JOIN etherPrice p ON date_trunc('minute', tx.block_time) = p.time\n),\nether_locks AS (\n    SELECT l.tx_hash, tx.block_time,  _amount / 1e18 * p.price as amt\n    FROM dxdao.\"DxLockEth4Rep_evt_Lock\" l\n    INNER JOIN ethereum.transactions tx ON tx.hash = l.tx_hash\n    INNER JOIN etherPrice p ON date_trunc('minute', tx.block_time) = p.time\n),\ndates AS (\n    SELECT generate_series(\n        date_trunc('day', (SELECT min(block_time) FROM ((SELECT block_time FROM token_locks) UNION (SELECT block_time FROM ether_locks)) a)),\n        date_trunc('day', NOW()),\n        interval '1 day'\n    ) as dt\n)\nSELECT dt.dt, SUM(locks.amt) as total\nFROM dates dt\nLEFT JOIN ((SELECT block_time, amt FROM token_locks) UNION (SELECT block_time, amt FROM ether_locks)) locks \nON dt.dt = date_trunc('day', locks.block_time) \nGROUP BY 1"}
{"prompt": "This query returns the total amount of SAI won by participants in Pool3 over the past 25 weeks, ordered from most recent to oldest.", "completion": " SELECT\ndate_trunc('week', block_time) as week,\nsum(winnings/1e18) as sai_winnings\nFROM pooltogether_v2.\"Pool3_evt_Rewarded\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nWHERE block_time < now() - interval '74 days'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 25"}
{"prompt": "The SQL query will select all data from the wyvern table \"WyvernExchange_evt_OrdersMatched\" and limit the results to 10.", "completion": " SELECT * FROM wyvern.\"WyvernExchange_evt_OrdersMatched\" LIMIT 10;"}
{"prompt": "This SQL query returns the number of transactions relayed and the total fees earned for each week over the past 10 weeks.", "completion": " SELECT date_trunc('week', block_time), COUNT(*), SUM(r.charge) / 1e18 as total_fees\nFROM gasstationnetwork.\"RelayHub_evt_TransactionRelayed\" r\nLEFT JOIN ethereum.transactions tx on r.evt_tx_hash = tx.hash\nWHERE block_time > now() - interval '10 weeks'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "SELECT the SUM of the USD amount from the dex.trades table\n\nWHERE the project is 1inch AND the number of days between now and the block time is less than 1", "completion": " SELECT SUM(usd_amount) as volume FROM dex.trades\nWHERE project = '1inch' AND DATE_PART('day', now() - block_time::timestamptz) < 1\n"}
{"prompt": "This SQL query shows the top 20 keepers by revenue from liquidations on the Compound v2 platform.", "completion": " WITH liquidations AS\n(\nSELECT\ndate_trunc('day', block_time) as day,\n\"liquidator\", sum(\"seizeTokens\"/1e13*p.price*0.05) as collateral_liquidated_usd FROM compound_v2.\"cErc20_evt_LiquidateBorrow\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nGROUP BY 1,2\nORDER BY 1 desc\nLIMIT 5000\n)\n\nSELECT \"liquidator\", sum(\"collateral_liquidated_usd\") as revenue FROM liquidations\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 20\n\n"}
{"prompt": "This query retrieves data on SuperRare sales that have taken place on the OpenSea marketplace. Specifically, it returns the block time, token ID, price, and symbol for each sale.", "completion": " SELECT evt_block_time,\n       \"tokenId\",\n       price,\n       symbol\nFROM\n  (SELECT os.evt_block_time,\n          \"tokenId\",\n          price / 1e18 AS price,\n          CASE\n              WHEN addrs[7] = '\\x0000000000000000000000000000000000000000' THEN '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n              ELSE addrs[7]\n          END AS token_address\n   FROM wyvern.\"WyvernExchange_evt_OrdersMatched\" os\n   INNER JOIN superrare.\"SuperRare_v2_evt_Transfer\" sr ON os.evt_tx_hash = sr.evt_tx_hash\n   INNER JOIN wyvern.\"WyvernExchange_call_atomicMatch_\" am ON os.evt_tx_hash = am.call_tx_hash) a\nINNER JOIN erc20.\"tokens\" ON token_address = contract_address\nORDER BY 1 DESC"}
{"prompt": "This SQL query returns the following information:\n\n- The category of transaction (e.g. \"transfer out\" or \"transfer in\")\n- The wallet address involved in the transaction\n- The amount of ETH transferred in the transaction\n\nFor each transaction, it also looks up whether the wallet address is associated with any known labels (e.g. \"Token contract\", \"Exchange address\", etc.), and if not, it filters out any transactions with less than 10 ETH transferred.", "completion": " --\u8f6c\u51fa\nselect\n    cate\n    ,wallet_address\n    ,eth_transfered\nfrom \n(\n    select\n        '\u8f6c\u51fa' as cate\n       ,replace(cast(to_wallet as varchar),'\\','0') as wallet_address\n       ,sum(eth_transfered) as eth_transfered\n    from \n    (\n        SELECT \n           \n           block_time\n           , value/power(10,18) as eth_transfered\n           , tx_hash\n           ,\"to\" as to_wallet\n        FROM ethereum.\"traces\"\n        WHERE \"from\" = CONCAT('\\x',RIGHT('{{A.address:}}',40))::bytea\n        AND (LOWER(call_type) NOT IN ('delegatecall', 'callcode', 'staticcall') or call_type is null)\n        AND  CASE  WHEN block_number < 4370000  THEN True WHEN block_number >= 4370000 THEN tx_success END  \n        AND success = true\n    ) a \n    group by  2\n     --\u8f6c\u5165  \n    union all\n    \n    select\n       '\u8f6c\u5165' as cate\n       ,replace(cast(from_wallet as varchar),'\\','0') as wallet_address\n       ,sum(eth_transfered) as eth_transfered\n    from \n    (\n        SELECT \n           \n           block_time\n           , value/power(10,18) as eth_transfered\n           , tx_hash\n           ,\"from\" as from_wallet\n        FROM ethereum.\"traces\"\n        WHERE \"to\" = CONCAT('\\x',RIGHT('{{A.address:}}',40))::bytea\n        AND (LOWER(call_type) NOT IN ('delegatecall', 'callcode', 'staticcall') or call_type is null)\n        AND  CASE  WHEN block_number < 4370000  THEN True WHEN block_number >= 4370000 THEN tx_success END  \n        AND success = true\n    ) a \n    group by  2\n) trans_info \nleft outer join \n(\n    select\n        upper(\"address\") as address\n        ,address_label\n    from dune_user_generated.pro_0xBi_address_label_dim\n    where cate in ('Token\u5408\u7ea6','Exchange\u5730\u5740','\u672a\u77e5\u5408\u7ea6','Black Hole','\u9879\u76ee\u667a\u80fd\u5408\u7ea6','\u9879\u76eeWrappedToken','\u8de8\u94fe\u6865')\n)label_info\non label_info.address = upper(trans_info.wallet_address)\nwhere label_info.address is null and eth_transfered >10\norder by eth_transfered desc\n    "}
{"prompt": "This SQL query selects all logs from the ethereum blockchain where the topic1 field matches the given value. This value is associated with popular contracts on the ethereum blockchain.", "completion": " select *\nfrom ethereum.logs l\nwhere l.topic1 in ('ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef')"}
{"prompt": "This query returns the total amount of DAI borrowed from the Compoundv2 protocol on a given day.", "completion": " -- Table of TotalBorrows of DAI by day \n/*\n\n    SELECT \"totalBorrows\" AS totalborrows, date_trunc('day', tx.block_time) AS daytime\n    FROM compoundv2.\"cErc20_evt_AccrueInterest\" interest, ethereum.transactions tx\n    WHERE address = '\\xf5dce57282a584d2746faf1593d3121fcac444dc'\n    AND interest.tx_hash = tx.hash\n\n    ORDER BY 2 DESC\n    */\n    \n    SELECT * FROM compoundv2.\"cErc20_evt_AccrueInterest\" interest\n    WHERE address = '\\xf5dce57282a584d2746faf1593d3121fcac444dc'\n    LIMIT 10\n    \n  \n  \n\n\n    "}
{"prompt": "This SQL query shows the total amount of DAI that was borrowed and supplied in the Compoundv1 market each day, as well as the net balance of DAI for each day (DAI supplied per day - DAI borrowed per day).", "completion": " -- Find the daily DAI borrowed, supplied and the net balance (DAI supplied per day - DAI borrowed per day) in Compoundv1\n\nWITH supply AS (\n    SELECT sum(supply.amount / 1e18) AS DAIsupply, date_trunc('day', tx.block_time) AS DayTime\n    FROM compoundv1.\"MoneyMarket_evt_SupplyReceived\" supply, ethereum.transactions tx\n    WHERE asset = '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'\n    AND supply.tx_hash = tx.hash\n    GROUP BY 2\n    \n), borrow AS (\n    SELECT sum(borrow.amount / 1e18) AS DAIborrow, date_trunc('day', tx.block_time) AS DayTime\n    FROM compoundv1.\"MoneyMarket_evt_BorrowTaken\" borrow, ethereum.transactions tx\n    WHERE asset = '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'\n    AND borrow.tx_hash = tx.hash\n    GROUP BY 2\n)\n    \nSELECT borrow.daytime, borrow.DAIborrow, supply.DAIsupply, supply.DAIsupply - borrow.DAIborrow AS net\nFROM borrow,supply\nWHERE borrow.daytime = supply.daytime\nORDER BY 1 DESC"}
{"prompt": "This SQL query returns the monthly volume of Ethereum on OpenSea in ETH. The volume is calculated by summing the prices of all orders matched on OpenSea that were made in ETH. The query excludes any transactions that are considered wash trades or that involve multiple tokens.", "completion": " WITH token AS (\n   SELECT DISTINCT call_tx_hash AS tx_hash,\n                   CASE\n                       WHEN addrs[7] = '\\x0000000000000000000000000000000000000000' THEN '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n                       ELSE addrs[7]\n                   END AS token_address\n   FROM opensea.\"WyvernExchange_call_atomicMatch_\"\n   WHERE (addrs[4] = '\\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'\n          OR addrs[11] = '\\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')\n     AND call_success\n     AND call_block_time >= '2022-06-01'\n     and addrs[7] in ('\\x0000000000000000000000000000000000000000',\n                    '\\x14580a45324d0d35dc08edf982007a44325e3730',\n                    '\\x55370c60fca4929867f8e0e59acfc6198bdca274',\n                    '\\x65558b5b48dca1ed00dbd677c02faba8a6eb270f',\n                    '\\xa0158a5b778e792e861bb44ae663ff9dba1eb427',\n                    '\\xc0829421c1d260bd3cb3e0f06cfe2d52db2ce315',\n                    '\\xd76b5c2a23ef78368d8e34288b5b65d616b746ae',\n                    '\\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n                    '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2')\n                    ),\nexcluded_txns AS (\n   SELECT call_tx_hash\n   FROM opensea.\"WyvernExchange_call_atomicMatch_\"\n   WHERE (addrs[4] = '\\x5b3256965e7c3cf26e11fcaf296dfc8807c01073'\n          OR addrs[11] = '\\x5b3256965e7c3cf26e11fcaf296dfc8807c01073')\n     AND call_success\n     AND call_block_time >= '2022-06-01'\n   GROUP BY 1\n   HAVING count(DISTINCT CASE\n                             WHEN addrs[7] = '\\x0000000000000000000000000000000000000000' THEN '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n                             ELSE addrs[7]\n                         END) > 1\n)\n\nselect \nmonth,\nsum(eth) as eth \nfrom (\nSELECT date_trunc('month', evt_block_time) AS MONTH,\n       SUM((om.price / 10^18) ) AS eth\nFROM opensea.\"WyvernExchange_evt_OrdersMatched\" om\nINNER JOIN token ON token.tx_hash = om.evt_tx_hash\nWHERE maker != taker\nand evt_block_time >= '2022-06-01'\nAND evt_tx_hash not in (SELECT * from dune_user_generated.kq_washtrading_txns)\nAND evt_tx_hash not in (SELECT * from excluded_txns)\nGROUP BY 1\nUNION ALL\nSELECT month\n     ,eth\n  FROM dune_user_generated.sohwak_os_summary_monthly_eth a\n WHERE MONTH < '2022-06-01'\nUNION ALL\nSELECT date_trunc('month', a.block_time) AS time_unit\n      ,sum(a.original_amount_raw / 1e18) AS eth\nFROM seaport.view_transactions a\nWHERE block_time >= '2022-06-01'\nand a.original_currency_contract in ('\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n                                    ,'\\x0000000000000000000000000000000000000000'\n                                    )\nand zone_address in ('\\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',\n         '\\x9b814233894cd227f561b78cc65891aa55c62ad2',\n         '\\x004C00500000aD104D7DBd00e3ae0A5C00560C00',\n         '\\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')\ngroup by 1 ) a\ngroup by 1\norder by 1\n"}
{"prompt": "This query returns the number of distinct recipients for each week, ordered by the week.", "completion": " SELECT date_trunc('week', block_time), COUNT(distinct \"recipient\")\nFROM gasstationnetwork.\"RelayHub_evt_Deposited\" a\nLEFT JOIN ethereum.transactions tx on a.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This query returns the first 10 documents from the dydx.\"LimitOrders_evt_LogLimitOrderFilled\" collection.", "completion": " SELECT * FROM dydx.\"LimitOrders_evt_LogLimitOrderFilled\" LIMIT 10"}
{"prompt": "This SQL query counts the number of distinct users who have made a swap on the ParaSwap platform. This is done by looking at all of the transactions associated with the various swap events and then counting the number of unique addresses that appear in the \"from\" field.", "completion": " SELECT COUNT(DISTINCT tx.from) as users\nFROM \n(\n    SELECT \"evt_tx_hash\" FROM paraswap.\"AugustusSwapper_evt_Swapped\" UNION ALL\n    SELECT \"evt_tx_hash\"  FROM paraswap.\"AugustusSwapper1.0_evt_Swapped\" UNION ALL\n    SELECT \"evt_tx_hash\"  FROM paraswap.\"AugustusSwapper_evt_Payed\" UNION ALL\n    SELECT \"evt_tx_hash\"  FROM paraswap.\"AugustusSwapper1.0_evt_Payed\" UNION ALL\n    SELECT \"evt_tx_hash\" FROM paraswap.\"AugustusSwapper2.0_evt_Swapped\" UNION ALL\n    SELECT \"evt_tx_hash\" FROM paraswap.\"AugustusSwapper3.0_evt_Bought\" UNION ALL\n    SELECT \"evt_tx_hash\" FROM paraswap.\"AugustusSwapper3.0_evt_Swapped\" UNION ALL\n    SELECT \"evt_tx_hash\" FROM paraswap.\"AugustusSwapper4.0_evt_Swapped\" UNION ALL\n    SELECT \"evt_tx_hash\" FROM paraswap.\"AugustusSwapper4.0_evt_Bought\"\n) swaps\nLEFT JOIN ethereum.transactions tx on tx.hash = swaps.evt_tx_hash"}
{"prompt": "This SQL query returns the total number of users of the KeeperDAO platform over time. The query groups users by date, and orders the results by date in ascending order. The query also calculates the total number of users for each day, using the number of users from the previous day as a starting point.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(evt_block_time)) AS date,\n                _borrower AS account\n         FROM keeperdao_v1.\"LiquidityPoolV1_evt_Borrowed\"\n         GROUP BY 2\n         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,\n                          _depositor AS account\n         FROM keeperdao_v1.\"LiquidityPoolV1_evt_Deposited\"\n         GROUP BY 2\n         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,\n                          _borrower AS account\n         FROM keeperdao_v2.\"LiquidityPoolV2_evt_Borrowed\"\n         GROUP BY 2\n         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,\n                          _depositor AS account\n         FROM keeperdao_v2.\"LiquidityPoolV2_evt_Deposited\"\n         GROUP BY 2\n         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,\n                          _borrower AS account\n         FROM keeperdao_v21.\"LiquidityPoolV2_evt_Borrowed\"\n         GROUP BY 2\n         UNION ALL SELECT date_trunc('day', min(evt_block_time)) AS date,\n                          _depositor AS account\n         FROM keeperdao_v21.\"LiquidityPoolV2_evt_Deposited\"\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "This SQL query returns the total deposits and the number of distinct recipients for each week.", "completion": " SELECT date_trunc('week', block_time), SUM(amount) /1e18 as total_deposits, COUNT(distinct \"recipient\")\nFROM gasstationnetwork.\"RelayHub_evt_Deposited\" a\nLEFT JOIN ethereum.transactions tx on a.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns the block time and price for all trades involving the token \"yTRUMP\" and the currency \"DAI\" that took place on or after November 4th, 2020 and before November 5th, 2020, where the price of the \"yTRUMP\" token was less than 1 DAI.", "completion": " SELECT block_time,\n       price\nFROM\n  (SELECT block_time,\n          CASE\n              WHEN token_a_symbol = 'DAI' THEN token_a_amount / (token_b_amount_raw / 1e18) / 1000\n              WHEN token_b_symbol = 'DAI' THEN token_b_amount / (token_a_amount_raw / 1e18) / 1000\n          END AS price\n   FROM dex.\"trades\" d\n   WHERE (token_a_address = '\\x3af375d9f77ddd4f16f86a5d51a9386b7b4493fa'\n          AND token_b_symbol = 'DAI'\n          OR token_b_address = '\\x3af375d9f77ddd4f16f86a5d51a9386b7b4493fa'\n          AND token_a_symbol = 'DAI')) a\nWHERE price < 1\n  AND block_time >= '2020-11-04'\n  AND block_time < '2020-11-05'"}
{"prompt": "This SQL query returns the average gas used per block over the past 14 days, truncated to the nearest hour.", "completion": " SELECT\n    date_trunc('hour', time) as time,\n    AVG(gas_used * 100 / gas_limit) as block_filled\nFROM ethereum.\"blocks\"\nWHERE time > now() - interval '14 days'\nGROUP BY 1\nORDER BY 1 DESC\n"}
{"prompt": "The SQL query returns the total monthly fees collected by OpenSea in USD, broken down by Ethereum blockchain activity and WETH token transfers.", "completion": " SELECT date AS MONTH,\n       sum(fee) AS usd\nFROM\n  (SELECT date_trunc('month', a.evt_block_time) AS date ,\n          sum(a.value / power(10, t.decimals) * p.price) AS fee\n   FROM erc20_ethereum.evt_Transfer a\n   INNER JOIN tokens_ethereum.erc20 t ON t.contract_address = a.contract_address\n   INNER JOIN prices.usd p ON p.minute = date_trunc('minute', a.evt_block_time)\n   AND p.blockchain = 'ethereum'\n   AND a.contract_address = p.contract_address\n   WHERE to in ('0x5b3256965e7c3cf26e11fcaf296dfc8807c01073',\n                '0x8de9c5a032463c561423387a9648c5c7bcc5bc90',\n                '0x0000a26b00c1f0df003000390027140000faa719')\n   GROUP BY 1\n   UNION ALL SELECT date_trunc('month', a.block_time) AS date ,\n                    sum(a.value / 1e18 * p.price) AS fee\n   FROM ethereum.traces a\n   INNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\n   AND p.blockchain = 'ethereum'\n   AND p.symbol = 'WETH'\n   WHERE from in ('0x7be8076f4ea4a4ad08075c2508e481d6c946d12b' ,\n              '0x7f268357a8c2552623316e2562d90e642bb538e5' ,\n              '0x00000000006cee72100d161c57ada5bb2be1ca79' ,\n              '0x00000000006c3852cbef3e08e8df289169ede581')\n     AND to in ('0x5b3256965e7c3cf26e11fcaf296dfc8807c01073',\n                '0x8de9c5a032463c561423387a9648c5c7bcc5bc90',\n                '0x0000a26b00c1f0df003000390027140000faa719')\n     AND value > 0\n     AND success\n     AND tx_success\n   GROUP BY 1) a\nGROUP BY 1\nORDER BY 1"}
{"prompt": "This SQL query returns the total USD volume per token for each day. The query uses the OneInchExchange_evt_Swapped event to calculate the volume. The event is joined with the prices.\"usd\" table to get the symbol and contract address for each token. The ethereum.transactions table is joined to get the block time for each transaction. The prices.usd table is joined to get the price of each token in USD. The query groups the data by day and token, and orders it by day, from most recent to least recent.", "completion": " SELECT date_trunc('day', tx.block_time) AS time,\n       usd.\"symbol\",\n       SUM(\"toAmount\" * usd.price)/1e18 AS volume\nFROM oneinch.\"OneInchExchange_evt_Swapped\" i\nLEFT JOIN\n  (SELECT DISTINCT symbol,\n                   contract_address\n   FROM prices.\"usd\") p ON \"toToken\" = p.contract_address\nLEFT JOIN ethereum.transactions tx on tx.hash = i.evt_tx_hash\nLEFT JOIN prices.usd usd ON usd.minute = date_trunc('minute', tx.block_time)\nWHERE usd.contract_address = \"toToken\"\nGROUP BY 1, 2\nORDER BY 1 DESC"}
{"prompt": "This query returns the weekly active users for the Treasure ecosystem.", "completion": " -- MAGIC Contract: 0x539bde0d7dbd336b79148aa742883198bbf60342\n-- MAGIC Transfer Topic: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\nwith\n  users_monthly AS (\n    SELECT\n      date_trunc('week', block_time) AS block_date,\n      COUNT(DISTINCT `address`) AS active_users_count\n    FROM\n      (\n        SELECT\n          block_time,\n          `from` AS address\n        FROM\n          arbitrum.transactions\n        WHERE\n        where \n        date(block_time) >= '2021-11-15' AND\n        `to` IN\n             ('0x737eaf14061fe68f04ff4ca8205acf538555fcc8', -- Bridgeworld Questing v2\n               '0xda3cad5e4f40062ceca6c1b979766bc0baed8e33', -- Bridgeworld Questing v1\n               '0xc8dbdc58289474ab3e01568eb5f88f440bde6b46', -- Bridgeworld Summoning\n               '0xb9c9ed651eb173ca7fbc3a094da9ce33ec145a29', -- Bridgeworld Crafting\n               '0xce688000205b8cadda2ef76ff064808d4221c93e', -- Toadstoolz Adventuring\n               '0x5808773d6ce80e365ec001982c666fb44a69abf3', -- Toadstoolz Hunting\n               '0x4de95c1e202102e22e801590c51d7b979f167fbb', -- RealmDAO Realm\n               '0x9e35cb5469daf9d1e4f32ef3f250f5b26b45691b', -- RealmDAO Reactor\n               '0x98db7fc89c0940ea1c809b59e575f56a2c830458', -- RealmDAO Refinery\n               '0x095fbf78c06073b1e052da9220d71400c544ff1a', -- RealmDAO Collectibles\n               '0xac52881718493432b40ecbd31d818a60acf97d38' -- RealmDAO Cities,\n               '0xb90ba69211da5aa32fafb95619d9c26f0521f371', -- Knights of the Ether Temple,\n               '0xee6f650593766d9114236986609ae52252c58d1a', -- Knights of the Ether Mountain,\n               '0x011afb2fd1f67e7fd8f2a7d926245019ed93a900', -- Knights of the Ether Cavern,\n               '0x1c478220c520a20924295e2325d0ce96ff64dca6', -- Knights of the Ether Forest,\n               '0x3f3b52f104ace42a5c0c68d0d365933fb3fee344', -- Knights of the Ether Forest V2\n               '0xca1d055331d3a4e74a2ffccff83160699ac1c4b4', -- Battlefly Staking,\n               '0xc2e007c61319fcf028178fab14cd6ed6660c6e86', -- Smolverse Original\n               '0x1f245e83fb88a1e85b4a1c3e4b3c16660d54319a', -- Smolquest Wrap\n               '0x1a5261041e9340579f58401389d6dee185b62804', -- Smolquest Chonk\n               '0x602e50ed10a90d324b35930ec0f8e5d3b28cd509', -- Smol School\n               '0x66299ecc614b7a1920922bba7527819c841174bd', -- Swol Gym\n               '0x09986b4e255b3c548041a30a2ee312fe176731c2', -- Trove Marketplace\n               '0x2e3b85f85628301a0bce300dee3a6b04195a15ee' --Treasure Marketplace\n              )\n      )\n    GROUP BY\n      1\n    ORDER BY\n      1\n  )\nSELECT\n  block_date,\n  active_users_count\nFROM\n  users_monthly\nORDER BY\n  block_date\n"}
{"prompt": "This SQL query returns the top 10 ETH balances by address.", "completion": " with double_entry_book as (\n    -- debits\n    select \"to\" as address, value as value\n    from ethereum.traces\n    where \"to\" is not null\n    and tx_success = True\n    and (call_type not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)\n    union all\n    -- credits\n    select \"from\" as address, -value as value\n    from ethereum.traces\n    where \"from\" is not null\n    and tx_success = True\n    and (call_type not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)\n    -- union all\n--     -- transaction fees debits\n--     select miner as address, sum(cast(receipt_gas_used as numeric) * cast(gas_price as numeric)) as value\n--     from ethereum.transactions as transactions\n--     join ethereum.blocks as blocks on blocks.number = transactions.block_number\n--     group by blocks.miner\n    union all\n    -- transaction fees credits\n    select \"from\" as address, -(cast(gas_limit as numeric) * cast(gas_price as numeric)) as value\n    from ethereum.transactions\n)\nselect address, sum(value) as balance\nfrom double_entry_book\ngroup by address\norder by balance desc\nlimit 10"}
{"prompt": "This SQL query retrieves the following information for the contract address specified:\n- the address of the \"big div\" (a division of the revenue generated by the contract),\n- the address of the \"sqrt\" (another division of the revenue generated by the contract),\n- the address of the \"whitelist\" (a list of addresses allowed to participate in the contract),\n- the beneficiary address (the address to which the revenue from the contract is sent),\n- the control address (the address that can modify the settings of the contract),\n- the fee collector address (the address that collects fees for the contract),\n- the auto-burn setting (whether or not unclaimed tokens from the contract are automatically burned),\n- the revenue commitment basis points (the percentage of revenue that is committed to the sqrt address),\n- the fee basis points (the percentage of fees that are charged for the contract),\n- the minimum investment (the minimum amount of ether that can be invested in the contract),\n- the open-until-at-least setting (the minimum amount of time that the contract must be open for), and\n- the auto-burn setting (whether or not unclaimed tokens from the contract are", "completion": " SELECT config.\"_bigDivAddress\",\n        config.\"_sqrtAddress\",\n       config.\"_whitelistAddress\",\n       config.\"_beneficiary\",\n       config.\"_control\",\n       config.\"_feeCollector\",\n       config.\"_autoBurn\",\n       config.\"_revenueCommitmentBasisPoints\"/10 AS revenueCommitmentPercent,\n       config.\"_feeBasisPoints\"/10 AS feePercent,\n       config.\"_minInvestment\"/1e6 AS minInvestment,\n       config.\"_openUntilAtLeast\",\n       config.\"_autoBurn\"\nFROM fairmint.\"DAT_evt_UpdateConfig\" config\nINNER JOIN ethereum.transactions tx ON config.evt_tx_hash = tx.hash\nWHERE contract_address = '\\x{{ contract_address }}'\nORDER BY tx.block_number DESC,\n         config.evt_index DESC\nLIMIT 1"}
{"prompt": "This query returns the buyer, quantity, and block number for all trades of EVT-49B that occurred after 2019-11-13 23:00:01.822+00, ordered by buyer and then by quantity in descending order.", "completion": " SELECT DISTINCT ON (buyer)\n                buyer,   \n                -- block_number,\n                -- event_type,\n                quantity\nFROM trades\nWHERE trades.base_asset = 'EVT-49B'\n  AND trade_time > '2019-11-13 23:00:01.822+00'\nORDER BY \n    buyer ASC, \n    trades.quantity DESC\nLIMIT 20"}
{"prompt": "This query returns the net DSR deposits for each day in the past 50 days, as well as the cumulative DSR deposits over that time period.", "completion": " WITH inbound AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(rad/1e45) as inb FROM makermcd.\"VAT_call_move\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nwhere dst = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\nGROUP BY 1\nORDER BY 1 desc\n),\n\noutbound AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(-rad/1e45) as outb FROM makermcd.\"VAT_call_move\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nWHERE src = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT \ninbound.day,\nsum(inb + outb) as net_DSR,\nsum(sum(inb + outb)) over (order by inbound.day) as cumulative_DSR_deposits\nFROM inbound\nLEFT JOIN outbound ON inbound.day = outbound.day\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This SQL query returns the contract address, maximum tokens, and minimum liquidity for the top 10 exchanges from the uniswap.Exchange_call_addLiquidity table.", "completion": " SELECT contract_address, max_tokens, min_liquidity\nFROM uniswap.\"Exchange_call_addLiquidity\"\n-- WHERE contract_address = \"\"\nLIMIT 10"}
{"prompt": "This SQL query calculates the sum of all values in the \"from\" column where the value is equal to '\\xFB1d445c27A860bb6330453Bf08254198F3E0E31'.", "completion": " SELECT sum(if (\"from\" = '\\xFB1d445c27A860bb6330453Bf08254198F3E0E31') then value else 0 endif) \nFROM ethereum.traces\nWHERE \n--   OR \"to\" = '\\xFB1d445c27A860bb6330453Bf08254198F3E0E31')\n  and tx_success = true"}
{"prompt": "This SQL query returns the sum of the USD volume of WETH / MKR for each day.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    sum(\"sellVolume\" / 1e18 * mkr.average) as usdvolume\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" mkr \n\nWHERE \"sellToken\" = '\\x9f8F72aA9304c8B593d555F12eF6589cC3A579A2' --mkr\nAND \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', mkr.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND mkr.symbol = 'MKR'\nAND tx.success = true\n\nGROUP BY 1"}
{"prompt": "Get all data from the compoundv2.\"cErc20_evt_Borrow\" table, up to 10 rows.", "completion": " SELECT * FROM compoundv2.\"cErc20_evt_Borrow\" LIMIT 10"}
{"prompt": "This SQL query retrieves information on all transfers of the token ERC20 to the address '0x9c2731b4a9adae8b65402e7036318a607496db45', limited to 10 results.", "completion": " SELECT * FROM erc20.\"ERC20_evt_Transfer\"\nWHERE \"to\" = '\\x9c2731b4a9adae8b65402e7036318a607496db45'\nLIMIT 10\n\n0x29fe7D60DdF151E5b52e5FAB4f1325da6b2bD958\n\nSELECT * FROM makermcd.\"DAI_evt_Transfer\"\nWHERE \"dst\" = '\\x33f849bf9955da0870fd8a25db45534c466548d0' and \"src\" = '\\x29fe7D60DdF151E5b52e5FAB4f1325da6b2bD958'\nLIMIT 10\n\nSELECT * FROM ethereum.\"transactions\"\nWHERE hash = '17fa40c3f4ebd58daf57a9a5b545c3dfca5935d468f18ad708eab4b8aed99098'"}
{"prompt": "This SQL query returns the evt_block_time and oi (market open interest) for the market with ID '190677ef8c7100fa63e0b6ae7062c3c438ee15ce'. The results are ordered by evt_block_time.", "completion": " SELECT evt_block_time,\n       \"marketOI\" / 1e18 AS oi\nFROM augur_v2.\"Augur_evt_MarketOIChanged\"\nWHERE market = '\\x190677ef8c7100fa63e0b6ae7062c3c438ee15ce'\nORDER BY evt_block_time"}
{"prompt": "This SQL query returns the sum of all \"value\" fields from the ERC20_evt_Transfer table, where the \"contract_address\" is equal to the specified address and the \"to\" field is equal to the specified address. It also returns the sum of all \"wad\" fields from the zeroex.\"WETH9_evt_Transfer\" table, limited to 10 results. Finally, it returns all fields from the zeroex.\"WETH9_evt_Transfer\" table, limited to 10 results.", "completion": " SELECT \nsum(\"value\"/1e18) \nFROM erc20.\"ERC20_evt_Transfer\"\nWHERE \"contract_address\" = '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' and \"to\" = '\\xa26e80e7Dea86279c6d778D702Cc413E6CFfA777'\n\nSELECT sum(\"wad\"/1e18) FROM zeroex.\"WETH9_evt_Transfer\" \nLIMIT 10\n\nSELECT * FROM zeroex.\"WETH9_evt_Transfer\" \nLIMIT 10"}
{"prompt": "This SQL query will select all data from the ethereum contracts table, and limit the results to 10 rows.", "completion": " select * from ethereum.contracts limit 10;"}
{"prompt": "This query returns the total number of artworks created on each day.", "completion": " SELECT date, sum(artworks) OVER (\n                                 ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_artworks\nFROM\n  (SELECT date, count(id) AS artworks\n   FROM\n     (SELECT min(date) AS date,\n             id\n      FROM\n        (SELECT date_trunc('day', evt_block_time) AS date,\n                \"_tokenId\" AS id\n         FROM superrare.\"SuperRare_evt_Transfer\"\n         UNION ALL SELECT date_trunc('day', evt_block_time) AS date,\n                          \"tokenId\" AS id\n         FROM superrare.\"SuperRare_v2_evt_Transfer\"\n         ORDER BY 1) a\n      GROUP BY 2) b\n   GROUP BY 1\n   ORDER BY 1) c"}
{"prompt": "This SQL query returns the block time and sum of amounts for all rows in the table where the contract address is '0x08ff7e2be3c23ab3938b6d275193d6a49ccef73e' and the topic1 is '0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885'.", "completion": " SELECT block_time,\n       sum(amount) OVER (\n                         ORDER BY block_time ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS amount_eth\nFROM\n  (SELECT block_time,\n          bytea2numeric(DATA) / 1e18 AS amount\n   FROM ethereum.\"logs\"\n   WHERE contract_address = '\\x08ff7e2be3c23ab3938b6d275193d6a49ccef73e'\n     AND topic1 = '\\x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885'\n   UNION ALL SELECT block_time,\n                    bytea2numeric(DATA) / -1e18 AS amount\n   FROM ethereum.\"logs\"\n   WHERE contract_address = '\\x08ff7e2be3c23ab3938b6d275193d6a49ccef73e'\n     AND topic1 = '\\xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5') a"}
{"prompt": "This query returns the expected date when the merge will happen.", "completion": " with l1000 as (\nselect\n    time,\n    difficulty,\n    total_difficulty,\n    (unix_seconds(time) - lag(unix_seconds(time)) over (order by time asc)) as block_interval,\n    58750000000000000000000 as ttd\nfrom ethereum.blocks\nwhere time > now() - interval '1 day'\norder by time desc\nlimit 1000\n),\n\nstats as (\nselect\n    ttd,\n    avg(difficulty) as avg_diff,\n    max(total_difficulty) as last_td,\n    max(time) as last_time,\n    avg(block_interval) as avg_interval\nfrom l1000\ngroup by ttd\n)\n\n--select\n--    (ttd - last_td) / avg_diff as blocks_left,\n--    (ttd - last_td) / avg_diff * avg_interval as seconds_left,\n--    (ttd - last_td) / avg_diff * avg_interval / 60 as minutes_left,\n--    (ttd - last_td) / avg_diff * avg_interval / 3600 as hours_left,\n--    (ttd - last_td) / avg_diff * avg_interval / 3600 / 24 as days_left,\n--    date_format(timestamp_seconds(unix_seconds(last_time) + (ttd - last_td) / avg_diff * avg_interval), 'yyyy-MM-dd hh:mm:ss') as expected_date\n--from stats\n\nselect\n    '0' as blocks_left,\n    '0' as seconds_left,\n    '0' as minutes_left,\n    '0' as hours_left,\n    '0' as days_left,\n    '2022-09-15 07:41:04' as expected_date\n"}
{"prompt": "This SQL query returns the total amount of ETH locked in Edgeware on each day, ordered by the date.", "completion": " SELECT date_trunc('day', tx.block_time),\n       SUM(eth/1e18)\nFROM edgeware.\"Lockdrop_evt_Locked\" l\nINNER JOIN ethereum.transactions tx ON l.tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1"}
{"prompt": "This SQL query returns the total ETH volume traded on the DutchX exchange for each day, where ETH is being auctioned for GNO. The volume is calculated by summing the amount of ETH sold in each auction divided by 1e18. The query only includes transactions that were successful.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    sum(\"sellVolume\" / 1e18) as ethvolume \n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" gno \n\nWHERE \"sellToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND \"buyToken\" =  '\\x6810e776880c02933d47db1b9fc05908e5386b96' --gno\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', gno.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND gno.symbol = 'GNO'\nAND tx.success = true\n\nGROUP BY 1"}
{"prompt": "This query returns the average trade price by token for each hour.", "completion": " SELECT name, date_trunc('hour', trade_time) AS hour,avg(price)\r-- Count the unique account from the Borrow taken event\rFROM trades t, tokens tok\rWHERE t.base_asset = tok.symbol     \rGROUP BY t.trade_time, tok.name"}
{"prompt": "The following SQL query will calculate the burn fee for a specific trade on the Kyber network. The query will return the trade's transaction hash, the value of the trade in ETH, and the number of fees that were burned in the trade.", "completion": " WITH burnfee AS (\n\n                    SELECT evt_tx_hash, evt_index, \"ethWeiValue\" /1e18 AS value, (SELECT count(*)\n                                                                            FROM kyber.\"FeeBurner_evt_AssignBurnFees\"\n                                                                            WHERE evt_tx_hash = trade.evt_tx_hash\n                                                                            AND evt_index < trade.evt_index) AS burnFees\n                    FROM kyber.\"Network_evt_KyberTrade\" trade\n                    WHERE evt_tx_hash = '\\xdba7d76951f6dde8894e0279949ca2afaf133fc305351b3cec4f898f8fd55bf0'\n                    ORDER BY 1, 2\n                )\n                    \n    SELECT evt_tx_hash, (value * (burnFees - lag(burnFees, '1', '0') OVER (PARTITION BY evt_tx_hash ORDER BY evt_index))) AS ethvolume\n    FROM burnfee\n    ORDER BY evt_tx_hash\n"}
{"prompt": "This query shows the total amount of synths issued and burned for each month, in a given currency.", "completion": " SELECT\n    date_trunc('month', tx.block_time) AS time,\n    SUM(issued * (\n        SELECT \"rate\" FROM (\n            SELECT unnest(\"currencyKeys\") as \"currencyKey\", unnest(\"newRates\") as rate FROM synthetix.\"ExchangeRates_evt_RatesUpdated\" ex\n            LEFT JOIN ethereum.transactions tx2 ON tx2.hash = ex.evt_tx_hash\n            WHERE tx2.block_time < tx.block_time\n            ORDER BY tx2.block_time DESC\n            LIMIT 1000\n        ) zz WHERE \"currencyKey\" = tt.\"currencyKey\" LIMIT 1\n    )) / 1e36 as issued,\n    -SUM(burned * (\n        SELECT \"rate\" FROM (\n            SELECT unnest(\"currencyKeys\") as \"currencyKey\", unnest(\"newRates\") as rate FROM synthetix.\"ExchangeRates_evt_RatesUpdated\" ex\n            LEFT JOIN ethereum.transactions tx2 ON tx2.hash = ex.evt_tx_hash\n            WHERE tx2.block_time < tx.block_time\n            ORDER BY tx2.block_time DESC\n            LIMIT 1000\n        ) zz WHERE \"currencyKey\" = tt.\"currencyKey\" LIMIT 1\n    )) / 1e36 as burned\nFROM (\n    SELECT amount as issued, NULL AS burned, \"currencyKey\", call_tx_hash as tx_hash FROM synthetix.\"Synthetix_call_issueSynths\" WHERE call_success\n    UNION ALL\n    SELECT NULL as issued, amount AS burned, \"currencyKey\", call_tx_hash as tx_hash FROM synthetix.\"Synthetix_call_burnSynths\" WHERE call_success\n) tt\nLEFT JOIN ethereum.transactions tx ON tx.hash = tt.tx_hash\nGROUP BY 1\nORDER BY 1 DESC\n"}
{"prompt": "This SQL query returns the number of Loopring transactions processed each day, starting from February 26, 2020. The data is grouped by day and ordered chronologically.", "completion": " SELECT date_trunc('day', call_block_time), SUM(\"blockSize\") as transactions\nFROM loopring.\"DEXBetaV1_call_commitBlock\"\nWHERE date_trunc('day', call_block_time) >= '20200226'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns the date, value, sender, and recipient of all transactions that have occurred in the past two hours.", "completion": " SELECT date_trunc('hours', tx.block_time) AS Date, tx.value, tx.\"from\", tx.\"to\"\nFROM (\n        (SELECT call_tx_hash\n         FROM idex.\"IDEX1_call_trade\")) ether\nINNER JOIN\n     (SELECT hash,\n             block_time,\n             \"from\",\n             \"to\",\n             \"value\"\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '2 hours'\n        AND block_time < date_trunc('hour', NOW())) tx ON ether.call_tx_hash = tx.hash\nORDER BY 1;"}
{"prompt": "This query returns the total USD value of all ERC20 bets made by a particular user over the course of a year. The data is grouped by date and token type.", "completion": " WITH data as (\nSELECT \ndate_trunc('year', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ncase \nwhen t.symbol= 'WETH' THEN e.value/1e18 * p_weth.price\nWHEN t.symbol = 'DAI' THEN e.value/1e18\nend\nas usd_value,\nt.symbol,\ne.evt_tx_hash\n-- p_weth.price as  curr_weth_price,\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\nJOIN prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 p_weth on (p_weth.symbol = t.symbol AND p_weth.minute = date_trunc('minute', tx.block_time))\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\nAND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n\nUNION (\nSELECT \ndate_trunc('year', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ne.value/1e18 as usd_value,\nt.symbol,\ne.evt_tx_hash\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\nAND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n)\n)\n\nSELECT data.datetime, sum(usd_value) as total_usd_value, data.symbol\nFROM data \nGROUP BY 1, 3\n"}
{"prompt": "This query returns the total USD value of all bets made by a specific user on a given day, across all ERC20 tokens.", "completion": " WITH data as (\nSELECT \ndate_trunc('day', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ncase \nwhen t.symbol= 'WETH' THEN e.value/1e18 * p_weth.price\nWHEN t.symbol = 'DAI' THEN e.value/1e18\nend\nas usd_value,\nt.symbol,\ne.evt_tx_hash\n-- p_weth.price as  curr_weth_price,\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\nJOIN prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 p_weth on (p_weth.symbol = t.symbol AND p_weth.minute = date_trunc('minute', tx.block_time))\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\nAND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n\nUNION (\nSELECT \ndate_trunc('day', tx.block_time) as datetime,\ne.from as user_address,\n-- e.value/1e18 as amount,\ne.value/1e18 as usd_value,\nt.symbol,\ne.evt_tx_hash\n\n\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\n\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\n-- AND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n)\n)\n\nSELECT data.datetime, sum(usd_value) as total_usd_value, data.symbol\nFROM data \nGROUP BY 1, 3\n"}
{"prompt": "This query is searching for the number of successful transactions to certain addresses on the Ethereum blockchain, grouped by day. The addresses being searched are: \n\n- 0x1f0d1de1558582ad6f13763f477119a1455502af\n- 0x2f99be0adf2abd64b6813a414f3a27aace42a9bf\n- 0x13f64609bf1ef46f6515f8cd3115433a93a00dc6\n- 0x25f17d6cb23cc85bfa6c5e9b8f1d5226f5927cbc\n- 0x04450956638097114b504aaac5ff55db9295420a\n- 0xaA5bBD5A177A588b9F213505cA3740b444Dbd586\n\nThe results are ordered by date, with the most recent day first.", "completion": " SELECT date_trunc('day', block_time) AS date,\n       COUNT(*) AS COUNT\nFROM ethereum.\"transactions\"\nWHERE ( \"to\" = '\\x1f0d1de1558582ad6f13763f477119a1455502af' ) \nor ( \"to\" = '\\x2f99be0adf2abd64b6813a414f3a27aace42a9bf') \nor (\"to\" = '\\x13f64609bf1ef46f6515f8cd3115433a93a00dc6')\nor (\"to\" = '\\x25f17d6cb23cc85bfa6c5e9b8f1d5226f5927cbc')\nor (\"to\" = '\\x04450956638097114b504aaac5ff55db9295420a')\nor (\"to\" = '\\xaA5bBD5A177A588b9F213505cA3740b444Dbd586')\n  AND \"success\" = TRUE\nGROUP BY 1\nORDER BY 1 DESC;"}
{"prompt": "This query returns the total number of transactions made with Monolith contracts, accumulated daily over time.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x95BEBe7bfc6aCc186C13D055D0Aacc2DE5f81502','\\xb24d47364163f909e64cf2cf7788d22c51cea851', '\\x85bb8a852c29d8f100cb97ecdf4589086d1be2dd') -- Monolith deployers\n\t    and type = 'create'\n),\ndata as (\n    select date_trunc('day', eb.\"time\") AS \"day\", count(distinct el.tx_hash) as transactions\n    from ethereum.logs el\n    join ethereum.blocks eb \n    \ton el.block_number = eb.\"number\"\t\n    join wallets w\n        on w.address = el.contract_address\n    where topic1 in (\n\t\t\t'\\xd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee',  -- Transferred event\n\t\t\t'\\xd4f62f23021706247dcffea245d104ae7ddaec7f23acf3d11d7136d5de6a69ad', -- BulkTransfer\n\t\t\t'\\xaf022f6b53b11c364e2dfc0aea08eb9416c94f2661451ea82ead8831385617a6' -- ExecutedTransaction\n\t\t\t)\n    group by 1\n)\nselect \"day\", sum(transactions) over (order by \"day\" asc rows between unbounded preceding and current row) as transactions_running_total\nfrom data"}
{"prompt": "This SQL query returns the topics \"encoded_from\" and \"encoded_to\" as well as the data \"encoded_value\" from the ethereum.logs table. The table is filtered by the topic1 value \"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\" and the contract_address value \"WITH tokens (name, address) AS (VALUES ('MKR', '\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'::bytea))\".", "completion": " WITH tokens (name, address) AS (VALUES ('MKR', '\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'::bytea))\nSELECT topic2 as encoded_from, topic3 as encoded_to, data as encoded_value FROM ethereum.logs \nWHERE topic1='\\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\nAND contract_address IN (SELECT address FROM tokens)\nLIMIT 10;"}
{"prompt": "This SQL query returns the sum of rads divided by 1e45 for each day in the VAT_call_move table, where the dst equals a950524441892a31ebddf91d3ceefa04bf454466. The query groups the results by day and orders them in descending order. Finally, the query returns the top 10 results.", "completion": " SELECT\ndate_trunc('day', block_time) as day,\nsum(rad/1e45)\nFROM makermcd.\"VAT_call_move\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nWHERE \"dst\" = '\\xa950524441892a31ebddf91d3ceefa04bf454466'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This query returns the total supply of KP3R over time.", "completion": " select \nevt_block_time,\nsum(supply/1e18) over (order by evt_block_time) as total_supply\nfrom (\n    select \n    evt_block_time,\n    CASE\n        when \"from\" = '\\x0000000000000000000000000000000000000000' then value\n        when \"to\" = '\\x0000000000000000000000000000000000000000' then -value\n    END as supply\n    from erc20.\"ERC20_evt_Transfer\"\n    where contract_address = '\\x1ceb5cb57c4d4e2b2433641b95dd330a33185a44'\n    and (\"from\" = '\\x0000000000000000000000000000000000000000' or \"to\" = '\\x0000000000000000000000000000000000000000')\n) mints_and_burns"}
{"prompt": "This query returns the total number of trades made on Uniswap over the course of the past week.", "completion": " SELECT \r\n(SELECT COUNT(*) FROM uniswap.\"Exchange_evt_EthPurchase\" eth\r\nINNER JOIN ethereum.transactions tx ON eth.tx_hash = tx.hash\r\nWHERE tx.block_time > date_trunc('week', current_date)::date - 7 \r\nAND tx.block_time < date_trunc('week', current_date)::date\r\n)\r\n+\r\n(SELECT COUNT(*) FROM uniswap.\"Exchange_evt_TokenPurchase\" tokenp\r\nINNER JOIN ethereum.transactions tx ON tokenp.tx_hash = tx.hash\r\nWHERE tx.block_time > date_trunc('week', current_date)::date - 7 \r\nAND tx.block_time < date_trunc('week', current_date)::date) as trades"}
{"prompt": "The following SQL query calculates the total number of InstaDApp users over time. It does this by first counting the number of unique users per day, then summing up these counts over time.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(evt_block_time)) AS date,\n                OWNER AS account\n         FROM instadapp_v2.\"InstaRegistry_evt_Created\"\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(evt_block_time)) AS date,\n                      OWNER AS account\n         FROM instadapp_dsa.\"InstaIndex_evt_LogAccountCreated\"\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "This query returns the total volume of stablecoins traded in a 24 hour period. The stablecoins included in the query are GUSD, USDT, DAI, USDC, PAX, and TUSD.", "completion": " select date_trunc('day', time), symbol, volume_usd_24hour from coincap.trading_summary WHERE symbol IN ('GUSD', 'USDT', 'DAI', 'USDC', 'PAX', 'TUSD');"}
{"prompt": "This SQL query returns the total value of WBTC transfers for each week, ordered from most recent to least recent.", "completion": " SELECT\ndate_trunc('week', block_time) as week,\nsum(t.\"value\"/1e8) as transfer_volume from wrappedbtc.\"WBTC_evt_Transfer\" t\nLEFT JOIN ethereum.\"transactions\" tx ON t.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This SQL query returns the sum of borrows per day on the compound platform, truncated to the nearest day. The data is taken from the ethereum.transactions table and grouped by day.", "completion": " \n-- Find table for the borrows per day on compound\n\nSELECT sum(\"borrowAmount\" / 1e18), date_trunc('day', tx.block_time) AS DayTime\nFROM compoundv2.\"cErc20_evt_Borrow\" total, ethereum.transactions tx\nWHERE total.tx_hash = tx.hash\nGROUP BY 2\nORDER BY 2 DESC\n\n\n"}
{"prompt": "This query returns the top 25 Synthetix contracts by balance.", "completion": " \n-- Synthetix docs & full list of contracts available here: https://developer.synthetix.io/api/docs/deployed-contracts.html\n\n-- testing:\n\nWITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    -tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address = '\\xAFD870F32CE54EfdBF677466B612bf8ad164454B' -- iBNB\nUNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\xAFD870F32CE54EfdBF677466B612bf8ad164454B' -- iBNB\n)\n\nSELECT address, sum(amount) as slp_balance\nFROM transfers\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 25\n"}
{"prompt": "This SQL query returns the sum of gas used by a random account, multiplied by the gas price, divided by 1e18.", "completion": " select SUM(gas_used * gas_price / 1e18)\nfrom ethereum.transactions tx\ninner join ethereum.receipts r\non tx.hash = r.tx_hash\nwhere tx.\"from\" = '\\xa05dc40A9E6Bfe46d72204f578d72999aAA6c2e4'\nand r.status = 1;"}
{"prompt": "This SQL query calculates the total ETH deposited in the DefiZap contracts.", "completion": " WITH zaps_eth as (SELECT \ne.from as user_address, \ne.to as Zap_address,\ne.value/1e18 as eth_amount,\ne.gas_price/1e9 as gas_price\nFROM ethereum.\"transactions\" e\nwhere e.to in ('\\x52fc6455f258760705e70f70160b06619bfe0adb','\\xd17cda470bd0237fae82ef254c84d06d0e4cc02f','\\x8dfcb49766c0296e4373a0300b52c3637614db59','\\x929a10efda7099865dad8286aee8715078902d51','\\x19627796b318e27c333530ad67c464cfc37596ec','\\x1ee8c303f5ab9b36bc30b9345dec7e9a748fa693','\\x04b35ef193e2357328ae79914569721a7ffd6146','\\xebd5e23927891fbfda10487ccc9a1a1a7b9a4210','\\x20ef0c900f8e7ec3a1a89a761f0670ae9e3dd709','\\x408609f5acab253d41cb5dfce913ff367937313b','\\x8e8b9cf6d411b6c8dacc63c306f2691ed195d91d','\\x13240b97c40d7e306cedf3adc9cb057cec74c361','\\x3b122c376e472ae6ae7a4739bebf7b68e045b285','\\xd3eba712988df0f8a7e5073719a40ce4cbf60b33','\\xe3385df5b47687405a02fc24322dedb7df381852','\\xecb53d65816444dbbf6a326b8df959caeda3faf9','\\x606563f8dc27f316b77f22d14d9cd025b4f70469','\\x21091c5ea13854ab0965090dc4fc20280f1a5730','\\xe4b7b00a802834bea733f06a0a24a869f2765df7','\\x4ebee4cf5ba7de81f222fefa4e5d0c30c4968fff')\n-- Compiled list from Etherscan link here omitting the Gitcoin Grants one: https://etherscan.io/accounts/label/defizap?__cf_chl_captcha_tk__=174f2555d28b7754d207de4fb5b8afb02dd0ebfc-1580715654-0-AWQ0c9Mn3cqBneEWAV85uH5a5hNdYDgjjN07mQ0GMIe0JsNoeuj7tntfJ7QlQMFT8luHa7uj921xoExVDOL_398_HSrUhKxcLkExMF0C2j9OUVqYkioysTYSHduvQT_R3zN9qo3V58xZ8mID4yE8jx1UOapRxofHiEkRY-HRFbm6JHdWZ_cUE0j34afB3sDMaENjVMarZE-dMA6hdtDBKuF9msTrHhvV5_joi8XBb0i3y6w853z3XAdweZo2hpPCRnwiyLau_6BGcZS69D34UMKwucoPBFLrICJVBOepvq3lFKd0nFzsD2ntWXheaqWdtD8uU1ujQDlUTICZemHCq6kMylhpylMgGm5t72spsXb5nyEQSo86HLJtKY4GOIk8NdJxzYMJqA5p_ldPTnxjF2M\nAND\ne.success = 'true')\n\nSELECT sum(eth_amount) as total_ETH\nfrom zaps_eth\n-- LIMIT 50"}
{"prompt": "This SQL query retrieves all data from the table \"Safev0.1.0_call_execTransaction\" in the database \"gnosis_safe\".", "completion": " SELECT * from gnosis_safe.\"Safev0.1.0_call_execTransaction\""}
{"prompt": "This SQL query returns data on the weekly and cumulative minting of a particular token over the past 39 weeks.", "completion": " SELECT\ndate_trunc('week', block_time),\ntoken_symbol,\nSUM(\"mint_amount_usd\") as weekly_mint,\nsum(\"mint_amount_usd\") over (partition by token_symbol order by block_time) as cumulative_mint\nFROM dune_user_generated.\"compound_view_mint\"\nWHERE block_time > now() - interval '39 weeks' \nGROUP BY 1,2 \nORDER BY 1;\n\n-- See data table examples:\n--SELECT * FROM dune_user_generated.\"compound_view_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_borrow\" when format is decided\n--SELECT * FROM dune_user_generated.\"compound_view_repay_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_repay_borrow\" when format is decided"}
{"prompt": "This SQL query returns the weekly transfer volume in USD for WBTC (wrapped Bitcoin) over the past 50 weeks. The data is sourced from the wrappedbtc.\"WBTC_evt_Transfer\" and ethereum.\"transactions\" tables, and is filtered by the prices.usd table to only include data for the WBTC cryptocurrency. The data is grouped by week and ordered by descending week.", "completion": " SELECT\ndate_trunc('week', block_time) as week,\nsum(t.\"value\"/1e8*p.price) as transfer_volume from wrappedbtc.\"WBTC_evt_Transfer\" t\nLEFT JOIN ethereum.\"transactions\" tx ON t.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE p.symbol = 'WBTC'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This SQL query returns a list of auctions that have been cleared, including the auction index, the sell token, the buy token, the sell volume, the buy volume, the price, and the block time.", "completion": " WITH symbols AS\n  (SELECT DISTINCT asset,\n                   symbol\n   FROM coincap.\"tokens/usd\")\nSELECT a.\"auctionIndex\",\n       s.\"symbol\" AS sellToken,\n       b.\"symbol\" AS buyToken,\n       a.\"sellVolume\" / 1e18 AS sellVolume,\n       a.\"buyVolume\" / 1e18 AS buyVolume,\n       a.\"sellVolume\" / a.\"buyVolume\" AS price,\n       tx.block_time AS TIME\nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" a,\n     symbols s,\n     symbols b,\n     ethereum.transactions tx\nWHERE a.tx_hash = tx.hash\n  AND a.\"sellToken\" = s.asset\n  AND a.\"buyToken\" = b.asset\nORDER BY 1,\n         2,\n         3\nLIMIT 50"}
{"prompt": "This SQL query calculates the total USD amount traded for NFTs in the month of August 2022.", "completion": " select sum(usd_amount) / 1E6 as usd\nfrom nft.\"trades\"\nwhere block_time >= TIMESTAMP '2022-8-01 00:00:00' and block_time < TIMESTAMP '2022-9-01 00:00:00'"}
{"prompt": "This query returns the number of trades made by each trader on the Ethereum blockchain. The data is grouped by the trader's address, and the number of trades is sorted in descending order.", "completion": " SELECT '0x' || encode(trades.transactor::bytea, 'hex') as trader, count(*) as num_trades\nFROM gnosis.\"Sight_MarketMaker_evt_AMMOutcomeTokenTrade\" trades,\nethereum.\"transactions\" transactions\n--(select factory.\"lmsrMarketMaker\" as address from gnosis.\"Sight_MarketMakerFactory_evt_LMSRMarketMakerCreation\" factory where factory.contract_address='\\x37186b5d78ebb1f37bc56e5dca7f18ab98256c4b' and factory.creator='\\x7949b0b936e2e5d5e391f955cfd77a80cc37e9ad') market_makers\nWHERE trades.contract_address IN ('\\xd0d4f1f8c20b57b358375566858bd3af932ef9c2','\\x6f98f4a9e6ae012d176d498c168a99343941f920','\\xf9d049de636736a8f2a84e9464d657a1aeb47128','\\x607d86ee18ecfb9c99c1241fbfd6a30c21846c53','\\x2d23de93b6353b54e05f8e998a064b00bd779942','\\x6524d42d77f74de3a9cfc87dfd8df573f25602fe','\\x408ac0076c69bc951865e1c0f0c7c66c1f211cca','\\xc382aafeac3730d6a002caff7fee9ed339d89faf','\\x3f67f14351b0c960b48af0a1281a9696e9dcfbb8','\\x27212dadb0806c8a21f7d2669f5039d8c4310b84')\nand transactions.hash=trades.evt_tx_hash\nand transactions.success=true\nGROUP BY trades.transactor\nORDER BY num_trades DESC;\n\nselect factory.\"lmsrMarketMaker\" as address from gnosis.\"Sight_MarketMakerFactory_evt_LMSRMarketMakerCreation\" factory where factory.contract_address='\\x37186b5d78ebb1f37bc56e5dca7f18ab98256c4b' and factory.creator='\\x7949b0b936e2e5d5e391f955cfd77a80cc37e9ad'"}
{"prompt": "The SQL query returns the percentage of \"repholders\" that are contracts. A \"repholder\" is defined as a holder of either an Eth4Rep lock, a DxLockWhitelisted4Rep, a DxLockMgnForRep, or a DxGenAuction4Rep.", "completion": " WITH tokenlockers AS\n  (SELECT DISTINCT (_locker) AS repholder\n   FROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\"),\n     ETHlockers AS\n  (SELECT DISTINCT (_locker) AS repholder\n   FROM dxdao.\"DxLockEth4Rep_evt_Lock\"),\n     MGNregisters AS\n  (SELECT DISTINCT (address) AS repholder\n   FROM dxdao.\"DxLockMgnForRep_evt_Register\"),\n     GENauction AS\n  (SELECT DISTINCT (_bidder) AS repholder\n   FROM dxdao.\"DxGenAuction4Rep_evt_Bid\"),\n     all_holders AS\n  (SELECT repholder\n   FROM tokenlockers\n   UNION\n     (SELECT repholder\n      FROM ETHlockers)\n   UNION\n     (SELECT repholder\n      FROM GENauction)\n   UNION\n     (SELECT repholder\n      FROM MGNregisters)),\n     contracts AS\n  (SELECT repholder,\n          t.address AS a -- a will be null when repholder is not a contract\nFROM all_holders\n   LEFT JOIN ethereum.traces t ON repholder = t.address)\nSELECT (SUM(CASE\n               WHEN a IS NOT NULL THEN 1\n               ELSE 0\n           END) /  COUNT(DISTINCT repholder) ) AS total\n           \nFROM contracts;"}
{"prompt": "This SQL query will return the number of rows from the cryptokitties.\"KittyCore_call_setGeneScienceAddress\" table.", "completion": " select count(*) from cryptokitties.\"KittyCore_call_setGeneScienceAddress\""}
{"prompt": "This query returns the following information for each transaction: the block time, the hash, the from address, the borrow amount, the asset, the supply amount.", "completion": " SELECT eth.block_time AS ttime,\n      eth.hash AS \"txHash\",\n      eth.from AS \"buyerAddress\",\n        CASE dep.\"market\"::integer \n            WHEN 0 THEN\n                CASE\n                    WHEN char_length((dep.\"index\"::json#>'{\"borrow\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"index\"::json#>'{\"borrow\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"index\"::json#>'{\"borrow\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 1 THEN\n                CASE\n                    WHEN char_length((dep.\"index\"::json#>'{\"borrow\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"index\"::json#>'{\"borrow\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"index\"::json#>'{\"borrow\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 2 THEN\n                CASE\n                    WHEN char_length((dep.\"index\"::json#>'{\"borrow\"}')::json::text) < 6 THEN\n                        ('0.' || LPAD((dep.\"index\"::json#>'{\"borrow\"}')::json::text, 6, '0'))::decimal\n                    ELSE\n                        ((dep.\"index\"::json#>'{\"borrow\"}')::json::text::decimal / 1e6)::decimal\n                END\n        END AS \"borrowAmount\",\n        CASE dep.\"market\"::integer \n          WHEN 0 THEN\n            'ETH'::text\n          WHEN 1 THEN\n            'DAI'::text\n          WHEN 2 THEN\n            'USDC'::text\n        END AS \"Asset\",\n        CASE dep.\"market\"::integer \n            WHEN 0 THEN\n                CASE\n                    WHEN char_length((dep.\"index\"::json#>'{\"supply\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"index\"::json#>'{\"supply\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"index\"::json#>'{\"supply\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 1 THEN\n                CASE\n                    WHEN char_length((dep.\"index\"::json#>'{\"supply\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"index\"::json#>'{\"supply\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"index\"::json#>'{\"supply\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 2 THEN\n                CASE\n                    WHEN char_length((dep.\"index\"::json#>'{\"supply\"}')::json::text) < 6 THEN\n                        ('0.' || LPAD((dep.\"index\"::json#>'{\"supply\"}')::json::text, 6, '0'))::decimal\n                    ELSE\n                        ((dep.\"index\"::json#>'{\"supply\"}')::json::text::decimal / 1e6)::decimal\n                END\n        END AS \"supplyAmount\"\nFROM dydx.\"SoloMargin_evt_LogIndexUpdate\" dep\nJOIN ethereum.transactions eth ON eth.hash = dep.evt_tx_hash\nWHERE date_trunc('minute', eth.block_time) >= date_trunc('month', now()) - interval '1 month'\nORDER BY eth.block_time DESC\n"}
{"prompt": "This query returns data on orders placed on the Dfusion decentralized exchange. The data includes the addresses, transaction hashes, buy and sell amounts, tokens involved, success status, and validity period of the orders.", "completion": " SELECT \"gnosis_dfusion\".\"BatchExchange_call_placeOrder\".\"call_trace_address\" AS \"call_trace_address\", \"gnosis_dfusion\".\"BatchExchange_call_placeOrder\".\"call_tx_hash\" AS \"call_tx_hash\", \"gnosis_dfusion\".\"BatchExchange_call_placeOrder\".\"buyAmount\" AS \"buyAmount\", \"gnosis_dfusion\".\"BatchExchange_call_placeOrder\".\"buyToken\" AS \"buyToken\", \"gnosis_dfusion\".\"BatchExchange_call_placeOrder\".\"call_success\" AS \"call_success\", \"gnosis_dfusion\".\"BatchExchange_call_placeOrder\".\"contract_address\" AS \"contract_address\", \"gnosis_dfusion\".\"BatchExchange_call_placeOrder\".\"sellAmount\" AS \"sellAmount\", \"gnosis_dfusion\".\"BatchExchange_call_placeOrder\".\"sellToken\" AS \"sellToken\", \"gnosis_dfusion\".\"BatchExchange_call_placeOrder\".\"validUntil\" AS \"validUntil\"\nFROM \"gnosis_dfusion\".\"BatchExchange_call_placeOrder\"\nLIMIT 1048576"}
{"prompt": "This SQL query returns the following information for a given contract address:\n\n- the currency address\n- the initial reserve\n- the initial goal\n- the buy slope\n- the investment reserve percentage\n- the name\n- the symbol", "completion": " SELECT \"_currencyAddress\",\n       \"_initReserve\"/1e18 AS initReserve,\n       \"_initGoal\"/1e18 AS initGoal,\n       \"_buySlopeNum\"*1e30/\"_buySlopeDen\" AS \"buySlope\",\n       \"_investmentReserveBasisPoints\"/10 AS investmentReservePercent,\n       \"_name\",\n       \"_symbol\"\nFROM fairmint.\"DAT_call_initialize\"\nWHERE call_success=TRUE\n  AND contract_address = '\\x{{ contract_address }}'"}
{"prompt": "This SQL query will select the first 10 results from the table of USD prices for the WETH token.", "completion": " SELECT * FROM coincap.\"tokens/usd\"\nWHERE symbol = 'WETH'\nLIMIT 10"}
{"prompt": "This SQL query counts the number of trades that have been made by the affiliate address '\\x86003b044f70dac0abc80ac8957305b6370893ed'.", "completion": " select count(*)\nfrom zeroex.view_0x_api_fills\nwhere affiliate_address = '\\x86003b044f70dac0abc80ac8957305b6370893ed'"}
{"prompt": "SELECT * FROM kyber.\"Network_evt_KyberTrade\" and \nSELECT * FROM kyber.\"FeeBurner_evt_AssignBurnFees\" \nWHERE tx_hash = '\\xdba7d76951f6dde8894e0279949ca2afaf133fc305351b3cec4f898f8fd55bf0'", "completion": " SELECT * FROM kyber.\"Network_evt_KyberTrade\" WHERE tx_hash = '\\xdba7d76951f6dde8894e0279949ca2afaf133fc305351b3cec4f898f8fd55bf0'\n\nSELECT * FROM kyber.\"FeeBurner_evt_AssignBurnFees\" WHERE tx_hash = '\\xdba7d76951f6dde8894e0279949ca2afaf133fc305351b3cec4f898f8fd55bf0'\n\n/*\nSELECT * FROM kyber.\"FeeBurner_evt_AssignBurnFees\" b\nORDER BY INDEX desc */\n"}
{"prompt": "This SQL query returns a list of distinct addresses that have been funded by the Fairwin admin account. The query specifically looks at transactions where the gas used was 0 and the transaction was successful in order to identify addresses that may have been funded by the admin account.", "completion": " -- admin = 854d359a586244c9e02b57a3770a4dc21ffcaa8d (27,394.48 ETH total recieved from fairwin contract 0x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c)\n\nSELECT distinct tr.\"to\"\nFROM ethereum.transactions tr\nWHERE tr.\"from\" = '\\x854d359a586244c9e02b57a3770a4dc21ffcaa8d'\n  AND tr.\"to\" IN\n    (SELECT DISTINCT t.\"to\"\n     FROM ethereum.traces t\n     WHERE t.gas_used = 0\n       AND t.\"from\" = '\\x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c'\n       AND t.tx_success = TRUE )"}
{"prompt": "This SQL query calculates the volume of trades and the number of unique traders for each project on a monthly basis, starting from June 20, 2022. It also calculates the starting volume and number of traders for each project, as well as the normalized volume and number of traders (i.e. the volume and number of traders divided by the starting volume and number of traders respectively).", "completion": " WITH tbl_raw\nAS\n(\n    SELECT SUM(usd_amount) AS volume_usd\n         , COUNT (DISTINCT CASE WHEN trader_a IN ('\\xe592427a0aece92de3edee1f18e0157c05861564','\\x68b3465833fb72a70ecdf485e0e4c7bd8665fc45','\\xdef1c0ded9bec7f1a1670819833240f027b25eff','\\x22f9dcf4647084d6c31b2765f6910cd85c178c18','\\x1111111254fb6c44bac0bed2854e76f90643097d','\\x220bda5c8994804ac96ebe4df184d25e5c2196d4','\\x27239549dd40e1d60f5b80b0c4196923745b1fd2','\\xfd3dfb524b2da40c8a6d703c62be36b5d8540626','\\x1bd435f3c054b6e901b7b108a0ab7617c808677b','\\xdef171fe48cf0115b1d80b88dc8eab59176fee57','\\xe66b31678d6c16e9ebf358268a790b763c133750','\\x9008d19f58aabd9ed0d60971565aa8510560ab41','\\x74de5d4fcbf63e00296fd95d33236b9794016631','\\x12c085210a498369720f68c3020a60edf1542e4a' ) THEN tx_from ELSE trader_a END) AS trader \n         , date_trunc('month', block_time) AS dater\n         , project\n      FROM dex.trades\n    WHERE (\n           (category = 'Aggregator' AND project IN ('1inch','Paraswap','0x API', 'Matcha'))\n            OR \n           (category = 'DEX' AND project IN('Uniswap') AND version::int = 3)\n          )\n        AND block_time >= '2022-06-20' \n        AND not (\n                    token_a_address in ('\\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee','\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2')\n                AND token_b_address in ('\\xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee','\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2')\n                )        \n        \n    GROUP BY date_trunc('month', block_time), project\n)\n, tbl_intermediate\nAS\n(\nSELECT *\n      , row_number() OVER(PARTITION BY project ORDER BY dater ) AS ranker\n  FROM tbl_raw\n)\nSELECT *\n     , MAX(CASE WHEN ranker = 1 THEN volume_usd ELSE NULL END) OVER(PARTITION BY project) AS starting_volume\n     , MAX(CASE WHEN ranker = 1 THEN trader ELSE NULL END) OVER(PARTITION BY project) AS starting_trader_count\n     , (1.0*volume_usd)/MAX(CASE WHEN ranker = 1 THEN volume_usd ELSE NULL END) OVER(PARTITION BY project) AS normalized_volume\n     , (1.0*trader)/MAX(CASE WHEN ranker = 1 THEN trader ELSE NULL END) OVER(PARTITION BY project) AS normalized_traders\n  FROM tbl_intermediate\nORDER BY dater ASC, project  \n;\n"}
{"prompt": "This query returns the number of unique participants in the pool and the total amount they have spent.", "completion": " WITH per sender as (SELECT SUM(\"totalPrice\" / 1e18), sender\nFROM pooltogether.\"Pool_evt_BoughtTickets\"\nGROUP BY 2\nORDER BY 1 desc)\n\n\n"}
{"prompt": "This SQL query will select all of the columns from the \"Moloch_evt_SubmitProposal\" table, and then left join the \"Moloch_call_submitProposal\" table on the \"memberAddress\" column.", "completion": " SELECT * FROM moloch.\"Moloch_evt_SubmitProposal\" s\nLEFT JOIN moloch.\"Moloch_call_submitProposal\" details\nON s.\"memberAddress\" = details.\"applicant\";\n    "}
{"prompt": "This SQL query calculates the total ETH volume traded on the DutchX exchange for each day, where MKR is being auctioned for WETH. The volume is calculated by summing up the amount of ETH that was traded for each transaction, using the average prices of ETH and MKR from the coincap.io API for that minute.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    sum((\"sellVolume\" / 1e18 * mkr.average) / eth.average) as ethvolume \n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" mkr \n\nWHERE \"sellToken\" = '\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2' --mkr\nAND \"buyToken\" =  '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', mkr.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND mkr.symbol = 'MKR'\nAND tx.success = true\n\nGROUP BY 1"}
{"prompt": "This query returns the total amount of deposits made on the dYdX platform for each asset, for each day in the current year.", "completion": " \nwith data as (\n    SELECT eth.block_time AS ttime,\n      dep.\"evt_tx_hash\" AS \"txHash\",\n      dep.\"takerAccountOwner\" AS \"takerAddress\",\n        CASE dep.\"inputMarket\"::integer \n            WHEN 0 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 1 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 2 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 6 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 6, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e6)::decimal\n                END\n                            WHEN 3 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n        END AS \"depositAmount\",\n      CASE dep.\"market\"::integer \n      WHEN 0 THEN\n        'ETH'::text\n      WHEN 1 THEN\n        'SAI'::text\n      WHEN 2 THEN\n        'USDC'::text\n         WHEN 3 THEN\n        'DAI'::text\n      END AS \"Asset\"\nFROM dydx.\"SoloMargin_evt_LogTrade\" dep\nJOIN ethereum.transactions eth ON eth.hash = dep.evt_tx_hash\nWHERE date_trunc('minutep0i', eth.block_time) >= date_trunc('year', now())\n-- add ~  - interval '1 day'  ~ here to shift by any days/weeks or months if desired \nORDER BY eth.block_time DESC)\n\nSELECT\n  data.ttime,\n  sum(\"depositAmount\") over (partition by \"Asset\" order by data.ttime) AS \"sum\",\n  \"Asset\"\nfrom data\nLIMIT 5"}
{"prompt": "This SQL query calculates the cumulative net DSR for each day between 1/8/20 and 1/26/20. It then converts this to USD using the current exchange rate and displays the results in a table.", "completion": " WITH cumul_DSR AS \n(\nWITH inbound AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(rad/1e45) as inb FROM makermcd.\"VAT_call_move\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nwhere dst = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\nGROUP BY 1\nORDER BY 1 desc\n),\n\noutbound AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(-rad/1e45) as outb FROM makermcd.\"VAT_call_move\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nWHERE src = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT \ninbound.day as day,\nsum(inb + outb) as net_DSR,\nsum(sum(inb + outb)) over (order by inbound.day) as cumulative_net_DSR\nFROM inbound\nLEFT JOIN outbound ON inbound.day = outbound.day\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT cumul_DSR.day,\nsum(cumul_DSR.cumulative_net_DSR*0.00016438356)\nFROM cumul_DSR\nWHERE cumul_DSR.day > '1/8/20'\nand cumul_DSR.day < '1/26/20'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 20"}
{"prompt": "We are selecting the sum of the amount of tokens borrowed from the DutchExchange_evt_NewSellOrder table, filtered for the DAI address.", "completion": " SELECT SUM(amount / 1e18) --Here we get the amount of tokens borrowed (most amounts needs to be divided by 1e18)\nFROM gnosis.DutchExchange_evt_NewSellOrder\n\nWHERE sellToken = '\\x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' --Filtering for the DAI address. Note that 0 is replaced with \\"}
{"prompt": "The SQL query will return the erc20_address, Zap_user, Zap_address, and erc_amount for all transfers where the to address is in the given list.", "completion": " SELECT \ncontract_address as erc20_address, \nfrom as Zap_user,\nto as Zap_address,\nvalue/1e18 as erc_amount\nFROM erc20.\"ERC20_evt_Transfer\" e\nwhere e.to in ('\\x52fc6455f258760705e70f70160b06619bfe0adb','\\xd17cda470bd0237fae82ef254c84d06d0e4cc02f','\\x8dfcb49766c0296e4373a0300b52c3637614db59','\\x929a10efda7099865dad8286aee8715078902d51','\\x19627796b318e27c333530ad67c464cfc37596ec','\\x1ee8c303f5ab9b36bc30b9345dec7e9a748fa693','\\x04b35ef193e2357328ae79914569721a7ffd6146','\\xebd5e23927891fbfda10487ccc9a1a1a7b9a4210','\\x20ef0c900f8e7ec3a1a89a761f0670ae9e3dd709','\\x408609f5acab253d41cb5dfce913ff367937313b','\\x8e8b9cf6d411b6c8dacc63c306f2691ed195d91d','\\x13240b97c40d7e306cedf3adc9cb057cec74c361','\\x3b122c376e472ae6ae7a4739bebf7b68e045b285','\\xd3eba712988df0f8a7e5073719a40ce4cbf60b33','\\xe3385df5b47687405a02fc24322dedb7df381852','\\xecb53d65816444dbbf6a326b8df959caeda3faf9','\\x606563f8dc27f316b77f22d14d9cd025b4f70469','\\x21091c5ea13854ab0965090dc4fc20280f1a5730','\\xe4b7b00a802834bea733f06a0a24a869f2765df7','\\x4ebee4cf5ba7de81f222fefa4e5d0c30c4968fff')\n-- LIMIT 3\n-- LIMIT 50"}
{"prompt": "This SQL query retrieves data from the SoloMargin_evt_LogCall table in the dydx database and the ethereum.transactions table, specifically the block_time, hash, and from columns in the latter. The data is filtered to only show results from the past month, and is ordered by block_time in descending order.", "completion": " SELECT eth.block_time AS ttime,\n        eth.hash AS \"txHash\",\n        eth.from AS \"interactionAddress\",\n        dep.*\nFROM dydx.\"SoloMargin_evt_LogCall\" dep\nJOIN ethereum.transactions eth ON eth.hash = dep.evt_tx_hash\nWHERE date_trunc('minute', eth.block_time) >= date_trunc('month', now()) - interval '1 month'\nORDER BY eth.block_time DESC"}
{"prompt": "This SQL query returns the yield of stETH for the past {{days}} days.", "completion": " with\n\ntemp_lido_apy as (\nselect \n    date_trunc('hour', evt_block_time) as hour,\n    ((\"postTotalPooledEther\" / \"totalShares\" / (lag(\"postTotalPooledEther\" / \"totalShares\", 1) over (order by evt_block_time)))^365 - 1) AS apy\nfrom    lido.\"LidoOracle_evt_PostTotalShares\"\n),\n\nlido_apy as (\nselect\n    hour,\n    (select apy from temp_lido_apy t where t.hour <= h.hour order by t.hour desc limit 1) as apy\nfrom    (select generate_series('2022-04-01 00:00', date_trunc('hour', now()), '1 hour') as hour) h\n)\n\nselect\n    r.hour,\n    r.apy as steth_yield,\n    r.apy * 100 as steth_yield_current\nfrom        lido_apy r\nwhere       r.hour >= now() - interval '{{days}} days'\norder by 1 DESC"}
{"prompt": "This query returns the total volume of trades on the Polygon DEX, broken down by volume of trades on the aggregator and the volume of trades on the DEX itself, for a given time interval.", "completion": " WITH dex_stats AS (\nSELECT \n    date_trunc('{{Time interval}}', block_time) as time,\n    SUM(usd_amount) AS dex_volume\nFROM dex.trades\nWHERE category = 'DEX'\nAND block_time > DATE_TRUNC('{{Time interval}}',now()) - interval '{{Trading Num Days}} days'\nGROUP BY time\n), \n\nagg_stats AS (\nSELECT\n    date_trunc('{{Time interval}}', block_time) as time,\n    SUM(usd_amount) AS agg_volume\nFROM dex.trades\nWHERE category = 'Aggregator'\nAND NOT ('TITAN' IN (token_a_symbol, token_b_symbol) AND date_trunc('day', block_time)='2021-06-16')\nAND block_time > DATE_TRUNC('{{Time interval}}',now()) - interval '{{Trading Num Days}} days'\nGROUP BY time\n)\n    \nSELECT \n    dexs.time, \n    SUM(dex_volume)-SUM(agg_volume) AS dex_volume, \n    SUM(agg_volume) AS agg_volume, \n    SUM(dex_volume) AS total_volume\nFROM dex_stats dexs\nLEFT JOIN agg_stats aggs ON dexs.time=aggs.time\nGROUP BY dexs.time"}
{"prompt": "This SQL query calculates the sum of ETH sold and bought on Uniswap Exchange in 2019, in USD.", "completion": " SELECT SUM(eth/1e18 * p.average)\nFROM (\n        (SELECT tx_hash,\n                eth_sold AS eth\n         FROM uniswap.\"Exchange_evt_TokenPurchase\")\n      UNION\n        (SELECT tx_hash,\n                eth_bought AS eth\n         FROM uniswap.\"Exchange_evt_EthPurchase\")) ether\nINNER JOIN ethereum.transactions tx ON ether.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" p ON date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'WETH'\nAND date_part('year', tx.block_time) = '2019'\n;"}
{"prompt": "This query returns the total number of Authereum wallets created each day.", "completion": " WITH wallet AS\n  (SELECT block_time AS creation_time,\n          block_number AS creation_block_number,\n          address\n   FROM ethereum.traces\n   WHERE \"from\" IN ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8',\n                    '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea',\n                    '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046')-- Authereum Wallet Factorys\n\n     AND TYPE = 'create'),\n     DATA AS\n  (SELECT date_trunc('day', creation_time) AS \"day\",\n          count(address) AS created_wallets\n   FROM wallet\n   GROUP BY 1)\nSELECT \"day\",\n       sum(created_wallets) OVER (\n                                  ORDER BY \"day\" ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS wallets\nFROM DATA"}
{"prompt": "This query returns the total amount of USD spent on buying domains in the secondary market, as well as the cumulative amount spent to date. It does this by looking at the ETH spent on each domain purchase and then converting that to USD using the average ETH/USD price for that week.", "completion": " WITH ens1 AS (SELECT date_trunc ('week', tx.block_time) date, SUM (tx.value/1e18) eth_spent, COUNT (r.evt_tx_hash) events\n                FROM ethereumnameservice.\"ENSRegistry_evt_Transfer\" r\n                LEFT JOIN ethereum.transactions tx\n                ON tx.hash = r.evt_tx_hash\n                GROUP BY 1),\n    price1 AS (SELECT date_trunc ('week', minute) date, AVG (price) avg_price_eth_usd\n                    FROM prices.layer1_usd_eth\n                    GROUP BY 1)\n\nSELECT ens1.date, ens1.date, (ens1.eth_spent * price1.avg_price_eth_usd) AS total_usd_spent,\n        SUM (ens1.eth_spent * price1.avg_price_eth_usd) \n        OVER (ORDER BY ens1.date) AS cumulative_usd_spend\nFROM ens1\nJOIN price1\nON ens1.date = price1.date"}
{"prompt": "This SQL query shows the total tokens burned for the 1inch project on a monthly basis. The query includes data from the ChiToken, GasToken2, and dex.trades tables.", "completion": " SELECT \n    date_trunc('month', block_time) AS time,\n    SUM(tr.value) as tokens\n    -- SUM(tr.value * (24000 - 6000) * tx.gas_price) / 1e18 as eth\n    -- -- SUM(tr.value * (24000 - 6000) * tx.gas_price * (\n    --     SELECT price FROM prices.layer1_usd p WHERE p.symbol = 'ETH' AND p.minute = date_trunc('minute', tr.block_time) LIMIT 1\n    -- )) / 1e18 as usd\nFROM (\n    SELECT value, evt_tx_hash as tx_hash, evt_block_time as block_time FROM chi.\"ChiToken_evt_Transfer\" WHERE \"to\" = '\\x0000000000000000000000000000000000000000' AND value > 0 UNION ALL\n    SELECT value, call_tx_hash as tx_hash, call_block_time as block_time FROM gastoken.\"GasToken2_call_free\" WHERE call_success AND value > 0 UNION ALL\n    SELECT value, call_tx_hash as tx_hash, call_block_time as block_time FROM gastoken.\"GasToken2_call_freeUpTo\" WHERE call_success AND value > 0 UNION ALL\n    SELECT value, call_tx_hash as tx_hash, call_block_time as block_time FROM gastoken.\"GasToken2_call_freeFrom\" WHERE call_success AND value > 0 UNION ALL\n    SELECT value, call_tx_hash as tx_hash, call_block_time as block_time FROM gastoken.\"GasToken2_call_freeFromUpTo\" WHERE call_success AND value > 0\n) tr\nWHERE tx_hash IN (SELECT tx_hash FROM dex.trades WHERE project = '1inch')\nGROUP BY 1\nORDER BY 1 DESC;\n"}
{"prompt": "This SQL query returns the total amount of funds deposited into Pool3 in each week, ordered from most recent to least recent, for the past 20 weeks.", "completion": " SELECT \ndate_trunc('week', block_time) week,\nsum(amount/1e18) FROM pooltogether_v2.\"Pool3_evt_SponsorshipDeposited\" s\nLEFT JOIN ethereum.\"transactions\" tx ON s.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 20"}
{"prompt": "This query returns the average price of MKR tokens auctioned for WETH, the average market price of MKR, and the average \"MKR discount\" (the difference between the market price and the DutchX price) for each day.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    avg(\"buyVolume\" / \"sellVolume\") as \"DutchX price\",\n    avg(mkr.average / eth.average) as \"Market price\",\n    (avg(mkr.average / eth.average) / avg(\"buyVolume\" / \"sellVolume\") - 1)*100 as \"MKR discount\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" mkr \n\nWHERE \"sellToken\" = '\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2' --mkr\nAND \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', mkr.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND mkr.symbol = 'MKR'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "This SQL query returns the number of unique users who have made a transaction on the 1inch platform each day.", "completion": " SELECT\n    date_trunc('day', tx.block_time) AS time,\n    COUNT(DISTINCT tx.from)\nFROM -- oneinch.\"OneInchExchange_evt_Swapped\" oi\n(\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v1_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v2_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v3_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v4_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v5_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v6_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minReturnAmount\" as \"toAmount\", \"fromTokenAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v7_call_swap\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minReturnAmount\" as \"toAmount\", \"fromTokenAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v8_call_swap\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minReturnAmount\" as \"toAmount\", \"fromTokenAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"OneInchExchange_call_swap\" WHERE call_success -- UNION ALL\n) oi\nLEFT JOIN ethereum.transactions tx on tx.hash = oi.tx_hash\nGROUP BY 1\nORDER BY 1 DESC;\n"}
{"prompt": "The 1inch Total Swaps query returns the total number of swaps made for the 1inch project.", "completion": " SELECT COUNT(*) as swaps\nFROM dex.trades\nWHERE project = '1inch'\n"}
{"prompt": "This query returns the top 10 holders of GNO tokens, as well as their GNO balances and the USD value of those balances. The data is sourced from the ERC20_evt_Transfer event on the GNO contract, and the USD prices are pulled from the prices.\"usd\" table.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    -tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address = '\\x6810e776880c02933d47db1b9fc05908e5386b96' -- GNO\nUNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\x6810e776880c02933d47db1b9fc05908e5386b96' --GNO\n),\n\ngno_price AS (\nSELECT\nminute,\nprice\nFROM prices.\"usd\"\nWHERE symbol = 'GNO'\nGROUP BY 1, 2\nORDER BY 1 desc\nLIMIT 1\n)\nSELECT address, sum(amount/1e18) as gno_balance, sum(amount/1e18 * p.price) as usd_value\nFROM transfers, gno_price p\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 10\n"}
{"prompt": "This SQL query calculates the total value of ERC20_evt_Transfer events that have occurred in the past 60 days for the contract with the address \"xd2877702675e6cEb975b4A1dFf9fb7BAF4C91ea9\". The value is calculated by summing the \"value\" field divided by 1e18.", "completion": " SELECT date_trunc('day', evt_block_time) as day,\nSUM(value/1e18)\nFROM erc20.\"ERC20_evt_Transfer\"\nWHERE evt_block_time > now() - interval '60 days'\nAND contract_address = '\\xd2877702675e6cEb975b4A1dFf9fb7BAF4C91ea9' -- luna contract address\nGROUP BY 1;"}
{"prompt": "Get the transaction hash, gas used, cumulative gas used, and gas from the ethereum.receipts and ethereum.traces tables where the type is 'call' and the value is 0. Limit the results to 10.", "completion": " SELECT \n    er.tx_hash,\n    et.gas_used, \n    cumulative_gas_used,\n    gas\nFROM ethereum.receipts er\nLEFT JOIN ethereum.traces et\n    ON et.tx_hash = er.tx_hash \nWHERE \"type\"='call' AND \"value\"=0\nLIMIT 10"}
{"prompt": "This query returns the number of tokens sold and bought on a given day, adjusted for different token types.", "completion": " select date_trunc('day', block_time) AS day, sum(tokens_sold/(case \nwhen sold_id = 0 then 1e18\nwhen sold_id = 1 then 1e6\nwhen sold_id = 2 then 1e6\nend)) tokens_sold_adjusted,\nsum(tokens_bought/(case \nwhen bought_id = 0 then 1e18\nwhen bought_id = 1 then 1e6\nwhen bought_id = 2 then 1e6\nend)) tokens_bought_adjusted from curvefi.\"compound_v2_evt_TokenExchangeUnderlying\" as cst\nLEFT JOIN ethereum.\"transactions\" tx ON cst.evt_tx_hash = tx.hash\ngroup by 1;"}
{"prompt": "This SQL query calculates the cumulative net supply of a given token over a period of 39 weeks. The net supply is calculated by subtracting the total amount of the token that has been redeemed from the total amount of the token that has been minted.", "completion": " with mint as (\n        SELECT distinct\n            date_trunc('week', block_time) as week,\n            token_symbol,\n            sum(\"mint_amount_usd\") over (partition by token_symbol order by date_trunc('week', block_time)) as cumulative_mint\n        FROM dune_user_generated.\"compound_view_mint\"\n        WHERE block_time > now() - interval '39 weeks' \n        ORDER BY 1,2\n    ), redeem as (\n        SELECT distinct\n            date_trunc('week', block_time) as week,\n            token_symbol,\n            sum(\"redeem_amount_usd\") over (partition by token_symbol order by date_trunc('week', block_time)) as cumulative_redeem\n        FROM dune_user_generated.\"compound_view_redeem\"\n        WHERE block_time > now() - interval '39 weeks' \n        ORDER BY 1,2\n    )\nselect \n    m.week,\n    m.token_symbol,\n    m.cumulative_mint - r.cumulative_redeem as cumulative_net_supply\nfrom mint m join redeem r \n    on m.week = r.week\n    and m.token_symbol = r.token_symbol\norder by 1,2\n\n\n\n\n-- See data table examples:\n--SELECT * FROM dune_user_generated.\"compound_view_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_borrow\" when format is decided\n--SELECT * FROM dune_user_generated.\"compound_view_repay_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_repay_borrow\" when format is decided"}
{"prompt": "This query returns the total amount of ETH bought on Uniswap for each month.", "completion": " SELECT date_trunc('month', tx.block_time) AS month,\n       SUM(eth_bought/1e18) AS ETHbought\nFROM uniswap.\"Exchange_evt_EthPurchase\" u\nLEFT JOIN ethereum.transactions tx\nON u.tx_Hash = tx.hash\nGROUP BY 1;\n\n\n\n\n\n\n\n\n\n"}
{"prompt": "What is the sum of all USD amounts from trades that have a fill status of true and a block time that is within the last 24 hours?", "completion": " select sum(usd_amount)\nfrom hashflow.trades\nwhere fill_status is true\n    and block_time >= now() - interval '24h'"}
{"prompt": "This query returns the total ETH volume traded on the DutchX exchange for each day, where KNC was auctioned for WETH. The data is sourced from the Ethereum blockchain, as well as from the Coincap API (for ETH and KNC prices).", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    sum((\"sellVolume\" / 1e18 * knc.average) / eth.average) as ethvolume \n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" knc \n\nWHERE \"sellToken\" = '\\xdd974d5c2e2928dea5f71b9825b8b646686bd200' --knc\nAND \"buyToken\" =  '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', knc.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND knc.symbol = 'KNC'\nAND tx.success = true\n\nGROUP BY 1"}
{"prompt": "This query returns the total amount of ETH burned for each day starting from August 5th, 2021. TheETH burned is cumulative, so it includes all ETH burned from August 5th up to the current day.", "completion": " SELECT date_trunc('day', time) AS \"Date\",\nSUM(gas_used*base_fee_per_gas)/1e18 AS \"Burned ETH\",\nSUM(SUM(gas_used*base_fee_per_gas)/1e18) OVER (ORDER BY date_trunc('day', time) RANGE UNBOUNDED PRECEDING) AS \"Cumulative Burned ETH\"\nFROM ethereum.\"blocks\"\nWHERE time >= '2021-08-05'\nAND time < date_trunc('day', NOW())\nGROUP BY \"Date\""}
{"prompt": "This query counts the number of distinct batches that have been solved each day.", "completion": " --counts only distinct batches so it only counts one batch even if there were multiple solution submissions within one batch. \n\nSELECT\ndate_trunc('day', block_time) as day,\nCOUNT (DISTINCT \"batchId\") as \"#batches\"\nFROM gnosis_protocol.\"BatchExchange_call_submitSolution\" tokens\nJOIN ethereum.transactions \n    ON tokens.call_tx_hash = transactions.hash\nWHERE call_success IN (true)\nGROUP BY 1\nORDER BY 1 desc;"}
{"prompt": "This SQL query calculates the total amount of DAI that has been drawn from various sources. The query includes a sum of all the DAI that has been drawn from the \"ScdMcdMigration_call_swapSaiToDai\" table, the \"PROXY_ACTIONS_call_draw\" table, the \"PROXY_ACTIONS_call_lockETHAndDraw\" table, the \"PROXY_ACTIONS_call_lockGemAndDraw\" table, the \"PROXY_ACTIONS_call_openLockETHAndDraw\" table, the \"PROXY_ACTIONS_call_openLockGNTAndDraw\" table, and the \"PROXY_ACTIONS_call_openLockGemAndDraw\" table.", "completion": " \nSELECT SUM(wad/1e18) FROM\n(\n\n(SELECT SUM(wad) AS \"wad\" \nFROM makermcd.\"ScdMcdMigration_call_swapSaiToDai\"\nWHERE call_success = 'true')\nUNION\n\n(SELECT SUM(\"wad\") AS wad FROM makermcd.\"PROXY_ACTIONS_call_draw\"\nWHERE call_success = true)\nUNION\n\n(SELECT SUM(\"wadD\") AS wad FROM makermcd.\"PROXY_ACTIONS_call_lockETHAndDraw\"\nWHERE call_success = true)\nUNION\n\n\n(SELECT SUM(\"wadD\") AS wad FROM makermcd.\"PROXY_ACTIONS_call_lockGemAndDraw\"\nWHERE call_success = true)\nUNION\n\n\n(SELECT SUM(\"wadD\") AS wad FROM makermcd.\"PROXY_ACTIONS_call_openLockETHAndDraw\"\nWHERE call_success = true)\nUNION\n\n\n(SELECT SUM(\"wadD\") AS wad FROM makermcd.\"PROXY_ACTIONS_call_openLockGNTAndDraw\"\nWHERE call_success = true)\nUNION\n\n\n(SELECT SUM(\"wadD\") AS wad FROM makermcd.\"PROXY_ACTIONS_call_openLockGemAndDraw\"\nWHERE call_success = true)\n\n) AS draw"}
{"prompt": "This query calculates the average gas cost for Loopring transactions over the last 24 hours.", "completion": " WITH loopring_transactions_all AS(\nSELECT call_tx_hash as tx_hash, c.\"blockSize\" as block_size\nFROM loopring.\"DEXBetaV1_call_commitBlock\" c\nUNION\nSELECT call_tx_hash as tx_hash, 0 as block_size\nFROM loopring.\"DEXBetaV1_call_verifyBlocks\"\n),\nloopring_transactions AS(\nSELECT l.*, tx.block_time as block_time, tx.gas_used as gas_used\nFROM loopring_transactions_all l\nINNER JOIN ethereum.transactions tx ON tx.hash = l.tx_hash\nWHERE tx.block_time > now() - interval '1 days'\n)\nSELECT sum(b.gas_used) / sum(b.block_size) as \"average cost\"\nFROM loopring_transactions b"}
{"prompt": "This SQL query calculates the total gas fees paid in ETH over the last 365 days.", "completion": " WITH\n  release AS (\n    SELECT\n      CASE\n        WHEN a.gas_used = '18446744073709552000' THEN '2500000'\n        ELSE a.gas_used\n      END AS gas_used,\n      a.gas_price as gas_price\n    FROM\n      flashbots.mev_summary a\n      LEFT JOIN ethereum.transactions b ON b.hash = a.transaction_hash\n    WHERE\n      a.block_timestamp > NOW() - interval 365 day\n  )\nSELECT\n  SUM(gas_used * gas_price / 1e18) AS `Gas Fees (\u039e)`\nFROM\n  release"}
{"prompt": "This query returns the number of distinct DAI tokens sent each month since January 1st, 2019.", "completion": " SELECT date_trunc('month', tx.block_time) AS MONTH,\n       COUNT(DISTINCT src)\nFROM maker.\"SAI_evt_Transfer\" m\nLEFT JOIN ethereum.transactions tx ON m.tx_hash = tx.hash\nWHERE date_trunc('year', tx.block_time) >= '1/1/2019'\n  AND block_time < date_trunc('month', CURRENT_DATE)::date\nGROUP BY 1"}
{"prompt": "This query returns the number of holders for a given contract address who have a balance greater than 0.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    -tr.value AS amount,\n    contract_address\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address =  '\\xc00e94cb662c3520282e6f5717214004a7f26888'\nUNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount,\n      contract_address\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     where contract_address = '\\xc00e94cb662c3520282e6f5717214004a7f26888'\n),\ntransferAmounts AS (\n    SELECT address,\n    \n    sum(amount)/1e18 as holdings FROM transfers \n    \n    GROUP BY 1\n    ORDER BY 2 DESC\n)\n\nSELECT \nCOUNT(DISTINCT(address)) as holders\nFROM transferAmounts\nWHERE holdings > 0\n;"}
{"prompt": "The following SQL query calculates the reputation of different tokens and ETH in the dxDAO. The reputation is calculated based on the amount of tokens locked, the duration of the lock, and the amount of ETH in the lock. The reputation of GEN is calculated based on the amount of GEN sold in the auction.", "completion": " WITH tokens as (SELECT\ntokenAmount * duration * (ETHamount / tokenAmount) as tokenReputation\nFROM lockToken\nJOIN lock \nON lockingID\nGROUP BY _token\n),\n\nGENsold as (SELECT\nSUM(amount) as sold\nFROM auction\nWHERE sell = GEN\nbuy = reputation\n)\n\nSELECT \n\nSUM(m._amount) * 500000 as MGNreputation,\nSUM(e.amount) * duration * 80000 as ETHreputation,\nSUM(tokens.tokenReputation) * 300000 as tokenReputation\nSUM(GENsold.sold) * 10000 as GENreputation\n\nFROM DxLockMgnForRep m, DxLockEth4Rep e, tokens\n"}
{"prompt": "This SQL query returns the number of unique buyers and the total amount of ETH bought on Uniswap for each day over the past week.", "completion": " WITH tx AS (SELECT hash, block_time FROM ethereum.transactions\nWHERE block_time > now() - interval '7 days'\n) --We limit the transactions first to avoid joining with the full transactions table\n\nSELECT  date_trunc('day', tx.block_time),\n        COUNT (DISTINCT buyer),\n        SUM(eth_bought / 1e18)\nFROM uniswap.\"Exchange_evt_EthPurchase\" p\nLEFT JOIN tx\nON p.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns a list of the top 25 addresses that hold the ERC20 token BNB, sorted by the amount of BNB they hold. The query excludes any addresses that are known BNB burn addresses.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    -tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address = '\\xB8c77482e45F1F44dE1745F52C74426C631bDD52' -- BNB ERC20\nUNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\xB8c77482e45F1F44dE1745F52C74426C631bDD52' --BNB ERC20\n)\n\nSELECT address, sum(amount)/1e18 as bnb_holdings\nFROM transfers\nWHERE address != '\\x38b661e9df2cc4a7570618aa6645319d6bdf2f46' \nAND address != '\\x00d41f0c9a94edbfac0cc0b3b02bd1f14a5ee237' \nAND address != '\\xbbab93283b0660b741f8b4d9cb03ef752cd1872c'\nAND address != '\\xebdce3b3775c5683c96ca754e4130ea5175de85e'\n-- (BNB Burn Address 1 & 2)\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 25\n"}
{"prompt": "This query returns the total ETH stored in Authereum contracts, accumulated weekly over time.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8', '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea', '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046') -- Authereum Wallet Factorys\n\tand type = 'create'\n),\nperweek AS (\nSELECT \"week\", Sum(amount) as amount\nFROM (\n    SELECT date_trunc('week', \"block_time\") AS \"week\", \"from\" AS address, -value AS amount\n     FROM ethereum.traces\n     WHERE \"from\" IN (SELECT address FROM wallets)\n     AND tx_success = TRUE\n     AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n     and error is null  -- to make the db use an index\nUNION ALL\n    SELECT date_trunc('week', \"block_time\") AS \"week\", \"to\" AS address, value AS amount\n     FROM ethereum.traces\n     WHERE \"to\" IN (SELECT address FROM wallets )\n     AND tx_success = TRUE\n     AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n     and error is null  -- to make the db use an index\n) t\nGROUP BY 1\nORDER BY 1 asc\n\n)\nSELECT \"week\",  sum(amount/1e18) over (order by \"week\" asc rows between unbounded preceding and current row) as eth_balance FROM perweek"}
{"prompt": "This query returns the sum of ETH and token volumes traded on Uniswap, in USD, for each day. It also returns the average price of ETH for each day.", "completion": " SELECT\n    date_trunc('day', block_time) AS ddate,\n    sum(eth_amount) AS eth_volume,\n    sum(token_amount) AS token_volume,\n    sum(eth_amount * p.average) AS usd_volume\nFROM\n    (\n        SELECT \n            tx.block_time AS block_time,\n            eth_sold / 10^18 AS eth_amount,\n            tokens_bought / 10^18 AS token_amount\n        FROM\n            uniswap.\"MKRExchange_evt_TokenPurchase\" tp,\n            ethereum.transactions tx\n        WHERE tp.tx_hash = tx.hash\n        AND success = true\n    UNION\n        SELECT \n            tx.block_time AS block_time,\n            eth_bought / 10^18 AS eth_amount,\n            tokens_sold / 10^18 AS token_amount\n        FROM\n            uniswap.\"MKRExchange_evt_EthPurchase\" tp,\n            ethereum.transactions tx\n        WHERE tp.tx_hash = tx.hash\n        AND success = true\n    ) AS foo, coincap.\"tokens/usd\" p\nWHERE \nAND p.symbol = 'ETH'\nGROUP BY ddate\nORDER BY ddate\n"}
{"prompt": "This SQL query returns the number of Bloom Metatransactions that occurred each day within a three day period 139 days ago until 142 days ago.", "completion": " WITH tx AS\n  (SELECT hash,\n          block_time\n   FROM ethereum.\"transactions\"\n   WHERE block_time < now() - interval '139 days'\n     AND block_time > now() - interval '142 days' )\nSELECT date_trunc('day', tx.block_time)\nFROM bloom.\"AttestationLogic_call_attestFor\" AL\nINNER JOIN tx ON AL.tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns a list of wallets and their corresponding balances. The wallets are those that have been involved in a successful \"delegatecall\" transaction on the Ethereum blockchain, and the balances are the sum of all incoming and outgoing transactions for each wallet. Only wallets with a positive balance are included in the results.", "completion": " WITH wallets as (\n    select et.\"from\" as address\n    from gnosis_safe.\"Safev1.0.0_call_setup\" gs\n    join ethereum.traces et \n    on gs.call_tx_hash = et.tx_hash \n    where et.tx_success = True\n    and et.call_type = 'delegatecall'\n)\nSELECT _wallet::text as wallet, SUM(amount) as balance\nFROM (\n    SELECT \"from\" as _wallet, -value/1e18 as amount\n     FROM ethereum.traces\n     WHERE \"from\" IN (SELECT address from wallets)\n     AND tx_success = true\n     AND error IS NULL\n    UNION ALL\n    SELECT \"to\" as _wallet, value/1e18 as amount\n     FROM ethereum.traces\n     WHERE \"to\" IN (SELECT address from wallets)\n     AND tx_success = true\n     AND error IS NULL\n) t\nGROUP BY wallet\nHAVING SUM(amount) > 0\nORDER BY balance desc;"}
{"prompt": "This SQL query returns the price of ETH for each minute in the last 14 days.", "completion": " \nSELECT minute, price \nFROM prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\nWHERE minute < date_trunc('day', NOW())\n  AND minute >= date_trunc('day', NOW()) - interval '14 day'\n"}
{"prompt": "This SQL query returns the number of distinct users that minted SAI from a CDP in the past 10 weeks.", "completion": " SELECT date_trunc('week', tx.block_time) as Week,\nCOUNT(DISTINCT guy)\nFROM maker.\"SAI_evt_Mint\" m\nLEFT JOIN (SELECT hash,\n             block_time\n      FROM ethereum.transactions\n      WHERE block_time > now() - interval '10 weeks'\n        AND block_time < date_trunc('week', NOW())) tx\n        ON m.evt_tx_hash = tx.hash\nGROUP BY 1\nLIMIT 10;"}
{"prompt": "This query returns the total MCD revenue for each day, as well as the cumulative MCD revenue up to that day, for the past 10 days.", "completion": " SELECT \ndate_trunc('day', block_time) as day,\nsum(e.value/1e18*p.price) as MCD_rev,\nsum(sum(e.value/1e18*p.price)) over (order by date_trunc('day', block_time)) as cumulative_MCD_rev\nFROM erc20.\"ERC20_evt_Transfer\" e\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nWHERE e.\"to\" = '\\xdfe0fb1be2a52cdbf8fb962d5701d7fd0902db9f'\nAND p.symbol = 'MKR'\nGROUP BY 1 \nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This query finds the balance of MGN tokens for each address. The balance is calculated by subtracting the amount of tokens sent from the amount of tokens received. The results are ordered by balance, with the addresses having the largest balances appearing first.", "completion": " WITH outbound AS\n  (SELECT a.\"from\",\n          SUM(a.value/1e18) amt\n   FROM dxdao.\"TokenFRTProxy_evt_Transfer\" a LEFT JOIN ethereum.transactions b -- Replace with transfer event for relevant project\n   ON a.tx_Hash = b.hash\n   WHERE success = true\n   GROUP BY 1),\n     inbound AS\n  (SELECT a.\"to\",\n          SUM(a.value/1e18) amt\n    FROM dxdao.\"TokenFRTProxy_evt_Transfer\" a LEFT JOIN ethereum.transactions b -- Replace with transfer event for relevant project\n   ON a.tx_Hash = b.hash\n   WHERE success = true\n   GROUP BY 1)\nSELECT inbound.\"to\" as address,\n       CASE\n           WHEN outbound.amt IS NULL THEN inbound.amt\n           ELSE inbound.amt - outbound.amt\n       END AS balance\nFROM inbound\nLEFT JOIN outbound\nON outbound.\"from\" = inbound.\"to\"\nORDER BY balance DESC;"}
{"prompt": "This query will return the total amount of DAI tokens that have been borrowed on the Compound platform.", "completion": " SELECT SUM(amount / 1e18) --Here we get the amount of tokens borrowed (most amounts needs to be divided by 1e18)\nFROM compound.\"MoneyMarket_evt_BorrowTaken\" --Browse the decoded smart contract data in the window on your left\n\nWHERE asset = '\\x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' --Filtering for the DAI address. Note that 0 is replaced with \\"}
{"prompt": "This SQL query returns the total ETH volume auctioned for RDN on the DutchX exchange for each day.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    sum(\"sellVolume\" / 1e18) as ethvolume \n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" rdn \n\nWHERE \"sellToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth \nAND \"buyToken\" = '\\x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6' --rdn\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', rdn.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND rdn.symbol = 'RDN'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "This query returns the monthly trading volume for Uniswap in USD. It includes both purchases of ETH and tokens with ETH. The data is taken from the last year up until the current month.", "completion": " SELECT date_trunc('month', ether.block_time) as Date,\n       SUM(eth/1e18 * p.price) as \"USD volume\"\nFROM ((SELECT evt_tx_hash, eth_sold AS eth, block_time  FROM uniswap.\"Exchange_evt_TokenPurchase\" pur\n        LEFT JOIN (SELECT hash,\n             block_time\n      FROM ethereum.transactions\n      WHERE block_time > now() - interval '1 year'\n        AND block_time < date_trunc('month', NOW())) tx\n        ON pur.evt_tx_hash = tx.hash)\n      UNION\n        (SELECT evt_tx_hash, eth_bought AS eth, block_time  FROM uniswap.\"Exchange_evt_EthPurchase\" pur\n        LEFT JOIN\n            (SELECT hash, block_time FROM ethereum.transactions\n            WHERE block_time > now() - interval '1 year'\n            AND block_time < date_trunc('month', NOW())) tx\n        ON pur.evt_tx_hash = tx.hash)\n        ) ether\nLEFT JOIN prices.usd p ON p.minute = date_trunc('minute', ether.block_time)\nWHERE p.symbol = 'ETH'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This query returns the top traders for the 1inch project, including the number of trades and the volume traded.", "completion": " SELECT\n    ROW_NUMBER() OVER (ORDER BY 4 DESC),\n    '<a href=\"https://etherscan.io/address/0x' || ENCODE(tx_from, 'hex') || '\">0x' || ENCODE(tx_from, 'hex') || '</a>' as sender,\n    COUNT(*) as trades,\n    SUM(usd_amount) AS volume\nFROM dex.trades WHERE project = '1inch'\n-- (\n--     SELECT to_token, from_token, to_amount, from_amount, tx_hash, block_time, from_usd, to_usd, tx_from FROM oneinch.swaps UNION All\n--     SELECT to_token, from_token, to_amount, from_amount, tx_hash, block_time, from_usd, to_usd, tx_from FROM onesplit.swaps\n--     WHERE tx_hash NOT IN (SELECT tx_hash FROM oneinch.swaps)\n-- ) oi\nGROUP BY 2\nORDER BY 4 DESC NULLS LAST\n"}
{"prompt": "This SQL query returns the sum of all amounts for a given account from 2019-05-01 onwards. The amounts are calculated as either positive or negative values, depending on whether the account was the sender or receiver in each transaction. Only successful transactions are included, and transactions that used the 'delegatecall', 'callcode', or 'staticcall' methods are excluded.", "completion": " SELECT sum(amount)\nFROM\n  (SELECT block_time, -value / 1e18 AS amount\n   FROM ethereum.traces et\n   WHERE \"from\" = '\\xfD61352232157815cF7B71045557192Bf0CE1884'\n     AND block_time >= '2019-05-01'\n     AND success\n     AND (call_type NOT IN ('delegatecall',\n                            'callcode',\n                            'staticcall')\n          OR call_type IS NULL)\n   UNION SELECT block_time,\n                value / 1e18 AS amount\n   FROM ethereum.traces et\n   WHERE \"to\" = '\\xfD61352232157815cF7B71045557192Bf0CE1884'\n     AND block_time >= '2019-05-01'\n     AND success\n     AND (call_type NOT IN ('delegatecall',\n                            'callcode',\n                            'staticcall')\n          OR call_type IS NULL)) a"}
{"prompt": "This query returns the following fields for all events related to the contract address specified: action, _from, _to, usdc_value, fair_value, block_number, block_time, and evt_tx_hash.", "completion": " select\r\n\taction,\r\n\t\"_from\",\r\n\t\"_to\",\r\n\tusdc_value,\r\n\tfair_value,\r\n\tblock_number,\r\n\tblock_time,\r\n\tevt_tx_hash\r\nfrom\r\n\t(\r\n\tselect\r\n\t\t'Approval' as action,\r\n\t\tcontract_address,\r\n\t\tevt_tx_hash,\r\n\t\tevt_index,\r\n\t\t\"owner\" as \"_from\",\r\n\t\t\"spender\" as \"_to\",\r\n\t\t0 as usdc_value,\r\n\t\t\"value\" / 1e18 as fair_value\r\n\tfrom\r\n\t\tfairmint.\"DAT_evt_Approval\"\r\n\tunion\r\n\tselect\r\n\t\t'Buy' as action,\r\n\t\tcontract_address,\r\n\t\tevt_tx_hash,\r\n\t\tevt_index,\r\n\t\t\"_from\",\r\n\t\t\"_to\",\r\n\t\t\"_currencyValue\" / 1e6 as usdc_value,\r\n\t\t\"_fairValue\" / 1e18 as fair_value\r\n\tfrom\r\n\t\tfairmint.\"DAT_evt_Buy\"\r\n\tunion\r\n\tselect\r\n\t\t'Pay' as action,\r\n\t\tcontract_address,\r\n\t\tevt_tx_hash,\r\n\t\tevt_index,\r\n\t\t\"_from\",\r\n\t\t\"_to\",\r\n\t\t\"_currencyValue\" / 1e6 as usdc_value,\r\n\t\t\"_fairValue\" / 1e18 as fair_value\r\n\tfrom\r\n\t\tfairmint.\"DAT_evt_Pay\"\r\n\tunion\r\n\tselect\r\n\t\t'Sell' as action,\r\n\t\tcontract_address,\r\n\t\tevt_tx_hash,\r\n\t\tevt_index,\r\n\t\t\"_from\",\r\n\t\t\"_to\",\r\n\t\t\"_currencyValue\" / 1e6 as usdc_value,\r\n\t\t\"_fairValue\" / 1e18 as fair_value\r\n\tfrom\r\n\t\tfairmint.\"DAT_evt_Sell\"\r\n\tunion\r\n\tselect\r\n\t\t'Transfer' as action,\r\n\t\tcontract_address,\r\n\t\tevt_tx_hash,\r\n\t\tevt_index,\r\n\t\t\"from\" as \"_from\",\r\n\t\t\"to\" as \"_to\",\r\n\t\t0 as usdc_value,\r\n\t\t\"value\" / 1e18 as fair_value\r\n\tfrom\r\n\t\tfairmint.\"DAT_evt_Transfer\"\r\n\t) as events\t\r\ninner join ethereum.transactions tx on\r\n\tevt_tx_hash = tx.hash\r\nwhere\r\n\tcontract_address = '\\x{{ contract_address }}'\r\norder by\r\n\tblock_number desc,\r\n\tevt_index desc"}
{"prompt": "This query returns the total gas used for various types of Ethereum operations per month. The types of operations include deploying contracts, transferring ETH, transferring tokens, and other miscellaneous operations. The data is aggregated by month.", "completion": " SELECT\n    date_trunc('month', block_time) as time,\n    SUM(CASE WHEN data IS NOT NULL AND \"to\" IS NULL THEN gas_used ELSE 0 END) as deploy_operations,\n    SUM(CASE WHEN data IS NULL THEN gas_used ELSE 0 END) as eth_transfers,\n    SUM(CASE WHEN substring(data from 1 for 4) IN ('\\xa9059cbb', '\\x095ea7b3') THEN gas_used ELSE 0 END) as token_transfers,\n    SUM(CASE WHEN NOT(data IS NULL) AND NOT(substring(data from 1 for 4) IN ('\\xa9059cbb', '\\x095ea7b3')) AND NOT(data IS NULL AND \"to\" IS NULL) THEN gas_used ELSE 0 END) as other_operations\nFROM ethereum.transactions\n--WHERE block_time > '2020-01-01'\nGROUP BY 1\nORDER BY 1 DESC\n"}
{"prompt": "This SQL query returns the date and account of the first minting event for each account on the Compound network, starting from October 14th, 2020.", "completion": " SELECT min(evt_block_time) AS date,\n       minter AS account\nFROM compound_v2.\"cErc20_evt_Mint\"\nWHERE evt_block_time >= '2020-10-14'\nGROUP BY 2\nORDER BY 1"}
{"prompt": "This query returns the total volume of WETH pairs traded on the DutchX exchange for each day, in USD.", "completion": "  WITH symbols (symbol, asset) AS (VALUES                    \n     ('WETH', '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'),\n     ('RDN', '\\x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6'), \n     ('OMG', '\\xd26114cd6ee289accf82350c8d8487fedb8a0c07'), \n     ('KNC', '\\xdd974d5c2e2928dea5f71b9825b8b646686bd200'), \n     ('GEN', '\\x543ff227f64aa17ea132bf9886cab5db55dcaddf'), \n     ('MKR', '\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'), \n     ('DAI', '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'), \n     ('GNO', '\\x6810e776880c02933d47db1b9fc05908e5386b96'), \n     ('BNT', '\\x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c'), \n     ('ZRX', '\\xe41d2489571d322189246dafa5ebde1f4699f498'), \n     ('SNT', '\\x744d70fdbe2ba4cf95131626614a1763df805b9e'), \n     ('REQ', '\\x8f8221afbb33998d8584a2b05749ba73c37a938a'), \n     ('ST', '\\x2c4e8f2d746113d0696ce89b35f0d8bf88e0aeca'),  \n     ('LRC', '\\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'), \n     ('OCEAN', '\\x985dd3d42de1e256d09e1c10f112bccb8015ad41'),\n     ('BAT', '\\x0d8775f648430679a709e98d2b0cb6250d2887ef'), \n     ('REP', '\\x1985365e9f78359a9b6ad760e32412f4a445e862'), \n     ('LOOM', '\\xa4e8c3ec456107ea67d3075bf9e3df3a75823db0'),\n     ('MANA', '\\x0f5d2fb29fb7d3cfee444a200298f468908cc942'),\n     ('ANT', '\\x960b236a07cf122663c4303350609a66a7b288c0'), \n     ('LINK', '\\x514910771af9ca656af840dff83e8264ecf986ca'),\n     ('NMR', '\\x1776e1f26f98b1a5df9cd347953a26dd3cb46671'), \n     ('POLY', '\\x9992ec3cf6a55b00978cddf2b27bc6882d88d1ec'),\n     ('BLZ', '\\x5732046a883704404f284ce41ffadd5b007fd668'), \n     ('DNT', '\\x0abdace70d3790235af448c88547603b945604ea')  \n )\nSELECT\n    tx.block_time::date,\n    symbols.symbol,\n    SUM(cleared.\"buyVolume\"/1e18*price.average)\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" cleared\nINNER JOIN ethereum.transactions tx ON cleared.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = price.time AND cleared.\"buyToken\" = price.asset\nINNER JOIN symbols ON symbols.asset::bytea = cleared.\"sellToken\"\nWHERE cleared.\"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nGROUP BY 1, 2\n;"}
{"prompt": "The following SQL query returns the total number of transactions made with Authereum contracts, accumulated daily over time.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8', '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea', '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046') -- Authereum Wallet Factories\n\tand type = 'create'\n),\ndata as (select date_trunc('day', et.\"block_time\") AS \"day\", count(distinct et.tx_hash) as transactions\nfrom ethereum.traces et\njoin wallets \n    on wallets.address = et.\"from\"\nwhere et.\"to\" in ('\\x2e1723d1dfa2947f0d08d5c5d214b71def4f951f','\\x79fee076b1bcd4054dff0b4364c26899492198dc','\\x211deb5c0a28a213fcf5976ac22c70ff96b9004c','\\x185c46c8d3ef5155f3678e69c827db7a2116a6cd','\\xd8cab604bdd8cbb7c3eb0c26f7dc3abffb005a92','\\xae1710e83211decb356f031a9346a24ef55055e0') -- AuthereumAccount versions\n    and call_type = 'delegatecall'\n    and tx_success = TRUE\n    and error is null\n    and substring(\"input\" for 4) in ('\\x26aa4655', '\\xd5553b88') -- executeMultipleAuthKeyMetaTransactions and executeMultipleLoginKeyMetaTransactions\ngroup by 1\n)\nselect \"day\", sum(transactions) over (order by \"day\" asc rows between unbounded preceding and current row) as transactions_running_total\nfrom data"}
{"prompt": "The following SQL query will return the from_user and to_user data for the cErc20_evt_Transfer and cEther_evt_Transfer events, limited to 100 results.", "completion": " with user_conversion as (\n    select \n        cast(\"from\" as varchar) as from_user,\n        cast(\"to\" as varchar) as to_user,\n        *\n    from compound_v2.\"cErc20_evt_Transfer\"\n    UNION\n    select \n        cast(\"from\" as varchar) as from_user,\n        cast(\"to\" as varchar) as to_user,\n        *\n    from compound_v2.\"cEther_evt_Transfer\"\n    )\nselect \n    *\nfrom user_conversion\nwhere from_user = '\\x009b6817807c332b9445f5c9cf2ac94631fe876e'\n    or to_user = '\\x009b6817807c332b9445f5c9cf2ac94631fe876e'\nlimit 100"}
{"prompt": "This query returns the total amount of ETH sent to smart contracts, broken down by hour, for the top 10 hours.", "completion": " WITH compound AS (\n\nSELECT address FROM ethereum.traces tr\nON tx.to = tr.address\nWHERE tr.type = 'create'\nAND tr.tx_success = 'true'\n)\n\nSELECT\ndate_trunc('hour', tx.block_time),\nSUM(tx.value/1e18) AS \"ETH sent to smart contract\"\nFROM ethereum.transactions tx \nINNER JOIN ethereum.traces tr\nON tx.to = tr.address\nWHERE tr.type = 'create'\nAND tr.tx_success = 'true'\nAND tx.success = 'true'\nAND tx.value > 0\nGROUP BY 1\nORDER BY 1\nLIMIT 10"}
{"prompt": "This query returns the event transaction hash, account number, and account owner for the first 10 entries in the \"SoloMargin_evt_LogDeposit\" table from dydx.", "completion": " SELECT\nevt_tx_hash,\naccountNumber,\naccountOwner\nFROM dydx.\"SoloMargin_evt_LogDeposit\"\nLIMIT 10 "}
{"prompt": "This SQL query returns the total deposits and winnings for the past 10 weeks for the PoolTogether pool.", "completion": " WITH deposit AS \n(SELECT \ndate_trunc('week', block_time) week,\nsum(\"amount\"/1e18) deposits\nFROM pooltogether_v2.\"Pool3_evt_Deposited\" s\nLEFT JOIN ethereum.\"transactions\" tx ON s.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10),\n\nwinnings AS \n(\nSELECT \ndate_trunc('week', block_time) week,\nsum(\"winnings\"/1e18) winnings\nFROM pooltogether_v2.\"Pool3_evt_Rewarded\" s\nLEFT JOIN ethereum.\"transactions\" tx ON s.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n)\n\nSELECT deposit.\"week\",sum(\"winnings\") as winnings, sum(\"deposits\") as deposits \nFROM deposit \nLEFT JOIN winnings w ON deposit.week = w.week\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10\n\n"}
{"prompt": "The query returns the total number of trading pairs on Binance Chain.", "completion": " select count(*) from pairs"}
{"prompt": "This SQL query calculates the total amount of OWL tokens that have been burnt.", "completion": " SELECT\nSUM (tokens.\"value\"/10^18) as amount_OWL_collected\nFROM gnosis.\"OWLProxy_evt_Transfer\" tokens\nINNER JOIN gnosis_protocol.\"BatchExchange_call_submitSolution\" dfusion\n    ON dfusion.call_tx_hash = tokens.evt_tx_hash\nWHERE tokens.\"to\"='\\x0000000000000000000000000000000000000000';"}
{"prompt": "This query returns the number of new safes for teams created in the last 30 days.", "completion": " SELECT count(*) as \"Safes for Teams created (Last 30 days)\"\nFROM gnosis_safe.\"Safev1.0.0_call_setup\" safe\nINNER JOIN (SELECT hash, block_time FROM ethereum.transactions tx\n                WHERE tx.block_time > now() - interval '30 days') tx\nON safe.call_tx_hash = tx.hash\n    WHERE array_length(_owners, 1) < 3 or array_length(_owners, 1) > 4\nLIMIT 1000"}
{"prompt": "This SQL query returns the number of unique users per month on the 1inch exchange.", "completion": " SELECT\n    date_trunc('month', tx.block_time) AS time,\n    COUNT(DISTINCT tx.from)\nFROM -- oneinch.\"OneInchExchange_evt_Swapped\" oi\n(\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v1_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v2_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v3_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v4_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v5_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minTokensAmount\" as \"toAmount\", \"tokensAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v6_call_aggregate\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minReturnAmount\" as \"toAmount\", \"fromTokenAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v7_call_swap\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minReturnAmount\" as \"toAmount\", \"fromTokenAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"exchange_v8_call_swap\" WHERE call_success UNION ALL\n    SELECT \"toToken\", \"fromToken\", \"minReturnAmount\" as \"toAmount\", \"fromTokenAmount\" as \"fromAmount\", \"call_tx_hash\" as \"tx_hash\" FROM oneinch.\"OneInchExchange_call_swap\" WHERE call_success -- UNION ALL\n) oi\nLEFT JOIN ethereum.transactions tx on tx.hash = oi.tx_hash\nGROUP BY 1\nORDER BY 1 DESC;\n"}
{"prompt": "This SQL query returns the total gas used for all Ethereum transactions, grouped by day, for the past 10 days.", "completion": " SELECT\ndate_trunc('day', t.block_time),\nsum(cumulative_gas_used)\nFROM ethereum.\"transactions\" t\nLEFT JOIN ethereum.\"receipts\" r ON t.tx_hash = r.tx_hash\nGROUP BY 1\nORDER BY 1\nLIMIT 10"}
{"prompt": "This SQL query finds the net DAI minted by day, by subtracting the DAI burned from the DAI minted each day.", "completion": " -- Find the net DAI minted by day (DAI minted per day - DAI burned per day)\n\n\nWITH mint AS (\n    SELECT sum(mint.wad / 1e18) AS minted, date_trunc('day',tx.block_time) AS DayTime\n    FROM maker.\"SAI_evt_Mint\" mint \n    INNER JOIN ethereum.transactions tx\n    ON mint.tx_hash = tx.hash\n    GROUP BY 2\n), burn AS (\n    SELECT sum(burn.wad / 1e18) AS burned, date_trunc('day', tx.block_time) AS DayTime\n    FROM maker.\"SAI_evt_Burn\" burn \n    INNER JOIN ethereum.transactions tx\n    ON burn.tx_hash = tx.hash\n    GROUP BY 2\n)\n\nSELECT mint.daytime, mint.minted, burn.burned, mint.minted - burn.burned AS net\n    FROM mint, burn\n    WHERE mint.daytime = burn.daytime\n    ORDER BY 1 ASC"}
{"prompt": "This query calculates the total number of users of SushiSwap over time. It does this by looking at the number of unique users each day and summing them up.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(block_time)) AS date,\n                trader_a AS account\n         FROM dex.trades\n         WHERE project = 'Sushiswap'\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(block_time)) AS date,\n                      trader_b AS account\n         FROM dex.trades\n         WHERE project = 'Sushiswap'\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(call_block_time)) AS date,\n                      \"to\" AS account\n         FROM sushi.\"Router02_call_addLiquidity\"\n         WHERE call_success\n         GROUP BY 2\n         UNION SELECT date_trunc('day', min(call_block_time)) AS date,\n                      \"to\" AS account\n         FROM sushi.\"Router02_call_addLiquidityETH\"\n         WHERE call_success\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "The following SQL query will return the number of unique traders per week from the IDEX1_evt_Trade table, joined with the Ethereum transactions table on the tx-hash. The data will be presented chronologically, ordered by week.", "completion": " SELECT date_trunc('week', tx.block_time) AS week,   -- Get the week from block_time in the transactions table\n       COUNT (DISTINCT idex.address) AS traders      -- Count the unique account from the Borrow taken event\n\nFROM idex.\"IDEX1_evt_Trade\" idex,      -- The table for the event we are interested in\n     ethereum.transactions tx                       -- Table with Ethereum transactions to get timeidex.\n\nWHERE tx.hash = idex.tx_hash                           -- Join the smart contract event and transactions table on the tx-hash\nGROUP BY week                                       -- Count accounts per week\nORDER BY week;                                      -- Present data chronologically \n"}
{"prompt": "This SQL query will sum up the total volume of trades for the 1inch project.", "completion": " SELECT SUM(usd_amount) as volume FROM dex.trades WHERE project = '1inch'"}
{"prompt": "This SQL query returns the total amount of gas used on the Ethereum blockchain for each month since 1970.", "completion": " SELECT\n    date_trunc('month', time) as time,\n    SUM(gas_used) as gas_used\nFROM ethereum.\"blocks\"\nWHERE time > '1970-01-01'\nGROUP BY 1\nORDER BY 1 DESC\n"}
{"prompt": "This SQL query returns the account and amount of YFI tokens for each account that has a balance of tokens greater than 0.", "completion": " SELECT account,\n       amount_yfi\nFROM\n  (SELECT account,\n          sum(amount) AS amount_yfi\n   FROM\n     (SELECT \"from\" AS account,\n             value / 1e18 AS amount\n      FROM erc20.\"ERC20_evt_Transfer\"\n      WHERE contract_address = '\\x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e'\n        AND \"to\" = '\\xba37b002abafdd8e89a1995da52740bbc013d992'\n      UNION SELECT \"to\" AS account, -value / 1e18 AS amount\n      FROM erc20.\"ERC20_evt_Transfer\"\n      WHERE contract_address = '\\x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e'\n        AND \"from\" = '\\xba37b002abafdd8e89a1995da52740bbc013d992') a\n   GROUP BY 1\n   ORDER BY 2 DESC) b\nWHERE amount_yfi > 0"}
{"prompt": "This query returns the top 200 addresses by balance for the given contract address, including the balance in the given token's units.", "completion": " WITH balances AS materialized\n(\n    SELECT address, SUM(amount_raw) AS amount\n    FROM (\n        SELECT \"from\" AS address, -SUM(value) AS amount_raw\n        FROM erc20.\"ERC20_evt_Transfer\"\n        WHERE contract_address = CONCAT('\\x', substring('{{Contract Address}}' from 3))::bytea\n        GROUP BY 1\n        \n        UNION ALL\n        \n        SELECT \"to\" AS address, SUM(value) AS amount_raw\n        FROM erc20.\"ERC20_evt_Transfer\"\n        WHERE contract_address = CONCAT('\\x', substring('{{Contract Address}}' from 3))::bytea\n        GROUP BY 1\n        \n    ) to_from\n    GROUP BY 1\n),\n \ntoken_info as (\n    select \"contract_address\", \"decimals\", \"symbol\"\n    from erc20.\"tokens\"\n    WHERE contract_address = CONCAT('\\x', substring('{{Contract Address}}' from 3))::bytea limit 1 \n),\n\ntop_address as (\n    SELECT address, amount\n    FROM balances\n    where amount > 0\n    ORDER BY amount desc\n    limit 200\n)\n\nSELECT address, (amount /pow(10, decimals)) as balance\nFROM top_address, token_info ti\nGROUP by address, amount, balance\nORDER BY balance desc\n"}
{"prompt": "This SQL query calculates the AUM (assets under management) for the iearn.finance.v2 protocol. This is done by taking the sum of all deposits and subtracting the sum of all withdrawals for each type of asset.", "completion": " select a.name, sum(a.total) - sum(b.total) as AUM from (\nselect sum(_amount/1e18) as total, 'ySUSD' as name from iearn_v2.\"yToken_call_deposit\" where encode(contract_address, 'hex') = 'f61718057901f84c4eec4339ef8f0d86d2b45600'\nunion\nselect sum(_amount/1e6) as total, 'yUSDC' as name from iearn_v2.\"yToken_call_deposit\" where encode(contract_address, 'hex') = 'd6ad7a6750a7593e092a9b218d66c0a814a3436e'\nunion\nselect sum(_amount/1e18) as total, 'yDAI' as name from iearn_v2.\"yToken_call_deposit\" where encode(contract_address, 'hex') = '16de59092dae5ccf4a1e6439d611fd0653f0bd01'\nunion \nselect sum(_amount/1e6) as total, 'yUSDT' as name from iearn_v2.\"yToken_call_deposit\" where encode(contract_address, 'hex') = '83f798e925bcd4017eb265844fddabb448f1707d'\nunion\nselect sum(_amount/1e18) as total, 'yTUSD' as name from iearn_v2.\"yToken_call_deposit\" where encode(contract_address, 'hex') = '73a052500105205d34daf004eab301916da8190f'\n) a,\n(\nselect sum(_shares/1e18) as total, 'ySUSD' as name from iearn_v2.\"yToken_call_withdraw\" where encode(contract_address, 'hex') = 'f61718057901f84c4eec4339ef8f0d86d2b45600'\nunion\nselect sum(_shares/1e6) as total, 'yUSDC' as name from iearn_v2.\"yToken_call_withdraw\" where encode(contract_address, 'hex') = 'd6ad7a6750a7593e092a9b218d66c0a814a3436e'\nunion\nselect sum(_shares/1e18) as total, 'yDAI' as name from iearn_v2.\"yToken_call_withdraw\" where encode(contract_address, 'hex') = '16de59092dae5ccf4a1e6439d611fd0653f0bd01'\nunion \nselect sum(_shares/1e6) as total, 'yUSDT' as name from iearn_v2.\"yToken_call_withdraw\" where encode(contract_address, 'hex') = '83f798e925bcd4017eb265844fddabb448f1707d'\nunion\nselect sum(_shares/1e18) as total, 'yTUSD' as name from iearn_v2.\"yToken_call_withdraw\" where encode(contract_address, 'hex') = '73a052500105205d34daf004eab301916da8190f'\n) b where a.name = b.name group by 1;"}
{"prompt": "This query returns the symbol, token address, sender, receiver, and value of ERC20 transfers, as well as the transaction hash.", "completion": " -- A dedicated table for ERC20 transfers is coming soon\n\nSELECT                                                                           \n    symbol,\n    l.contract_address AS token_address,                                                            \n    substring(topic2 from 13) AS sender,                                         \n    substring(topic3 from 13) AS receiver,                                       \n    bytea2numeric(data)/(10^t.decimals) AS value,\n    tx_hash\nFROM ethereum.logs l \nLEFT JOIN erc20.tokens t ON l.contract_address = t.contract_address \nWHERE topic1='\\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\nAND topic2 IS NOT NULL                                                           \nAND topic3 IS NOT NULL                                                           \nAND length(data) = 32\nAND symbol = 'DAI'\nLIMIT 10;"}
{"prompt": "This SQL query selects all data from the \"Moloch_evt_SubmitProposal\" table.", "completion": " SELECT * FROM moloch.\"Moloch_evt_SubmitProposal\";\n    "}
{"prompt": "This SQL query returns the number of Binance DEX trades that occurred each day, truncated to the nearest day. The results are ordered by the trade date.", "completion": " SELECT date_trunc('day', trade_time), COUNT(*)\nFROM trades \nGROUP BY 1\nORDER BY 1"}
{"prompt": "This SQL query returns the total amount of ETH sold, in ETH, for each day over the past 7 days, for a specific address.", "completion": " SELECT SUM(eth_sold/1e18), date_trunc('day', block_time)\nFROM uniswap.\"Exchange_evt_TokenPurchase\" AS tr\nLEFT JOIN ethereum.transactions AS tx ON hash = tr.tx_hash\nWHERE address = '\\x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14' AND tx.block_time::date > now() - interval '7 days'\nGROUP BY 2"}
{"prompt": "This SQL query calculates the number of unique investors who have a balance greater than 0 in the contract 'x9e9404849B9A6dd520bD6199AEe5CE7f76c09245'.", "completion": " WITH outbound AS\n  (SELECT \"_from\",\n          SUM(\"_value\") amt\n   FROM fairmint.\"DAT_evt_Transfer\"\n   WHERE contract_address = '\\x9e9404849B9A6dd520bD6199AEe5CE7f76c09245'\n   GROUP BY 1),\n     inbound AS\n  (SELECT \"_to\",\n          SUM(\"_value\") amt\n   FROM fairmint.\"DAT_evt_Transfer\"\n   WHERE contract_address = '\\x9e9404849B9A6dd520bD6199AEe5CE7f76c09245'\n   GROUP BY 1)\nSELECT COUNT(*)\nFROM\n  (SELECT inbound.\"_to\" AS address,\n          CASE\n              WHEN outbound.amt IS NULL THEN inbound.amt\n              ELSE inbound.amt - outbound.amt\n          END AS balance\n   FROM inbound\n   LEFT JOIN outbound ON outbound.\"_from\" = inbound.\"_to\") AS TEMP_TABLE\nWHERE balance > 0;"}
{"prompt": "This SQL query returns the number of distinct addresses that have transferred a Rebalancing Set Token, grouped by week.", "completion": " SELECT \ndate_trunc('week', tx.block_time) weekly,\nCOUNT(DISTINCT s.\"to\")\nFROM setprotocol.\"RebalancingSetToken_evt_Transfer\" s\nLEFT JOIN ethereum.\"transactions\" tx ON s.tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 ASC"}
{"prompt": "This SQL query calculates the average \"DutchX price\" of WETH being auctioned for RDN, the average \"Market price\" of WETH and RDN, and the \"RDN discount\" (the difference between the two prices).", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    avg(\"sellVolume\" / \"buyVolume\") as \"DutchX price\",\n    avg(rdn.average / eth.average) as \"Market price\",\n    (avg(rdn.average / eth.average) / avg(\"sellVolume\" / \"buyVolume\") - 1)*100 as \"RDN discount\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" rdn \n\nWHERE \"sellToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth \nAND \"buyToken\" = '\\x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6' --rdn\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', rdn.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND rdn.symbol = 'RDN'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "The following SQL query calculates the total amount of NMR staked in a given round and tournament.", "completion": " SELECT SUM(m.\"totalAmountStaked\" / 1e18) as amount\nFROM numerai.\"NumeraireBackend_evt_Staked\" m, numerai.\"NumeraireBackend_evt_StakeDestroyed\" d\nWHERE m.\"roundID\" = d.\"roundID\"\nAND m.\"tournamentID\" = d.\"tournamentID\";"}
{"prompt": "This SQL query returns a list of distinct \"from\" addresses from the Ethereum blockchain.", "completion": " select distinct \"from\" from ethereum.\"transactions\""}
{"prompt": "Please select all columns from the \"Augur_evt_OrderFilled\" table and limit the results to 10.", "completion": " SELECT * \nFROM augur.\"Augur_evt_OrderFilled\"\nLIMIT 10"}
{"prompt": "This SQL query returns the total number of transactions made by Argent wallets (the creator of Argent wallets) in a given week.", "completion": " WITH addresses AS (\n    SELECT DISTINCT substring(tr.input from 17 for 20) as addr\n     FROM ethereum.transactions tx\n     LEFT JOIN ethereum.traces tr ON tx.\"hash\" = tr.tx_hash\n     WHERE tx.\"to\" = '\\x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020' -- Argent wallet creator\n\n       AND substring(tx.\"data\"::bytea\n                     FROM 0\n                     FOR 5) = '\\xaff18575' -- createWallet() method\n\n       AND substring(tr.\"input\"::bytea\n                     FROM 0\n                     FOR 5) = '\\x19ab453c' -- init() method\n)\n\nSELECT date_trunc('week', block_time) AS date_week, sum(1) as total_tx_count\nFROM ethereum.traces\nWHERE \"from\" IN (select addr from addresses)\n and block_number >= 7193539\n-- and substring(input::bytea from 0 for 5) = '\\xa9059cbb' -- transfer() event. Need to double check this logic\nGROUP BY date_trunc('week', block_time)\norder by date_trunc('week', block_time) asc"}
{"prompt": "This SQL query returns the number of unique users for each week for the past 50 weeks.", "completion": " SELECT\ndate_trunc('week', block_time) week,\ncount(distinct w.\"from\") as unique_users FROM wrappedbtc.\"WBTC_evt_Transfer\" w\nLEFT JOIN ethereum.\"transactions\" tx ON w.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1\nLIMIT 50 "}
{"prompt": "This SQL query returns the top 25 balances of the ERC20 token known as SLP. The balances are calculated by taking into account all transfers of the token, both incoming and outgoing.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    -tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address = '\\x37236cd05b34cc79d3715af2383e96dd7443dcf1' -- SLP\nUNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\x37236cd05b34cc79d3715af2383e96dd7443dcf1' --SLP\n)\n\nSELECT address, sum(amount) as slp_balance\nFROM transfers\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 25\n"}
{"prompt": "This SQL query counts the number of blocks committed in the Loopring DEXBetaV1_call_commitBlock table.", "completion": " SELECT COUNT(*)\nFROM loopring.\"DEXBetaV1_call_commitBlock\" b"}
{"prompt": "This SQL query will sum the total amount of ETH stored in Gnosis Safe contracts on the Mainnet. The total will be displayed in ETH.", "completion": " -- TODO: change dbt_jeff_safe_ethereum.eth_transfers --> safe_ethereum.eth_transfers after 22.08.2022\nselect sum(amount_raw) / 1e18 AS total\nfrom dbt_jeff_safe_ethereum.eth_transfers\n"}
{"prompt": "The following SQL query will return the total amount of ERC20 tokens bet on Degens for each day in the current year, as well as the symbol for the token.", "completion": " WITH data as (\nSELECT \ndate_trunc('day', tx.block_time) as datetime,\ne.from as user_address,\ne.value/1e18 as amount,\nt.symbol,\ne.evt_tx_hash\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN erc20.tokens t on (t.contract_address = e.contract_address)\nJOIN ethereum.transactions tx on (tx.hash = e.evt_tx_hash)\nWHERE e.to = '\\x8888888883585b9a8202Db34D8b09d7252bfc61C'\nAND date_trunc('day', tx.block_time) >= date_trunc('year', now())\n-- AND e.contract_address = \"\\x6b175474e89094c44da98b954eedeac495271d0f\"\n)\n\nSELECT data.datetime, sum(data.amount), data.symbol\nFROM data\nGROUP BY 1, 3\n"}
{"prompt": "This query calculates the total USD spent on Ethereum Name Service (ENS) in the primary market to date. It does this by first calculating the ETH spent on ENS each week, then multiplying that by the average ETH/USD price for that week. Finally, it sums up the total USD spent on ENS to date.", "completion": " WITH ens1 AS (SELECT date_trunc ('week', tx.block_time) date, SUM (tx.value/1e18) eth_spent\n                FROM ethereumnameservice.\"ENSRegistry_evt_NewOwner\" r\n                LEFT JOIN ethereum.transactions tx\n                ON tx.hash = r.evt_tx_hash\n                GROUP BY 1),\n    price1 AS (SELECT date_trunc ('week', minute) date, AVG (price) avg_price_eth_usd\n                    FROM prices.layer1_usd_eth\n                    GROUP BY 1)\n\nSELECT ens1.date, (ens1.eth_spent * price1.avg_price_eth_usd) AS total_usd_spent,\n        SUM (ens1.eth_spent * price1.avg_price_eth_usd) \n        OVER (ORDER BY ens1.date) AS cumulative_usd_spend\nFROM ens1\nJOIN price1\nON ens1.date = price1.date"}
{"prompt": "This SQL query returns the number of uniswap \"Exchange_evt_EthPurchase\" events that occurred in each hour, along with the total number of ethereum transactions that occurred in that same hour. The data is sorted in descending order, with the most recent data being shown first. Only the first 40 results are shown.", "completion": " SELECT date_trunc('hour', tx.block_time),\nCOUNT(*) FROM uniswap.\"Exchange_evt_EthPurchase\" u\nLEFT JOIN ethereum.transactions tx\nON u.tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 40"}
{"prompt": "This SQL query returns the number of unique borrowers of the MakerDAO (MCD) token for each week, in descending order, for the most recent 10 weeks.", "completion": " SELECT \ndate_trunc('week', tx.block_time) AS week, \ncount(distinct \"wad\") AS borrowers\nFROM makermcd.\"DAI_call_mint\" m\nLEFT JOIN ethereum.transactions tx ON tx.hash = m.call_tx_hash\nWHERE m.call_success = 'true'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10 "}
{"prompt": "This query returns all data from the view_tokens table, as well as an additional row containing the following values: 0 for token_id, '\\x1a5f9352af8af974bfc03399e3767df6370d82e4' for token_address, 'OWL' for symbol, 18 for decimals, and '2020-01-23 20:30:00.000' for add_date. The results are ordered by token_id.", "completion": " SELECT *\nFROM gnosis_protocol.\"view_tokens\"\nUNION all (\n    SELECT\n        0 as token_id,\n        '\\x1a5f9352af8af974bfc03399e3767df6370d82e4' as token_address,\n        'OWL' as symbol,\n        18 as decimals,\n        '2020-01-23 20:30:00.000' as add_date\n)\nORDER BY token_id"}
{"prompt": "The SQL query below calculates the sum of wad divided by 1e18 from the makermcd.\"DAI_call_mint\" table where call_success is true.", "completion": " SELECT SUM(wad/1e18)\nFROM makermcd.\"DAI_call_mint\"\nWHERE call_success;"}
{"prompt": "This SQL query shows the top 10 keepers by revenue for the Compound v2 protocol.", "completion": " select \"liquidator\", sum(\"seizeTokens\")\nfrom compound_v2.\"cErc20_evt_LiquidateBorrow\"\ngroup by \"liquidator\"\nORDER BY 2 desc\n\nWITH collateral AS\n(\nSELECT\n\"liquidator\", sum(\"seizeTokens\"/1e13*p.price*0.05) as collateral_liquidated_usd FROM compound_v2.\"cErc20_evt_LiquidateBorrow\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nGROUP BY 2\nORDER BY 3 desc\nLIMIT 10\n),\n\nSELECT \"liquidator\", sum(\"collateral_liquidated_usd\") as revenue\nFROM collateral\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 10\n"}
{"prompt": "Get the sum of protocolFeePaid in ETH for the first 10 rows from the \"Exchange_evt_Fill\" event in the zeroex_v3 table.", "completion": " SELECT\nsum(protocolFeePaid/1e18)\nFROM zeroex_v3.\"Exchange_evt_Fill\"\nLIMIT 10"}
{"prompt": "This query returns a list of all executed trades on the Gnosis Protocol, including the batch ID, transaction timestamp, order ID, sell and buy tokens, sell and buy amounts, price, trader address, and solution transaction link. Note that this query does not yet include reverted trades.", "completion": " -- Note: this query does not yet include reverted trades. \n\nWITH dfusion_tokens as (\n        SELECT\n            ROW_NUMBER() OVER (ORDER BY transactions.block_number, transactions.index) as token_id,\n            CONCAT('0x', ENCODE(tokens.token, 'hex')) as token_address,\n            erc20.symbol,\n            erc20.decimals\n        FROM gnosis_protocol.\"BatchExchange_call_addToken\" tokens\n        JOIN ethereum.\"transactions\" transactions\n          ON transactions.hash=tokens.call_tx_hash\n          AND transactions.success=true\n        JOIN erc20.\"tokens\" as erc20\n          ON erc20.contract_address = tokens.token\n    UNION all\n        SELECT\n        0 as token_id,\n        '\\x1a5f9352af8af974bfc03399e3767df6370d82e4' as token_address,\n        'OWL' as symbol,\n        18 as decimals \n    )\nSELECT\n    solution.\"batchId\",\n    transactions.\"block_time\", \n    trades.\"orderId\",\n    sell_token.\"symbol\" as \"sellToken\",\n    buy_token.\"symbol\" as \"buyToken\",\n  --  sell_token.\"token\" as \"sellTokenAddress\",\n  --  buy_token.\"token\" as \"buyTokenAddress\",\n    \"executedSellAmount\"/10^(sell_token.\"decimals\") as \"sellAmount\",\n    \"executedBuyAmount\"/10^(buy_token.\"decimals\") as \"buyAmount\",\n    ((\"executedBuyAmount\"/10^(buy_token.\"decimals\"))/(\"executedSellAmount\"/10^(sell_token.\"decimals\"))) as Price,\n    CONCAT('0x', ENCODE(trades.\"owner\", 'hex')) as trader,\n    CONCAT('https://etherscan.io/tx/','0x', ENCODE(trades.\"evt_tx_hash\", 'hex')) as Solution_tx_Link\nFROM gnosis_protocol.\"BatchExchange_evt_Trade\" trades\nJOIN gnosis_protocol.\"view_tokens\" buy_token\n    ON trades.\"buyToken\" = buy_token.\"token_id\"\nJOIN gnosis_protocol.\"view_tokens\" sell_token\n    ON trades.\"sellToken\" = sell_token.\"token_id\"\nJOIN ethereum.\"transactions\" transactions\n    ON transactions.hash = trades.evt_tx_hash\n    AND transactions.success = true\nJOIN gnosis_protocol.\"BatchExchange_call_submitSolution\" solution\n    ON solution.call_tx_hash=transactions.hash\nORDER BY \"block_time\" desc;"}
{"prompt": "This SQL query selects the day, name, and sum of total deposits for each day and name from the yToken_call_invest table.", "completion": " select day, name, sum(total) over (order by day,name asc rows between unbounded preceding and current row) from \n(SELECT date_trunc('day', block_time) AS day,\n       (case\n       when encode(contract_address, 'hex') = '36324b8168f960a12a8fd01406c9c78143d41380' then 'ySUSD'\n       when encode(contract_address, 'hex') = 'a2609b2b43ac0f5ebe27deb944d2a399c201e3da' then 'yUSDC'\n       when encode(contract_address, 'hex') = '9d25057e62939d3408406975ad75ffe834da4cdd' then 'yDAI'\n       when encode(contract_address, 'hex') = 'a1787206d5b1be0f432c4c4f96dc4d1257a1dd14' then 'yUSDT'\n       when encode(contract_address, 'hex') = '04ef8121ad039ff41d10029c91ea1694432514e9' then 'yBTC'\n       end) as name,\n       sum(_amount/(case \n       when encode(contract_address, 'hex') = 'a2609b2b43ac0f5ebe27deb944d2a399c201e3da' then 1e6\n       when encode(contract_address, 'hex') = 'a1787206d5b1be0f432c4c4f96dc4d1257a1dd14' then 1e6\n       when encode(contract_address, 'hex') = '04ef8121ad039ff41d10029c91ea1694432514e9' then 1e8\n       else 1e18 end)) as total\nFROM iearn_v1.\"yToken_call_invest\" yci\nLEFT JOIN ethereum.\"transactions\" tx ON yci.call_tx_hash = tx.hash\nGROUP BY 1,2) a"}
{"prompt": "This query shows the total premiums paid in USD terms for Armor.Fi. The query looks at the \"arNFT_evt_BuyCover\" event to determine the amount of ETH and USD that have been paid in premiums. It then looks at the \"layer1_usd\" table to get the price of ETH in USD terms.", "completion": " WITH eth AS\n  (SELECT date, sum(amount) OVER (\n                                  ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS eth\n   FROM\n     (SELECT evt_block_time AS date,\n             \"coverPrice\" / 1e18 AS amount\n      FROM armor_fi.\"arNFT_evt_BuyCover\"\n      WHERE currency = '\\x45544800') a),\n     usd AS\n  (SELECT date, sum(amount) OVER (\n                                  ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS usd\n   FROM\n     (SELECT evt_block_time AS date,\n             \"coverPrice\" / 1e18 AS amount\n      FROM armor_fi.\"arNFT_evt_BuyCover\"\n      WHERE currency = '\\x44414900') a)\nSELECT date, eth * price + usd AS usd\nFROM\n  (SELECT date, coalesce(first_value(eth) OVER (PARTITION BY \"partition\"\n                                                ORDER BY date), 0) AS eth,\n                usd\n   FROM\n     (SELECT date, eth,\n                   usd,\n                   count(eth) OVER (\n                                    ORDER BY date) AS \"partition\"\n      FROM\n        (SELECT date, eth,\n                      coalesce(first_value(usd) OVER (PARTITION BY \"partition\"\n                                                      ORDER BY date), 0) AS usd\n         FROM\n           (SELECT date, eth,\n                         usd,\n                         count(usd) OVER (\n                                          ORDER BY date) AS \"partition\"\n            FROM\n              (SELECT CASE\n                          WHEN eth.date IS NULL THEN usd.date\n                          WHEN usd.date IS NULL THEN eth.date\n                      END AS date,\n                      eth,\n                      usd\n               FROM eth\n               FULL OUTER JOIN usd ON eth.date = usd.date) a) b) c) d) e\nINNER JOIN prices.\"layer1_usd\" ON date_trunc('minute', date) = MINUTE\nAND symbol = 'ETH'"}
{"prompt": "This SQL query counts the number of times the contract 'claimFees()' is called, grouped by week. The data is filtered to only include calls made to the contract address '0xb440dd674e1243644791a4adfe3a2abb0a92d309' with the data value '0xd294f093', and only calls made after block number 6834822.", "completion": " select count(*), date_trunc('week', block_time) as \"ym\"\nfrom ethereum.transactions\nwhere \"to\" = '\\xb440dd674e1243644791a4adfe3a2abb0a92d309'\nand data = '\\xd294f093'\nand block_number > 6834822\ngroup by \"ym\"\norder by \"ym\" asc"}
{"prompt": "This SQL query returns data on the number of new and old users for the 1inch project on a weekly basis. The data is ordered by the week, with the most recent week appearing first.", "completion": " SELECT\n    ssq.time, \n    new_users as new,\n    (unique_users - new_users) as old\nFROM (\n    SELECT\n        sq.time, \n        count(*) as new_users\n    FROM (\n        SELECT\n            tx_from as user,\n            MIN(date_trunc('week', oi.block_time)) as time\n        FROM dex.trades oi WHERE project = '1inch'\n        GROUP BY 1\n        ORDER BY 1\n    ) sq\n    GROUP BY 1\n) ssq\nLEFT JOIN (\n    SELECT\n        date_trunc('week', oi.block_time) AS time,\n        COUNT(DISTINCT tx_from) as unique_users\n    FROM dex.trades oi WHERE project = '1inch'\n    GROUP BY 1\n    ORDER BY 1\n) t2 ON t2.time = ssq.time\nORDER BY 1 DESC\n"}
{"prompt": "This SQL query calculates the number of Wyvern and Seaport NFTs sold on OpenSea each month.", "completion": " SELECT mm,\n       sum(cnt) AS cnt\nFROM\n  (SELECT date_trunc('month', evt_block_time) AS mm,\n          'Wyvern' AS contract,\n          count(DISTINCT evt_tx_hash) AS cnt\n   FROM opensea.\"WyvernExchange_evt_OrdersMatched\" om\n   WHERE evt_tx_hash not in\n       (SELECT *\n        FROM dune_user_generated.transactions_not_on_OS)\n   GROUP BY 1,\n            2\n   UNION ALL SELECT date_trunc('month', block_time) AS mm,\n                    'Seaport' AS contract,\n                    count(DISTINCT tx_hash) AS cnt\n   FROM seaport.view_transactions\n   WHERE zone_address in ('\\xf397619df7bfd4d1657ea9bdd9df7ff888731a11',\n                          '\\x9b814233894cd227f561b78cc65891aa55c62ad2',\n                          '\\x004C00500000aD104D7DBd00e3ae0A5C00560C00',\n                          '\\x110b2B128A9eD1be5Ef3232D8e4E41640dF5c2Cd')\n   GROUP BY 1,\n            2) a\nGROUP BY 1\nORDER BY 1"}
{"prompt": "This SQL query will select the block number and count the number of transactions for each block. The results will be limited to the first 1000 blocks.", "completion": " select block_number, count(*) from ethereum.transactions group by 1 limit 1000;"}
{"prompt": "This SQL query returns the total ETH volume auctioned for MKR on the DutchX exchange for each day. The volume is calculated by summing the sellVolume from all AuctionCleared events that match the given buyToken and sellToken, divided by 1e18. The query also joins the ethereum.transactions and coincap.\"tokens/usd\" tables to get the block time and price of ETH and MKR, respectively, for each auction.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    sum(\"sellVolume\" / 1e18) as ethvolume \n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" mkr \n\nWHERE \"sellToken\" =  '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth  \nAND \"buyToken\" = '\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2' --mkr\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', mkr.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND mkr.symbol = 'MKR'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "This query returns the following information:\n\n- The total amount of cDAI added to Uniswap exchanges\n- The total amount of cDAI removed from Uniswap exchanges\n- The total amount of DAI added to Uniswap exchanges\n- The total amount of DAI removed from Uniswap exchanges\n- The net amount of cDAI added or removed from Uniswap exchanges\n- The net amount of DAI added or removed from Uniswap exchanges\n- The ratio of cDAI to DAI added or removed from Uniswap exchanges", "completion": " WITH cdai_added AS (\n    SELECT sum(token_amount/1e8) as added\n    FROM uniswap.\"Exchange_evt_AddLiquidity\" \n    WHERE address IN (\n        SELECT \"exchange\" FROM uniswap.\"Factory_evt_NewExchange\"  WHERE \"token\"='\\xf5dce57282a584d2746faf1593d3121fcac444dc' --cDAI\n    )\n),\ncdai_removed AS (\n    SELECT sum(token_amount/1e8) as removed\n    FROM uniswap.\"Exchange_evt_RemoveLiquidity\" \n    WHERE address IN (\n        SELECT \"exchange\" FROM uniswap.\"Factory_evt_NewExchange\"  WHERE \"token\"='\\xf5dce57282a584d2746faf1593d3121fcac444dc' --cDAI\n    )\n),\ndai_added AS (\n    SELECT sum(token_amount/1e8) as added\n    FROM uniswap.\"Exchange_evt_AddLiquidity\" \n    WHERE address IN (\n        SELECT \"exchange\" FROM uniswap.\"Factory_evt_NewExchange\"  WHERE \"token\"='\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359' -- DAI\n        )\n),\ndai_removed AS (\n    SELECT sum(token_amount/1e8) as removed\n    FROM uniswap.\"Exchange_evt_RemoveLiquidity\" \n    WHERE address IN (\n        SELECT \"exchange\" FROM uniswap.\"Factory_evt_NewExchange\"  WHERE \"token\"='\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359' -- DAI\n        )\n)\nSELECT *, (ca.added - cr.removed), (da.added - dr.removed), (ca.added - cr.removed) / (da.added - dr.removed)\nFROM cdai_added ca\nJOIN cdai_removed cr ON TRUE\nJOIN dai_added da ON TRUE\nJOIN dai_removed dr ON TRUE"}
{"prompt": "Please select * from the table \"FairWin_call_invest\" and limit the results to 10.", "completion": " SELECT * FROM fairwin.\"FairWin_call_invest\" LIMIT 10"}
{"prompt": "This query returns data about withdrawals from the Compound money market, including the block time, amount withdrawn, and transaction hash. The asset being withdrawn is specified as a hexadecimal value, and only successful withdrawals are included in the results. The results are ordered by block time.", "completion": " SELECT tx.block_time,\n       withdraw.amount,\n       tx.hash\nFROM compound.\"MoneyMarket_evt_SupplyWithdrawn\" withdraw\nJOIN ethereum.transactions tx ON withdraw.tx_hash = tx.hash\nWHERE encode(withdraw.asset, 'hex') = '89d24a6b4ccb1b6faa2625fe562bdd9a23260359'\n  AND success = TRUE\nORDER BY tx.block_time"}
{"prompt": "This query calculates the net supply of a given token over the course of 39 weeks. The net supply is calculated by taking the sum of all mints for a given token, subtracting the sum of all redeems for that token, and adding the cumulative interest accrued on that token.", "completion": " with mint as (\n        SELECT distinct\n            date_trunc('week', block_time) as week,\n            token_symbol,\n            SUM(\"mint_amount_usd\") as sum_mint_amount\n        FROM compound.\"view_mint\"\n        WHERE block_time > now() - interval '39 weeks' \n        GROUP BY 1,2 \n        ORDER BY 1\n    ), redeem as (\n        SELECT distinct\n            date_trunc('week', block_time) as week,\n            token_symbol,\n            SUM(\"redeem_amount_usd\") as sum_redeem_amount\n        FROM compound.\"view_redeem\"\n        WHERE block_time > now() - interval '39 weeks' \n        GROUP BY 1,2 \n        ORDER BY 1\n    ), interest as (\n        select distinct\n            date_trunc('week', block_time) as week,\n            token_symbol,\n            sum(interest_accumulated_usd) over (partition by token_symbol order by date_trunc('week', block_time)) as cumulative_interest\n        from compound.\"view_accrue_interest\"\n        WHERE block_time > now() - interval '39 weeks'\n    )\nselect \n    m.week,\n    m.token_symbol,\n    m.sum_mint_amount - r.sum_redeem_amount + i.cumulative_interest as net_supply\nfrom mint m join redeem r on m.week = r.week and m.token_symbol = r.token_symbol\n    join interest i on m.week = i.week and m.token_symbol = i.token_symbol\norder by 1,2;"}
{"prompt": "This SQL query returns the number of unique addresses that were active on the Authereum network in a given week.", "completion": " WITH wallets AS\n  (SELECT address\n   FROM ethereum.traces\n   WHERE \"from\" IN ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8',\n                    '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea',\n                    '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046')\n     AND TYPE = 'create')\nSELECT date_trunc('week', et.\"block_time\") AS week,\n       count(DISTINCT wallets.address) AS address\nFROM ethereum.traces et\nINNER JOIN wallets ON wallets.address = et.\"from\"\nWHERE et.\"to\" IN ('\\x237EDCDd43349227ef511581Cc834962ECf23076',\n                  '\\x20af9e54a3670ef6a601bca1f1ec22b1f93cbe23',\n                  '\\x2e1723d1dfa2947f0d08d5c5d214b71def4f951f',\n                  '\\x79fee076b1bcd4054dff0b4364c26899492198dc',\n                  '\\x211deb5c0a28a213fcf5976ac22c70ff96b9004c',\n                  '\\x185c46c8d3ef5155f3678e69c827db7a2116a6cd',\n                  '\\xd8cab604bdd8cbb7c3eb0c26f7dc3abffb005a92',\n                  '\\xae1710e83211decb356f031a9346a24ef55055e0')\n  AND call_type = 'delegatecall'\n  AND tx_success = TRUE\n  AND error IS NULL\n  AND substring(\"input\"\n                FOR 4) IN ('\\x26aa4655',\n                           '\\xd5553b88')\nGROUP BY week\nORDER BY week"}
{"prompt": "This query returns a list of DutchX auctions where both sides (sell and buy) cleared within 6 hours, excluding the OCEAN and SIMPLE tokens. The results are sorted by the minimum duration (time between start and finish) in descending order.", "completion": " select\n    COUNT(*), \n    MIN(\"block_time\" - to_timestamp(\"auctionStart\")) as min_duration, \n    MAX(\"block_time\" - to_timestamp(\"auctionStart\")) as max_duration, \n    MAX(\"block_time\") as end_date,\n    start.\"auctionIndex\",\n    start.\"sellToken\",\n    start.\"buyToken\"\n\nfrom gnosis.\"DutchExchange_evt_AuctionStartScheduled\" as start\njoin gnosis.\"DutchExchange_evt_AuctionCleared\" as cleared\non (\n    (\"start\".\"sellToken\" = \"cleared\".\"sellToken\" AND \"start\".\"buyToken\" = \"cleared\".\"buyToken\") OR (\"start\".\"buyToken\" = \"cleared\".\"sellToken\" AND \"start\".\"sellToken\" = \"cleared\".\"buyToken\")) \n  AND \"start\".\"auctionIndex\" = \"cleared\".\"auctionIndex\" \n\njoin ethereum.transactions as tx\non tx.hash = cleared.\"tx_hash\"\n\nWHERE \"block_time\" - to_timestamp(\"auctionStart\") > interval '6 hours'\nAND NOW() - to_timestamp(\"auctionStart\") < interval '7 days'\nAND start.\"sellToken\" != '\\x985dd3d42de1e256d09e1c10f112bccb8015ad41' -- exlcude OCEAN token\nAND start.\"sellToken\" != '\\x2c4e8f2d746113d0696ce89b35f0d8bf88e0aeca' -- exlcude SIMPLE token\n\nGROUP BY (start.\"auctionIndex\", start.\"sellToken\", start.\"buyToken\")\nHAVING COUNT(*) > 1\nORDER BY min_duration desc"}
{"prompt": "This SQL query returns the top 10 players by entry in the SAI Pool.", "completion": " SELECT\ndistinct(sender) as player, sum(amount/1e18) as entry\nFROM pooltogether_v2.\"Pool3_evt_Deposited\"\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 10\n"}
{"prompt": "This query calculates the sum of ETH/1e18 multiplied by the close price from the uniswap \"Exchange_evt_TokenPurchase\" and \"Exchange_evt_EthPurchase\" events.", "completion": " SELECT SUM(eth/1e18 * p.close)\nFROM (\n    (SELECT tx_hash, eth_sold as eth FROM uniswap.\"Exchange_evt_TokenPurchase\") \n    UNION (SELECT tx_hash, eth_bought as eth FROM uniswap.\"Exchange_evt_EthPurchase\")\n) ether\nINNER JOIN ethereum.transactions tx ON ether.tx_hash = tx.hash\nINNER JOIN price.\"eth/usd\" p ON p.block_number = tx.block_number;"}
{"prompt": "This query returns a list of accounts that have made more than 500 STORJ token transfers. The results are sorted by the number of transfers made, with the accounts that have made the most transfers appearing first.", "completion": " WITH countSends AS\n  (SELECT COUNT (DISTINCT tx_hash) AS sends,\n                \"from\"\n   FROM storj.\"CentrallyIssuedToken_evt_Transfer\"\n   GROUP BY 2 )\nSELECT *\nFROM countSends\nWHERE sends > 500\nORDER BY sends DESC;"}
{"prompt": "This SQL query calculates the Fulcrum USDC Utilization for the past 60 days. It does this by first calculating the net deposit of USDC for each day, then calculating the net borrow of USDC for each day, and finally calculating the utilization for each day.", "completion": " WITH net_deposit AS \n(\n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(\"assetAmount\"/1e6) as USDC_deposits,\n    sum(sum(\"assetAmount\"/1e6)) over (order by date_trunc('day', block_time)) as cumul_deposits\n    FROM fulcrum.\"iToken_evt_Mint\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\xF013406A0B1d544238083DF0B93ad0d2cBE0f65f'\n    GROUP BY 1\nUNION ALL \n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(-\"assetAmount\"/1e6) as USDC_deposits,\n    sum(sum(-\"assetAmount\"/1e6)) over (order by date_trunc('day', block_time)) as cumul_deposits\n    FROM fulcrum.\"iToken_evt_Burn\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\xF013406A0B1d544238083DF0B93ad0d2cBE0f65f'\n    GROUP BY 1\n),\n\nnet_borrow AS \n(\n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(\"borrowAmount\"/1e6) as borrows,\n    sum(sum(\"borrowAmount\"/1e6)) over (order by date_trunc('day', block_time)) as cumul_borrow\n    FROM fulcrum.\"iToken_evt_Borrow\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\xF013406A0B1d544238083DF0B93ad0d2cBE0f65f'\n    GROUP BY 1 \nUNION ALL\n    SELECT\n    date_trunc('day', block_time) as day,\n    sum(-Amount/1e6) as borrows,\n    sum(sum(-Amount/1e6)) over (order by date_trunc('day', block_time)) as cumul_borrow\n    FROM fulcrum.\"iToken_evt_Repay\"\n    LEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\n    WHERE \"contract_address\" = '\\xF013406A0B1d544238083DF0B93ad0d2cBE0f65f'\n    GROUP BY 1 \n)\n\nSELECT net_deposit.day,\nsum(cumul_borrow/2) as cumulative_borrow,\nsum(cumul_deposits/2) as cumulative_deposit,\nsum(cumul_borrow)/sum(cumul_deposits)*100 as utilization\nFROM net_deposit\nINNER JOIN net_borrow b ON net_deposit.day = b.day\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 60\n"}
{"prompt": "This query returns the date, along with the rate of change for the DSR (day-start rate) over time, for the past 10 days.", "completion": " select \ndate_trunc('day', block_time) as day,\n1000000-sum(p.data/1e18) AS per_second_rate \nfrom makermcd.\"POT_call_file\" p\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nWHERE substring(what for 3) = 'dsr'::bytea\nAND call_success = true\nGROUP BY 1\nORDER BY 1 desc\nlimit 10"}
{"prompt": "This SQL query retrieves data from the \"Unitroller_call_liquidateCalculateSeizeTokens\" and \"MoneyMarket_call_liquidateBorrow\" tables in the compound_v2 and compound_v1 databases, respectively. The data is then aggregated and sorted by block_time in descending order.", "completion": " WITH compound_v2_calls as (\n    SELECT *\n    FROM compound_v2.\"Unitroller_call_liquidateCalculateSeizeTokens\"\n),\ncompound_v1_calls as (\n    SELECT *\n    FROM compound_v1.\"MoneyMarket_call_liquidateBorrow\"\n),\nagg_compound_liq_calls as (\n    SELECT\n        v1_calls.\"assetBorrow\" as cTokenBorrowed\n        , v1_calls.\"assetCollateral\" as cTokenCollateral\n        , v1_calls.\"requestedAmountClose\" as repayAmount\n        , v1_calls.\"contract_address\" as contract_address\n        , v1_calls.\"call_success\" as call_success\n        , v1_calls.\"call_tx_hash\" as call_tx_hash\n        , v1_calls.\"call_trace_address\" as call_trade_address\n        ,'v1' as version\n    FROM\n        compound_v1_calls v1_calls\n    UNION\n    SELECT\n        *\n        ,'v2' as version\n    FROM\n        compound_v2_calls\n),\nminutes as (\n    select \n        block_time,\n        hash\n    from ethereum.transactions\n    where block_time > '2019-05-01' \n)\nSELECT\n    minutes.block_time,\n    calls.*\nFROM agg_compound_liq_calls calls\nLEFT JOIN minutes on calls.call_tx_hash = minutes.hash\nORDER BY block_time DESC"}
{"prompt": "This query returns the date, market price, and DutchX price for GEN auctions that were cleared for WETH.", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    --avg(rdn.average / eth.average) as \"Market price\",\n    --(avg(rdn.average / eth.average) / avg(\"buyVolume\" / \"sellVolume\") - 1)*100 as \"GEN discount\",\n    avg(\"buyVolume\" / \"sellVolume\") as \"DutchX price\"\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx\n--, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" gen \n\nWHERE \"sellToken\" = '\\x543ff227f64aa17ea132bf9886cab5db55dcaddf' --gen\nAND \"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\n--AND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\n--AND date_trunc('minute', gen.time) = date_trunc('minute', tx.block_time)\n--AND eth.symbol = 'WETH'\n--AND gen.symbol = 'GEN'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "This query returns data from the zeroex_v2, zeroex_v2.1, and zeroex_v3 exchanges, including the transaction hash, the amount filled, and the token.", "completion": " WITH zeroex AS (\n    SELECT\n        evt_tx_hash as tx_hash,\n        \"takerAssetFilledAmount\" AS amt,\n        CASE\n        -- Set Deversifi ETHWrapper to WETH\n        WHEN SUBSTRING(\"takerAssetData\" FROM 17)\n        IN ('50cb61afa3f023d17276dcfb35abf85c710d1cff',\n            'aa7427d8f17d87a28f5e1ba3adbb270badbe1011') THEN\n            'c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n            -- Set Deversifi USDCWrapper to USDC\n        WHEN SUBSTRING(\"takerAssetData\" FROM 17)\n        IN ('69391cca2e38b845720c7deb694ec837877a8e53') THEN\n            'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'\n        ELSE\n            SUBSTRING(\"takerAssetData\" FROM 17)\n        END AS token\n    FROM\n        zeroex_v2.\"Exchange2.0_evt_Fill\" \nUNION\n        SELECT\n        evt_tx_hash as tx_hash,\n        \"takerAssetFilledAmount\" AS amt,\n        CASE\n        -- Set Deversifi ETHWrapper to WETH\n        WHEN SUBSTRING(\"takerAssetData\" FROM 17)\n        IN ('50cb61afa3f023d17276dcfb35abf85c710d1cff',\n            'aa7427d8f17d87a28f5e1ba3adbb270badbe1011') THEN\n            'c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n            -- Set Deversifi USDCWrapper to USDC\n        WHEN SUBSTRING(\"takerAssetData\" FROM 17)\n        IN ('69391cca2e38b845720c7deb694ec837877a8e53') THEN\n            'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'\n        ELSE\n            SUBSTRING(\"takerAssetData\" FROM 17)\n        END AS token\n    FROM\n        zeroex_v2.\"Exchange2.1_evt_Fill\" \nUNION \n        SELECT\n        evt_tx_hash as tx_hash,\n        \"takerAssetFilledAmount\" AS amt,\n        CASE\n        -- Set Deversifi ETHWrapper to WETH\n        WHEN SUBSTRING(\"takerAssetData\" FROM 17)\n        IN ('50cb61afa3f023d17276dcfb35abf85c710d1cff',\n            'aa7427d8f17d87a28f5e1ba3adbb270badbe1011') THEN\n            'c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n            -- Set Deversifi USDCWrapper to USDC\n        WHEN SUBSTRING(\"takerAssetData\" FROM 17)\n        IN ('69391cca2e38b845720c7deb694ec837877a8e53') THEN\n            'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'\n        ELSE\n            SUBSTRING(\"takerAssetData\" FROM 17)\n        END AS token\n    FROM\n        zeroex_v3.\"Exchange_evt_Fill\"\n\n\n)\n\nSELECT * FROM zeroex LIMIT 10"}
{"prompt": "This SQL query calculates the sum of all bonding amounts per week, based on the block time of each transaction. The data is sourced from the \"BondingManager_evt_Bond\" event in the Livepeer blockchain, and the transaction data is sourced from the Ethereum blockchain.", "completion": " SELECT\ndate_trunc('week', tx.block_time),\nSUM(\"bondedAmount\"/1e18) AS bonded\nFROM livepeer.\"BondingManager_evt_Bond\" s --Replace with relevant event\nLEFT JOIN ethereum.transactions tx ON tx.hash = s.evt_tx_hash\nGROUP BY 1;"}
{"prompt": "This SQL query returns the date and sum of amount deposited in DAI for the past 60 days from the MCDAwarePool and ethereum transactions.", "completion": " SELECT \ndate_trunc('day', block_time),\nsum(amount/1e18)\nFROM pooltogether.\"MCDAwarePool_evt_Deposited\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 60"}
{"prompt": "This SQL query selects the bytea2numeric value divided by 1e1500, and then displays all columns from the table \"POT_call_file\". The query returns the first 10 rows from the table.", "completion": " SELECT bytea2numeric(what)/1e1500, * \nFROM makermcd.\"POT_call_file\"\nLIMIT 10"}
{"prompt": "This query will return the airswap.\"Token_call_balanceLocks\" document from the database.", "completion": " airswap.\"Token_call_balanceLocks\""}
{"prompt": "This query selects the time of each event block and the sum of the amounts of cash taken from the market for each event block. The debt is cumulative, so the debt for each block is the sum of the amounts of cash taken from the market from the beginning of the market up until that block.", "completion": " SELECT evt_block_time,\n       sum(amount) OVER (\n                         ORDER BY evt_block_time ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS debt\nFROM\n  (SELECT evt_block_time,\n          cash / (CASE\n                      WHEN contract_address IN ('\\xfabcdd7c1c3f7b892de64b2b52c4b786c4436dba',\n                                                '\\xa74220b1c2c5b917ef172d5cecf3cd2714d620c2') THEN 1e18\n                      WHEN contract_address IN ('\\x918fc5c7dc1d4ac8f6f3b4d7473153e62c0f045d') THEN 1e6\n                  END) AS amount\n   FROM notional.\"CashMarket_evt_TakeCurrentCash\") a"}
{"prompt": "This SQL query retrieves all the data from the ERC721_evt_Transfer table for the contract address a67D63E68715DCF9b65e45e5118b5fcD1e554b5f, where the \"from\" field is equal to 0x0000000000000000000000000000000000000000. This corresponds to the minters of the Pepsi Mic Drop NFTs.", "completion": " ----------Pepsi Mic Drop Minters----------\n\nselect * from erc721.\"ERC721_evt_Transfer\"\nWHERE \"contract_address\"='\\xa67D63E68715DCF9b65e45e5118b5fcD1e554b5f'\nAND \"from\"='\\x0000000000000000000000000000000000000000'\n\n\n----------Pepsi Mic Drop Secondary Sales----------\n\n-- select * from erc721.\"ERC721_evt_Transfer\"\n-- WHERE \"contract_address\"='\\xa67D63E68715DCF9b65e45e5118b5fcD1e554b5f'\n-- AND \"from\"<>'\\x0000000000000000000000000000000000000000'\n\n\n----------Pepsi Mic Drop all transactions----------\n\n-- select * from erc721.\"ERC721_evt_Transfer\"\n-- WHERE \"contract_address\"='\\xa67D63E68715DCF9b65e45e5118b5fcD1e554b5f'\n\n\n----------Distinct Buyers / Minters----------\n-- with Pepsi as (select date_trunc('month', block_time) as month, count(distinct buyer) as num_buyers from nft.trades\n-- where nft_contract_address in ('\\xa67D63E68715DCF9b65e45e5118b5fcD1e554b5f')\n-- group by 1\n-- )\n\n-- select row_number() over (order by month desc) as rn,  month, sum(num_buyers) over (order by month asc) as num_buyers from Pepsi\n-- where month > now() - interval '11 months'\n\n\n----------Pepsi Mic Drop Minter other transactions----------\n-- WITH\n--     MicDropMinter as (\n--     select \"to\" from erc721.\"ERC721_evt_Transfer\"\n--     WHERE \"contract_address\"='\\xa67D63E68715DCF9b65e45e5118b5fcD1e554b5f'\n--     AND \"from\"='\\x0000000000000000000000000000000000000000'\n--     )\n    \n-- select * from erc721.\"ERC721_evt_Transfer\"\n-- where Translist.\"to\" in MicDropMinter.\"to\""}
{"prompt": "This query returns the number of unique addresses that have generated ENS domains, broken down by week.", "completion": " SELECT date_trunc ('week', tx.block_time) date, COUNT (DISTINCT owner)\n    FROM ((SELECT owner, evt_tx_hash FROM ethereumnameservice.\"EthRegistrarController_evt_NameRegistered\")\n\nUNION ALL\n\n(SELECT owner, evt_tx_hash FROM ethereumnameservice.\"Registrar_old_evt_HashRegistered\"))\n\nAS r\n    LEFT JOIN ethereum.transactions tx\n    ON tx.hash = r.evt_tx_hash\n    GROUP BY 1"}
{"prompt": "Get all the data from the ethereum \"transactions\" table where the block number is greater than 46,147, and limit the results to 10.", "completion": " SELECT * FROM ethereum.\"transactions\"\nWHERE block_number > 46,147\nLIMIT 10"}
{"prompt": "This query returns the total USD volume of trades on IDEX over the past 24 weeks, grouped by week.", "completion": " SELECT date_trunc('week', tx.block_time) as Date,\n       SUM((eth) * p.average) as \"USD volume\"\nFROM ((SELECT tx_hash, \"tradeValues\"[1]/1e18 AS eth FROM idex.\"IDEX1_call_trade\"\n        WHERE \"tradeAddresses\"[1] = '\\x0000000000000000000000000000000000000000')\n        UNION\n        (SELECT tx_hash, \"tradeValues\"[2]/1e18 AS eth FROM idex.\"IDEX1_call_trade\"\n        WHERE \"tradeAddresses\"[2] = '\\x0000000000000000000000000000000000000000')) total\n    INNER JOIN (SELECT hash, block_time FROM ethereum.transactions tx\n                WHERE tx.block_time > now() - interval '24 weeks'\n                AND block_time < date_trunc('week', NOW())) tx\n    ON total.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" p ON p.time = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This query returns the total number of Set Protocol users over time. The data is grouped by date and ordered by ascending date.", "completion": " SELECT date, sum(users) OVER (\n                              ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS total_users\nFROM\n  (SELECT date, count(USER) AS users\n   FROM\n     (SELECT min(date) AS date,\n             account AS USER\n      FROM\n        (SELECT date_trunc('day', min(evt_block_time)) AS date,\n                \"from\" AS account\n         FROM setprotocol.\"Core_evt_SetIssued\" s\n         INNER JOIN ethereum.\"transactions\" tx ON s.evt_tx_hash = tx.hash\n         AND tx.block_time >= '2019-04-10'\n         GROUP BY 2) AS a\n      GROUP BY 2) AS b\n   GROUP BY 1\n   ORDER BY 1) AS c"}
{"prompt": "This query returns the block time, price in USD, and price in ETH for all trades involving the token wNXM (with either the token_a_address or token_b_address set to the wNXM address) in the past day.", "completion": " SELECT block_time,\n       CASE\n           WHEN token_a_symbol = 'WETH' THEN (token_a_amount / (token_b_amount_raw / 1e18)) * price\n           WHEN token_b_symbol = 'WETH' THEN (token_b_amount / (token_a_amount_raw / 1e18)) * price\n       END AS price_usd,\n       CASE\n           WHEN token_a_symbol = 'WETH' THEN (token_a_amount / (token_b_amount_raw / 1e18))\n           WHEN token_b_symbol = 'WETH' THEN (token_b_amount / (token_a_amount_raw / 1e18))\n       END AS price_eth\nFROM dex.\"trades\" d\nINNER JOIN prices.layer1_usd_eth p ON p.minute = date_trunc('minute', d.block_time)\nWHERE (token_a_address = '\\x0d438f3b5175bebc262bf23753c1e53d03432bde'\n       AND token_b_symbol = 'WETH'\n       OR token_b_address = '\\x0d438f3b5175bebc262bf23753c1e53d03432bde'\n       AND token_a_symbol = 'WETH')\n  AND block_time >= now() - interval '1 day'"}
{"prompt": "This SQL query returns the number of liquidations that have occurred on the dYdX Solo Margin protocol for each week, in descending order.", "completion": " SELECT\ndate_trunc('week', block_time) week,\ncount(\"call_tx_hash\") as liquidations\nFROM dydx.\"LiquidatorProxyV1ForSoloMargin_call_liquidate\" s\nLEFT JOIN ethereum.\"transactions\" tx on s.call_tx_hash = tx.hash\nWHERE call_success = true\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "The following SQL query returns information on buyers of tokens from the Uniswap exchange, including the buyer's address, the contract address, the transaction hash, the amount of ETH sold, and the block time.", "completion": " WITH uniswap AS (\n(SELECT buyer, contract_address, evt_tx_hash, eth_sold AS eth, block_time\n FROM uniswap.\"Exchange_evt_TokenPurchase\" pur\nLEFT JOIN\n    (SELECT hash, block_time\n      FROM ethereum.transactions\n    --   WHERE block_time >= '2019-12-01'\n    --     AND block_time < '2019-12-02'\n      WHERE block_time < date_trunc('day', NOW())\n        AND block_time >= date_trunc('day', NOW()) - interval '1 day'\n    ) tx ON pur.evt_tx_hash = tx.hash)\nUNION ALL\n(SELECT buyer, contract_address, evt_tx_hash, eth_bought AS eth, block_time\n  FROM uniswap.\"Exchange_evt_EthPurchase\" pur\nLEFT JOIN\n    (SELECT hash, block_time FROM ethereum.transactions\n    --   WHERE block_time >= '2019-12-01'\n    --     AND block_time < '2019-12-02'\n      WHERE block_time < date_trunc('day', NOW())\n        AND block_time >= date_trunc('day', NOW()) - interval '1 day'\n    ) tx ON pur.evt_tx_hash = tx.hash)\n)\n\n-- SELECT buyer, count(1)\n--   FROM uniswap\n-- group by buyer\n-- order by 1 desc\n-- -- LIMIT 10;\n\n-- SELECT *\n--   FROM ethereum.transactions\n--  WHERE block_number > 9000000\n-- LIMIT 10;\n\n-- select *\n-- FROM uniswap.\"Exchange_evt_TokenPurchase\" pur\n-- order by evt_index\n-- limit 100\n\n"}
{"prompt": "The SQL query returns information on the number of successful bites and busts from the MakerDAO SCD (Single-Collateral Dai) system, grouped by week.", "completion": " WITH bite_success AS (\n    SELECT\n        s.*,\n        tx.*\n    FROM\n        maker.\"SaiTub_call_bite\" s\n    LEFT JOIN\n        ethereum.\"transactions\" tx\n    ON\n        s.call_tx_hash = tx.hash\n    WHERE\n        s.call_success = true\n),\nbust_success AS (\n    SELECT\n        s.*,\n        tx.*\n    FROM\n        maker.\"SaiTap_call_bust\" s\n    LEFT JOIN\n        ethereum.\"transactions\" tx\n    ON\n        s.call_tx_hash = tx.hash\n    WHERE\n        s.call_success = true\n),\nbites_with_busts AS (\n    SELECT \n        bite.block_time\n        , bite.call_tx_hash\n        , bite.cup\n        , bite.call_trace_address\n        , (bust.wad IS NOT NULL) as did_bust\n    FROM bite_success bite\n    LEFT JOIN bust_success bust\n    ON bite.call_tx_hash = bust.call_tx_hash\n    ORDER BY block_time DESC\n)\nSELECT\n    date_trunc('week', block_time) as week\n    , COUNT(1) as num_bites\n    , SUM(case when did_bust is true then 1 else 0 end) as num_busts\n    , 1.0 * SUM(case when did_bust is true then 1 else 0 end) / count(1) as percent_busted\nFROM\n    bites_with_busts\nGROUP BY 1"}
{"prompt": "This SQL query selects the symbol and the sum of the makerAmount and the average price of the token from the airswap Exchange_evt_Filled table. The query joins the ethereum.transactions table on the tx_hash and the coincap.tokens/usd table on the asset and the date_trunc('minute', tx.block_time) = p.time. The query groups the results by the symbol.", "completion": " select p.symbol, SUM(f.\"makerAmount\" * p.average) FROM airswap.\"Exchange_evt_Filled\" f\nINNER JOIN ethereum.transactions tx ON f.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" p ON p.asset = f.\"makerToken\" AND date_trunc('minute', tx.block_time) = p.time\nGROUP BY 1;"}
{"prompt": "The SQL query will select the date, pool address, pool, fees, and total from the table. The table will contain information on the Ethereum transactions that have taken place in the past 21 days. The query will order the table by date and total.", "completion": " select \n    Date,\n    pool_address,\n    pool,\n    fees,\n    Total\nFROM (\nSELECT\n    date_trunc('weeks', tx.block_time) AS Date,\n    ether.contract_address as pool_address,\n    (SELECT symbol FROM erc20.tokens WHERE contract_address =\n        (SELECT token FROM uniswap.\"Factory_evt_NewExchange\"  WHERE exchange = ether.contract_address LIMIT 1) \n    LIMIT 1) as pool,\n    SUM(eth*p.price)*0.003/1e18 AS fees,\n    SUM(SUM(eth*p.price)*0.003/1e18) OVER (PARTITION BY ether.contract_address ORDER BY date_trunc('weeks', tx.block_time)) AS TOTAL\nFROM (\n    SELECT evt_tx_hash, eth_sold AS eth, contract_address FROM uniswap.\"Exchange_evt_TokenPurchase\" UNION ALL\n    SELECT evt_tx_hash, eth_bought AS eth, contract_address FROM uniswap.\"Exchange_evt_EthPurchase\"\n) ether\nINNER JOIN (\n    SELECT hash, block_time FROM ethereum.transactions tx\n    WHERE tx.block_time > now() - interval '21 days'\n      AND block_time < date_trunc('day', NOW())\n) tx ON ether.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time) WHERE p.symbol = 'ETH'\nGROUP BY 1, 2\nORDER BY 1 DESC, 5 DESC) a\nWHERE pool = 'MKR'\n\n"}
{"prompt": "This SQL query returns the total amount of each token borrowed on the Compound platform in the last 8 weeks, broken down by week.", "completion": " SELECT date_trunc('week', block_time),\n       token_symbol,\n       SUM(borrow_amount_usd)\nFROM compound.view_borrow\nWHERE block_time > now() - interval '8 weeks'\nGROUP BY 1,\n         2\nORDER BY 1;"}
{"prompt": "This query returns the total amount of money bet on each symbol over time.", "completion": " with data as (\n    SELECT eth.block_time AS ttime,\n       e.evt_tx_hash AS \"txHash\",\n       e.from AS \"bettorAddress\",\n       e.value/1e18 as value,\n       \n       case \nwhen erc.symbol= 'WETH' THEN e.value/1e18 * p_weth.price\nWHEN erc.symbol = 'DAI' THEN e.value/1e18\nend\nas usd_value,\n      erc.symbol  as symbol\nFROM erc20.\"ERC20_evt_Transfer\" e\nJOIN ethereum.transactions eth ON (eth.hash = e.evt_tx_hash)\nJOIN erc20.tokens erc ON (e.contract_address = erc.contract_address)\nJOIN \nWHERE \n-- date_trunc('day', eth.block_time) >= date_trunc('year', now())\n-- -- add ~  - interval '1 day'  ~ here to shift by any days/weeks or months if desired \n-- AND\ne.to = '\\x8888888883585b9a8202db34d8b09d7252bfc61c'\nORDER BY eth.block_time DESC)\n\nSELECT\n  data.ttime,\n  sum(value) over (partition by \"symbol\" order by data.ttime) AS \"totalbet\",\n symbol\nfrom data"}
{"prompt": "This query returns the number of trades that occurred on each day, ordered by date.", "completion": " SELECT date_trunc('days', tx.block_time) AS Date,\n        COUNT(*) AS \"Number of Trades\"\nFROM dexag.\"DexTrading_evt_Trade\" d\nLEFT JOIN ethereum.transactions tx\nON d.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This query returns the monthly transaction volume for Dai and Sai, for all months since January 2019.", "completion": " WITH dai AS (\nSELECT \ndate_trunc('month', evt_block_time) as month,\nsum(\"wad\"/1e18) as transfer_volume \nFROM makermcd.\"DAI_evt_Transfer\" s\nGROUP BY 1\nORDER BY 1 desc\n),\n\nsai AS (\nSELECT \ndate_trunc('month', evt_block_time) as month,\nsum(\"wad\"/1e18) as transfer_volume \nFROM maker.\"SAI_evt_Transfer\" s\nWHERE evt_block_time > '2019-01-01'\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT sai.month, dai.transfer_volume AS \"Dai tx volume\", sai.transfer_volume AS \"Sai tx volume\"\nFROM sai\nFULL OUTER JOIN dai on dai.month = sai.month"}
{"prompt": "The SQL query below returns the total fees paid in USD for each day, for the ZRX 0x v3 exchange. The data is sourced from the 'Exchange_evt_Fill' table, and includes the price of WETH (in USD) at the time of each fill.", "completion": " SELECT \ndate_trunc('day', evt_block_time) as day,\nsum(\"protocolFeePaid\"/1e18*p.price) as fees_paid FROM zeroex_v3.\"Exchange_evt_Fill\"\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', evt_block_time)\nWHERE p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 desc"}
{"prompt": "This SQL query returns the number of Binance DEX trades that occurred each day, for the past 20 days. The trade_time column is truncated to the day, and then the GROUP BY and ORDER BY clauses ensure that the days are in chronological order. The query returns the day and the number of trades that occurred on that day.", "completion": " SELECT date_trunc('day', trade_time), COUNT(*)\nFROM trades\nGROUP BY 1\nORDER BY 1\nLIMIT 20;"}
{"prompt": "This query returns the average price of SuperRare artwork sold each week, in ETH.", "completion": " SELECT date AS week,\n       sum(round((\"_amount\" / 1e18)::numeric, 2)) / count(*) AS eth_price\nFROM\n  (SELECT date_trunc('week', evt_block_time) AS date,\n          \"_amount\"\n   FROM superrare.\"SuperRareMarketAuction_evt_Sold\"\n   UNION ALL SELECT date_trunc('week', evt_block_time) AS date,\n                    \"_amount\"\n   FROM superrare.\"SuperRare_evt_Sold\"\n   UNION ALL SELECT date_trunc('week', evt_block_time) AS date,\n                    \"_amount\"\n   FROM superrare.\"SuperRareMarketAuction_evt_AcceptBid\"\n   UNION ALL SELECT date_trunc('week', evt_block_time) AS date,\n                    \"_amount\"\n   FROM superrare.\"SuperRare_evt_AcceptBid\"\n   UNION SELECT date_trunc('week', block_time),\n                bytea2numeric(substring(DATA\n                                          FROM 33\n                                          FOR 32))\n   FROM ethereum.\"logs\"\n   WHERE contract_address = '\\x8c9f364bf7a56ed058fc63ef81c6cf09c833e656'\n     AND topic1 = '\\xea6d16c6bfcad11577aef5cc6728231c9f069ac78393828f8ca96847405902a9') a\nGROUP BY 1"}
{"prompt": "This SQL query retrieves data from the \"DEXAdapter_evt_LogTransferIn\" table in the \"renproject\" database. The query returns the first 10 rows of data from the table.", "completion": " SELECT *\nFROM renproject.\"DEXAdapter_evt_LogTransferIn\"\nLIMIT 10"}
{"prompt": "This query returns the total fees collected by each Uniswap pool over the past 365 days, in USD.", "completion": " SELECT\n    date_trunc('weeks', tx.block_time) AS Date,\n    ether.contract_address as pool_address,\n    (SELECT symbol FROM erc20.tokens WHERE contract_address =\n        (SELECT token FROM uniswap.\"Factory_evt_NewExchange\" WHERE exchange = ether.contract_address LIMIT 1)\n    LIMIT 1) as pool,\n    SUM(eth*p.price)*0.003/1e18 AS fees,\n    SUM(SUM(eth*p.price)*0.003/1e18) OVER (PARTITION BY ether.contract_address ORDER BY date_trunc('weeks', tx.block_time)) AS TOTAL\nFROM (\n    SELECT evt_tx_hash, eth_sold AS eth, contract_address FROM uniswap.\"Exchange_evt_TokenPurchase\" UNION ALL\n    SELECT evt_tx_hash, eth_bought AS eth, contract_address FROM uniswap.\"Exchange_evt_EthPurchase\"\n) ether\nINNER JOIN (\n    SELECT hash, block_time FROM ethereum.transactions tx\n    WHERE tx.block_time > now() - interval '365 days'\n      AND block_time < date_trunc('day', NOW())\n) tx ON ether.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time) WHERE p.symbol = 'ETH'\nGROUP BY 1, 2\nORDER BY 1 DESC, 5 DESC;\n"}
{"prompt": "This SQL query selects the date of the week for each trade and counts the number of trades. The trade count is then ordered by week.", "completion": " SELECT date_trunc('week', trades.trade_time),\n      count(*)\nFROM trades\nGROUP BY 1\nORDER BY 1 ;"}
{"prompt": "This SQL query returns the number of times the WETH symbol was traded in the last 200 days, truncated to the nearest day.", "completion": " SELECT date_trunc('day', p.minute), COUNT(*)\nFROM prices.usd p\nWHERE p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1 DESC\nLIMIT 200"}
{"prompt": "This SQL query shows the outstanding MCD balance for each day in the past 10 days.", "completion": " WITH mint as\n(SELECT\ndate_trunc('day', block_time) as day,\nsum(\"wad\"/1e18) FROM makermcd.\"DAI_call_mint\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nWHERE call_success = 'true'\nGROUP BY 1\nORDER BY 1 desc),\n\nburn as\n(SELECT\ndate_trunc('day', block_time) as day,\nsum(\"wad\"/1e18) FROM makermcd.\"DAI_call_burn\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nWHERE call_success = 'true'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10)\n\nSELECT mint.\"day\", mint.\"sum\"-burn.\"sum\" \nFROM mint\nLEFT JOIN burn ON mint.day = burn.day\nGROUP BY 2\nORDER BY 1 desc\nLIMIT 20\n"}
{"prompt": "This query returns the amount of OWL tokens burned, in ETH, over time. The data is ordered by date, with the most recent data appearing first.", "completion": " /*\nSELECT sum(value)/1e18 as burned\nFROM gnosis.\"OWLProxy_evt_Transfer\"\nwhere \"to\" = '\\x0000000000000000000000000000000000000000'; */\n\nSELECT date_trunc('day', tx.block_time) AS date,\n       sum(e.value / 1e18) OVER (\n                                 ORDER BY tx.block_time)\nFROM gnosis.\"OWLProxy_evt_Transfer\" e\nLEFT JOIN ethereum.transactions tx ON e.tx_hash = tx.hash\nWHERE e.to = '\\x0000000000000000000000000000000000000000'\nORDER BY date;"}
{"prompt": "This query returns the balances of all MKR holders, taking into account both outgoing and incoming transfers.", "completion": " WITH outbound AS\n  (SELECT \"src\",\n          SUM(wad/1e18) amt\n   FROM maker.\"MKR_evt_Transfer\"\n   GROUP BY 1\n   ),\n     inbound AS\n  (SELECT \"dst\",\n          SUM(wad/1e18) amt\n   FROM maker.\"MKR_evt_Transfer\"\n   GROUP BY 1)\nSELECT inbound.\"dst\",\n       CASE\n           WHEN outbound.amt IS NULL THEN inbound.amt\n           ELSE inbound.amt - outbound.amt\n       END AS balance\nFROM inbound\nLEFT JOIN outbound ON outbound.\"src\" = inbound.\"dst\"\nORDER BY balance DESC;"}
{"prompt": "This SQL query retrieves data from the Ethereum Name Service (ENS) and Wyvern Exchange databases. The query specifically retrieves data from the \"EthRegistrarController_evt_Transfer\" and \"WyvernExchange_evt_OrdersMatched\" tables, respectively. The query also joins these two tables on the \"evt_tx_hash\" column. Finally, the query limits the results to the first 10 rows.", "completion": " SELECT *\nFROM ethereumnameservice.\"EthRegistrarController_evt_Transfer\" r\nLEFT JOIN wyvern.\"WyvernExchange_evt_OrdersMatched\" m\nON m.evt_tx_hash = r.evt_tx_hash\n/*LEFT JOIN ethereum.transactions tx\nON tx.hash = r.evt_tx_hash*/\nLIMIT 10\n\n"}
{"prompt": "This SQL query returns the volume of Ethereum traded for each pair over the past 30 days.", "completion": " select date_trunc('day',block_time) as date,\n        case when maker_symbol < taker_symbol then maker_symbol || '-' || taker_symbol\n                else taker_symbol || '-' || maker_symbol end as pair ,\n        sum(usd_amount) as volume\nfrom hashflow.trades\nwhere block_time >= now() - interval '30 days'\n        and fill_status is true\n    group by 1, 2\n    "}
{"prompt": "This SQL query returns a list of all the Safes on the Ethereum network, sorted by the amount of ETH stored in each Safe.", "completion": " -- TODO: change dbt_jeff_safe_ethereum.eth_transfers --> safe_ethereum.eth_transfers after 22.08.2022\n\nwith per_address as (\n    select address, sum(amount_raw) / 1e18 as amount\n    from dbt_jeff_safe_ethereum.eth_transfers\n    group by address\n)\n\nselect \n    row_number() over(order by amount desc) as n, \n    concat('<a href=\"https://etherscan.io/address/', address,'\">', address, '</a>') as safe_address,\n    amount\nfrom per_address\norder by amount desc\n"}
{"prompt": "This query returns the total supply of the DAT token, the amount of DAT tokens that have been sold, the amount of DAT tokens that have been burned, and the buyback reserve.", "completion": " WITH burnedFair AS\n  (SELECT SUM(\"value\") amt\n   FROM fairmint.\"DAT_evt_Transfer\"\n   WHERE contract_address = '\\x{{ contract_address }}'\n     AND \"to\" = '\\x0000000000000000000000000000000000000000'),\n     mintedFair AS\n  (SELECT SUM(\"value\") amt\n   FROM fairmint.\"DAT_evt_Transfer\"\n   WHERE contract_address = '\\x{{ contract_address }}'\n     AND \"from\" = '\\x0000000000000000000000000000000000000000'),\n     soldFair AS\n  (SELECT sum(\"_fairValue\") amt\n   FROM fairmint.\"DAT_evt_Sell\"),\n     outboundUsdc AS\n  (SELECT SUM(bytea2numeric(DATA)) amt\n   FROM ethereum.logs\n   WHERE topic1='\\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' -- Transfer\n\n     AND topic2='\\x000000000000000000000000{{ contract_address }}' -- to dat\nAND contract_address = '\\x7d9C10E2F7AF22200126A0EA6826c1A16F8F6d38' -- Fake USDC\n ),\n     inboundUsdc AS\n  (SELECT SUM(bytea2numeric(DATA)) amt\n   FROM ethereum.logs\n   WHERE topic1='\\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' -- Transfer\n\n     AND topic3='\\x000000000000000000000000{{ contract_address }}' -- from dat\nAND contract_address = '\\x7d9C10E2F7AF22200126A0EA6826c1A16F8F6d38' -- Fake USDC\n )\nSELECT case when burnedFair.amt is null then mintedFair.amt/1e18 else (mintedFair.amt - burnedFair.amt)/1e18 end AS total_supply,\n       case when soldFair.amt is null then 0 else soldFair.amt/1e18 end AS sold,\n       case when burnedFair.amt is null then 0 when soldFair.amt is null then burnedFair.amt/1e18 else (burnedFair.amt - soldFair.amt)/1e18 end AS burned_supply,\n       CASE\n           WHEN inboundUsdc.amt IS NULL THEN 0\n           WHEN outboundUsdc.amt IS NULL THEN inboundUsdc.amt/1e6\n           ELSE (inboundUsdc.amt - outboundUsdc.amt)/1e6\n       END AS buyback_reserve\nFROM mintedFair,\n     burnedFair,\n     soldFair,\n     outboundUsdc,\n     inboundUsdc;"}
{"prompt": "The following SQL query calculates the total cost of gas used by Loopring on the Ethereum network. It does this by first getting the transaction hashes for all the Loopring transactions from the \"DEXBetaV1_call_commitBlock\" and \"DEXBetaV1_call_verifyBlocks\" tables. It then looks up the gas used and gas price for each transaction in the \"ethereum.transactions\" table and calculates the total cost.", "completion": " WITH loopring_transactions AS(\nSELECT call_tx_hash as tx_hash\nFROM loopring.\"DEXBetaV1_call_commitBlock\" c\nUNION\nSELECT call_tx_hash as tx_hash\nFROM loopring.\"DEXBetaV1_call_verifyBlocks\"\n)\nSELECT sum(tx.gas_used * tx.gas_price)/1e18 as \"total cost\"\nFROM loopring_transactions b\nINNER JOIN ethereum.transactions tx ON tx.hash = b.tx_hash"}
{"prompt": "This SQL query returns the following information for each event in the dydx.SoloMargin_evt_LogIndexUpdate table:\n\n- the block time of the event\n- the hash of the event transaction\n- the from address of the event\n- the asset type (ETH, DAI, or USDC)\n- the borrow index\n- the supply index", "completion": " SELECT eth.block_time AS ttime,\n        eth.hash AS \"txHash\",\n        eth.from AS \"interactionAddress\",\n        CASE dep.\"market\"::integer \n          WHEN 0 THEN\n            'ETH'::text\n          WHEN 1 THEN\n            'DAI'::text\n          WHEN 2 THEN\n            'USDC'::text\n        END AS \"Asset\",\n        ((dep.\"index\"::json#>'{\"borrow\"}')::json::text::decimal / 1e18) AS \"borrowIndex\",\n        ((dep.\"index\"::json#>'{\"supply\"}')::json::text::decimal / 1e18) AS \"supplyIndex\"\nFROM dydx.\"SoloMargin_evt_LogIndexUpdate\" dep\nJOIN ethereum.transactions eth ON eth.hash = dep.evt_tx_hash\nWHERE date_trunc('minute', eth.block_time) >= date_trunc('month', now()) - interval '1 month'\nORDER BY eth.block_time DESC\n"}
{"prompt": "This SQL query calculates the total USD volume per token for each day on the DutchX exchange. The query first calculates the total buy volume and total sell volume for each token, then sums these together to get the total daily volume.", "completion": " WITH symbols (symbol, asset) AS (VALUES                    \n     ('WETH', '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'),\n     ('RDN', '\\x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6'), \n     ('OMG', '\\xd26114cd6ee289accf82350c8d8487fedb8a0c07'), \n     ('KNC', '\\xdd974d5c2e2928dea5f71b9825b8b646686bd200'), \n     ('GEN', '\\x543ff227f64aa17ea132bf9886cab5db55dcaddf'), \n     ('MKR', '\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'), \n     ('DAI', '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'), \n     ('GNO', '\\x6810e776880c02933d47db1b9fc05908e5386b96'), \n     ('BNT', '\\x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c'), \n     ('ZRX', '\\xe41d2489571d322189246dafa5ebde1f4699f498'), \n     ('SNT', '\\x744d70fdbe2ba4cf95131626614a1763df805b9e'), \n     ('REQ', '\\x8f8221afbb33998d8584a2b05749ba73c37a938a'), \n     ('ST', '\\x2c4e8f2d746113d0696ce89b35f0d8bf88e0aeca'),  \n     ('LRC', '\\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'), \n     ('OCEAN', '\\x985dd3d42de1e256d09e1c10f112bccb8015ad41'),\n     ('BAT', '\\x0d8775f648430679a709e98d2b0cb6250d2887ef'), \n     ('REP', '\\x1985365e9f78359a9b6ad760e32412f4a445e862'), \n     ('LOOM', '\\xa4e8c3ec456107ea67d3075bf9e3df3a75823db0'),\n     ('MANA', '\\x0f5d2fb29fb7d3cfee444a200298f468908cc942'),\n     ('ANT', '\\x960b236a07cf122663c4303350609a66a7b288c0'), \n     ('LINK', '\\x514910771af9ca656af840dff83e8264ecf986ca'),\n     ('NMR', '\\x1776e1f26f98b1a5df9cd347953a26dd3cb46671'), \n     ('POLY', '\\x9992ec3cf6a55b00978cddf2b27bc6882d88d1ec'),\n     ('BLZ', '\\x5732046a883704404f284ce41ffadd5b007fd668'), \n     ('DNT', '\\x0abdace70d3790235af448c88547603b945604ea')  \n),\nbuyWETH as (\nSELECT\n    tx.block_time::date as date,\n    symbols.symbol as symbol,\n    SUM(cleared.\"buyVolume\"/1e18*price.average) as buyWETH\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" cleared\nINNER JOIN ethereum.transactions tx ON cleared.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = price.time AND cleared.\"buyToken\" = price.asset\nINNER JOIN symbols ON symbols.asset::bytea = cleared.\"sellToken\"\nWHERE cleared.\"buyToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nGROUP BY 1, 2),\n\nsellWETH as (\nSELECT\n    tx.block_time::date as date,\n    symbols.symbol as symbol,\n    SUM(cleared.\"sellVolume\"/1e18*price.average) as sellWETH\n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" cleared\nINNER JOIN ethereum.transactions tx ON cleared.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" price ON date_trunc('minute', tx.block_time) = price.time AND cleared.\"sellToken\" = price.asset\nINNER JOIN symbols ON symbols.asset::bytea = cleared.\"buyToken\"\nWHERE cleared.\"sellToken\" = '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nGROUP BY 1, 2\n)\n\nSELECT buyWETH.date, buyWETH.symbol, SUM(buyWETH + sellWETH) as total\nFROM buyWETH \nJOIN sellWETH ON buyWETH.date = sellWETH.date AND sellWETH.symbol = buyWETH.symbol\nGROUP BY 1, 2\nORDER BY 1, 2\n;"}
{"prompt": "Get all the data from the erc20.tokens table.", "completion": " SELECT * FROM erc20.tokens;"}
{"prompt": "This query returns the average deposit per user per day for the past 60 days.", "completion": " WITH deposit AS\n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(e.\"value\"/1e18) as deposits\nFROM erc20.\"ERC20_evt_Transfer\" e\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nWHERE e.\"to\" = '\\x29fe7D60DdF151E5b52e5FAB4f1325da6b2bD958' and e.\"contract_address\" = '\\x6b175474e89094c44da98b954eedeac495271d0f'\nGROUP BY 1\nORDER BY 1 desc\n), \n\nusers AS \n(SELECT\ndate_trunc('day', block_time) as day,\ncount(distinct \"from\") as distinct_users\nFROM ethereum.\"transactions\"\nWHERE \"to\" = '\\x29fe7D60DdF151E5b52e5FAB4f1325da6b2bD958' and \"success\" = 'true'\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT deposit.\"day\", sum(deposits/distinct_users) as av_deposit_per_user\nFROM deposit, users\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 60"}
{"prompt": "This query returns the number of MultiSig transactions over time. It groups the data by day and orders it by ascending day.", "completion": " select block_time::date as day, count(*) as num_ms_tx\nfrom gnosis.\"MultiSigWallet_call_executeTransaction\" ms\nINNER JOIN ethereum.transactions tx ON ms.tx_hash = tx.hash\ngroup by day\norder by day asc"}
{"prompt": "This SQL query counts the number of transactions, the total ETH spent on gas, and the USD value at the time for an account.", "completion": " -- with current_price AS (\n--     SELECT *\n--       FROM coincap.\"tokens/usd\" c1\n--      WHERE time = (\n--             SELECT max(time)\n--               FROM coincap.\"tokens/usd\" c2\n--              WHERE c1.symbol = c2.symbol)\n-- ),\n -- SELECT count(1) as \"Number of transactions\",\n--     SUM((tx.gas_price * r.gas_used)/1e18) as \"Total ETH spent on gas\",\n--     SUM(((tx.gas_price * r.gas_used)/1e18)*p.average) AS \"USD value at the time\"\n-- FROM ethereum.transactions tx\n-- INNER JOIN ethereum.receipts r ON tx.hash = r.tx_hash\n-- INNER JOIN coincap.\"tokens/usd\" p ON p.time = date_trunc('minute', r.block_time)\n--     AND p.symbol = 'WETH'\n-- WHERE tx.\"from\" = '\\x'\n -- SELECT *\n--     -- tx.gas_price, tx.hash\n--     -- , r.block_time, r.gas_used\n--     -- count(1) as \"Number of transactions\",\n--     -- SUM((tx.gas_price * r.gas_used)/1e18) as \"Total ETH spent on gas\",\n--     -- SUM(((tx.gas_price * r.gas_used)/1e18)*p.average) AS \"USD value at the time\"\n-- FROM ethereum.transactions tx\n-- WHERE tx.hash = '\\x9c58613f48e3e4cdb66cec271d80c121782fde56177c6c803fe3774a9b1f25be';\n-- INNER JOIN ethereum.receipts r ON tx.hash = r.tx_hash\n-- INNER JOIN coincap.\"tokens/usd\" p ON p.time = date_trunc('minute', r.block_time)\n--     AND p.symbol = 'WETH'\n-- WHERE tx.\"from\" = '\\x'\n-- WHERE tx.hash = '\\xbfed66767c7d69ca8c5f5469bac5a657b6ac1a3bc9691f3c6bca256b69a4450a';\n-- WHERE tx.hash = '\\x8f72592b5fdac6359d65b6e76d808a462eab0fbf0380565293c4bc33ef0f4976';\n\nSELECT *\nFROM ethereum.transactions tx\nWHERE tx.hash = '\\x9c58613f48e3e4cdb66cec271d80c121782fde56177c6c803fe3774a9b1f25be';\n\n"}
{"prompt": "This SQL query will return the date, to and from addresses, underlying token, ctoken symbol, and sum of the amount for all transfers made in the last 8 weeks from the Compound view transfer ctoken table.", "completion": " SELECT\ndate_trunc('week', block_time),\n\"to\" as to_address, \n\"from\" as from_address,\nunderlying_token,\nctoken_symbol,\nSUM(\"amount\")\nFROM dune_user_generated.\"compound_view_transfer_ctoken\"\nWHERE block_time > now() - interval '8 weeks' \nGROUP BY 1,2,3,4,5 \nORDER BY 1;\n\n-- See data table examples:\n--SELECT * FROM dune_user_generated.\"compound_view_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_borrow\" when format is decided\n--SELECT * FROM dune_user_generated.\"compound_view_repay_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_repay_borrow\" when format is decided"}
{"prompt": "This query returns the month, auction volume, and sales volume for each month. The data is sourced from the SuperRareMarketAuction_evt_Sold and SuperRare_evt_Sold table, as well as the ethereum.\"logs\" table.", "completion": " SELECT a.MONTH,\n       auction_volume,\n       sales_volume\nFROM\n  (SELECT date_trunc('month', evt_block_time) AS MONTH,\n          sum(_amount / 1e18 * p.price) AS sales_volume\n   FROM\n     (SELECT evt_block_time,\n             _amount\n      FROM superrare.\"SuperRareMarketAuction_evt_Sold\"\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRare_evt_Sold\") bb\n   INNER JOIN prices.\"layer1_usd_eth\" p ON date_trunc('minute', evt_block_time) = p.minute\n   GROUP BY 1) b\nLEFT JOIN\n  (SELECT date_trunc('month', evt_block_time) AS MONTH,\n          sum(_amount / 1e18 * p.price) AS auction_volume\n   FROM\n     (SELECT evt_block_time,\n             _amount\n      FROM superrare.\"SuperRareMarketAuction_evt_AcceptBid\"\n      UNION ALL SELECT evt_block_time,\n                       _amount\n      FROM superrare.\"SuperRare_evt_AcceptBid\"\n      UNION ALL SELECT block_time,\n                       bytea2numeric(substring(DATA\n                                                 FROM 33\n                                                 FOR 32))\n      FROM ethereum.\"logs\"\n      WHERE contract_address = '\\x8c9f364bf7a56ed058fc63ef81c6cf09c833e656'\n        AND topic1 = '\\xea6d16c6bfcad11577aef5cc6728231c9f069ac78393828f8ca96847405902a9') aa\n   INNER JOIN prices.\"layer1_usd_eth\" p ON date_trunc('minute', evt_block_time) = p.minute\n   GROUP BY 1) a ON b.month = a.month"}
{"prompt": "This query returns the number of new owners added to Gnosis Safe contracts each day, for the past 1000 days.", "completion": " SELECT block_time::date as day, count(*) as OwnersAdded\nFROM gnosis_safe.\"Safev1.0.0_call_addOwnerWithThreshold\" OwnersAdded\nINNER JOIN ethereum.transactions tx ON OwnersAdded.call_tx_hash = tx.hash\ngroup by day\norder by day desc\nLIMIT 1000\n"}
{"prompt": "This SQL query returns the top borrowers of a particular token on the Compound platform. The query returns the borrower, the underlying symbol of the token borrowed, and the amount of the token borrowed.", "completion": " WITH token_info (address, symbol, decimals, underlying_symbol, underlying_decimals) AS\n    (VALUES\n    ('\\x6c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e', 'cBAT', 8, 'BAT', 18),\n    ('\\xf5dce57282a584d2746faf1593d3121fcac444dc', 'cDAI', 8, 'DAI', 18),\n    ('\\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5', 'cETH', 8, 'ETH', 18),\n    ('\\x158079ee67fce2f58472a96584a73c7ab9ac95c1', 'cREP', 8, 'REP', 18),\n    ('\\x39aa39c021dfbae8fac545936693ac917d5e7563', 'cUSDC', 8, 'USDC', 6),\n    ('\\xb3319f5d18bc0d84dd1b4825dcde5d5f7266d407', 'cZRX', 8, 'ZRX', 18),\n    ('\\xC11b1268C1A384e55C48c2391d8d480264A3A7F4', 'cWBTC', 8, 'WBTC', 8)\n    )\n\nSELECT borrower, underlying_symbol, SUM(\"borrowAmount\" / 10^(underlying_decimals)) as amount\nFROM compoundv2.\"cErc20_evt_Borrow\" b \nLEFT JOIN token_info t ON t.address::bytea = b.address::bytea\nWHERE underlying_symbol = '{{ Token symbol }}'\nGROUP BY 1, 2\nORDER BY 3 DESC;"}
{"prompt": "Please select all fields from the makermcd.\"VAT_call_move\" table and limit the result to 10 entries.", "completion": " SELECT * FROM makermcd.\"VAT_call_move\"\nLIMIT 10"}
{"prompt": "This SQL query returns the number of proxies created by InstaDapp.", "completion": " SELECT proxy FROM instadapp_v2.\"InstaRegistry_evt_Created\";"}
{"prompt": "This SQL query returns the number of unique suppliers on a weekly basis.", "completion": " SELECT date_trunc('week', tx.block_time) AS week,\n          count(DISTINCT s.account) as uniqueSuppliers\nFROM compound.\"MoneyMarket_evt_SupplyReceived\" s \nLEFT JOIN ethereum.transactions tx \nON tx.hash = s.tx_hash \nGROUP BY week;\n"}
{"prompt": "This query returns the DAI balance and USD value for an account.", "completion": " WITH outbound AS\n  (SELECT SUM(wad/1e18) amt\n   FROM maker.\"SAI_evt_Transfer\"\n   WHERE src = '\\x{{ userAddress }}'\n     AND contract_address = '\\x{{ daiAddress }}' ),\n     inbound AS\n  (SELECT SUM(wad/1e18) amt\n   FROM maker.\"SAI_evt_Transfer\"\n   WHERE dst = '\\x{{ userAddress }}'\n     AND contract_address = '\\x{{ daiAddress }}' ),\n     price AS\n  (SELECT price\n   FROM prices.usd\n   WHERE symbol='DAI'\n   ORDER BY minute DESC\n   LIMIT 1)\nSELECT dai_balance,\n       usd_per_dai,\n       (dai_balance * usd_per_dai) AS usd_value FROM\n  (SELECT CASE\n              WHEN outbound.amt IS NULL THEN inbound.amt\n              ELSE inbound.amt - outbound.amt\n          END AS dai_balance, price.price AS usd_per_dai\n   FROM inbound, outbound, price) AS TEMP;"}
{"prompt": "This SQL query returns a table of data with the most popular events from the last week. The table includes the columns: _id, name, block_number, and count (*).", "completion": " SELECT *\nFROM ethereum.logs l\nJOIN ethereum.blocks b ON l.block_number = b.number\nWHERE b.number > 7989040\n--group by l.topic1\n--order by count(*) desc"}
{"prompt": "This SQL query shows the number of successful transactions made to a specific Ethereum address, grouped by day. The results are ordered by date, with the most recent days appearing first.", "completion": " SELECT date_trunc('day', block_time) AS date,\n       COUNT(*) AS COUNT\nFROM ethereum.\"transactions\"\nWHERE \"to\" = '\\x1f0d1de1558582ad6f13763f477119a1455502af'\n  AND \"success\" = TRUE\nGROUP BY 1\nORDER BY 1 DESC;"}
{"prompt": "This query returns the total amount of money spent on NFTs in USD for the month of July 2022.", "completion": " select sum(usd_amount) / 1E9 as usd\n    -- (case when T.platform= 'Opensea' then sum(usd_amount) end) as \"Opensea\",\n    -- (case when T.platform= 'rarible' then sum(usd_amount) end) as \"rarible\",\n    -- (case when T.platform= 'superrare' then sum(usd_amount) end) as \"superrare\",\n    -- (case when T.platform= 'looksrare' then sum(usd_amount) end) as \"looksrare\",\n    -- (case when T.platform= 'larvalabs contract' then sum(usd_amount) end) as \"larvalabs contract\",\n    -- (case when T.platform= 'foundation' then sum(usd_amount) end) as \"foundation\"\n\nfrom nft.\"trades\" AS T\n            where tx_hash <> '\\x0bffc7955c9b587d0bd8bb3db8e6ec13f0c6685e2d56353cd3d0ddfe57b94ce6'\n            and tx_hash <> '\\xedae6744e335364be09b234591d367117c2322598a6bc67d89b6fdd432efe7ec'\n            and tx_hash <> '\\x7379b7bf6344cb069e3bdac2d5b893696ea0c182b60ce3d4aecf1522ee4e2da5'\n            and tx_hash <> '\\x0bffc7955c9b587d0bd8bb3db8e6ec13f0c6685e2d56353cd3d0ddfe57b94ce6'\n            and tx_hash <> '\\x07e9763e9930f8671ef03853e039f0ae0728e62ef9e60e017f20d1a524866914'\n            and tx_hash <> '\\x92488a00dfa0746c300c66a716e6cc11ba9c0f9d40d8c58e792cc7fcebf432d0'\n            and tx_hash <> '\\x5302a80abc4fe8660c19cee5cd5b0aec6437b9672157383debcf28d6f89a34ef'\n            and tx_hash <> '\\xfce005dfeb6b12e668e2de44c13d3b941db101326819e5818745e186ed1581f4'\n            and tx_hash <> '\\x1f2ee7113b20ba126fdc6cfff0fc9a9b6c6f92a9aef22daa179a999af448a747'\n            and tx_hash <> '\\x61a44e01fbe690e6a6b2db0b0c1f0a7cc242ea199b5a0b6fee216fc5aa5a1ba8'\n            and tx_hash <> '\\x55ab5921d4496954156b0bac2182a0da94d6ee4ff1c2eaaeb6df06d57aafe5d2'\n            and tx_hash <> '\\x4948753c0af0cc39f0e44a9a614f62bd237a8003b7034f9bf9103040ae78d65b'\n            and tx_hash <> '\\xe1ae8d3d31303f4007ab3e7aa99ede8f5878b4e0db7377a3504114469ccf1c83'\n            and tx_hash <> '\\xe607a4ee571ce94856fe2b178257acdef7c6eb30e5bd0f34b1ea52ce153310ba'\n            and tx_hash <> '\\x855e6720a2d34341401ff88baaa72a0ca9a7832dbad2b682c460cb51b5e30a96'\n            and tx_hash <> '\\x3347858e4c5c3c737a0e4929e38edc37683fe0deff474130ac8452d276339098'\n            and tx_hash <> '\\x0347d5828834ac2fbe5e55d4043f06e1987526277f2356b7d7300dc0c07f04b7'\n            and tx_hash <> '\\x855e6720a2d34341401ff88baaa72a0ca9a7832dbad2b682c460cb51b5e30a96'\n            and tx_hash <> '\\x765b18d02ad6d0661918f96c35f624655be48cd5e2432bbc8f0e40847ed02dc0'\n            and tx_hash <> '\\x0831db6af74c935724b82d72f0ccd269bf428004ff3da2b3d90c310ebe886af0'\n            and tx_hash <> '\\x473b45618a3e427bdc92194a275ecce6389fe8caea7cbeabbae431533a265e3f'\n\nand block_time > TIMESTAMP '2022-8-01 00:00:00'\nand block_time < TIMESTAMP '2022-9-01 00:00:00'\n\n-- select * from nft.\"trades\"\n-- where usd_amount is not null\n-- order by usd_amount desc\n-- limit 1000\n\n\n-- select * from nft.\"trades\"\n-- limit 10\n\n"}
{"prompt": "Retrieve all data from the synthetix.\"Synthetix_call_setFeePool\" table. This table contains data on the fees collected by Synthetix.", "completion": " SELECT *\n  FROM synthetix.\"Synthetix_call_setFeePool\" "}
{"prompt": "This SQL query returns the total USD value of all trades made on the DEX.AG platform for each week, over the past 12 weeks.", "completion": " WITH per_token AS\n  (SELECT price.symbol,\n          date_trunc('week', tx.block_time) AS TIME,\n          SUM(\"toAmount\" /10^decimals * price.price) AS total_usd_value\n   FROM dexag.\"DexTrading_evt_Trade\" filled\n   INNER JOIN\n     (SELECT hash, block_time\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '12 weeks'\n        AND block_time < date_trunc('week', NOW())) tx ON filled.evt_tx_hash = tx.hash\n   INNER JOIN prices.usd price ON date_trunc('minute', tx.block_time) = price.minute\n   INNER JOIN erc20.tokens erc ON erc.contract_address = price.contract_address\n   WHERE \"to\" = price.contract_address\n   GROUP BY 1,\n            2)\nSELECT TIME,\n       SUM(total_usd_value) AS volume\nFROM per_token\nGROUP BY 1;"}
{"prompt": "The query returns the project name, the date of the trade, and the sum of the USD amount for all trades that occurred after December 31, 2018.", "completion": " SELECT project,\n       date_trunc('week', block_time),\n       SUM(usd_amount) AS usd_volume\nFROM dex.\"trades\" t\nWHERE category = 'DEX'\nAND block_time > '2018-12-31'\nGROUP BY 1,\n         2"}
{"prompt": "This query retrieves data about the balance of Fairmint-approved users for a specific token. The data includes both inbound and outbound transfers of the token, as well as ETH.", "completion": " WITH outbound_erc20 as (\n    SELECT contract_address, \"from\" as _trader,  -value amt\n    FROM erc20.\"ERC20_evt_Transfer\"\n    WHERE \"from\" IN (SELECT _trader FROM fairmint.\"Whitelist_evt_ApproveNewUser\")\n    AND contract_address IN ('\\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', '\\x3983c6da8235f59e16a034ee773e60a69e8f14b2', '\\x3983c6da8235f59e16a034ee773e60a69e8f14b2')\n), inbound_erc20 as (\n    SELECT contract_address, \"to\" as _trader, value as amt \n    FROM erc20.\"ERC20_evt_Transfer\"\n    WHERE \"to\" IN (SELECT _trader from fairmint.\"Whitelist_evt_ApproveNewUser\")\n    AND contract_address IN ('\\xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', '\\x3983c6da8235f59e16a034ee773e60a69e8f14b2', '\\x3983c6da8235f59e16a034ee773e60a69e8f14b2')\n), inbound_eth as (\n    SELECT '\\x'::bytea as contract_address, \"to\" as _trader, value as amt\n    FROM ethereum.traces\n    WHERE \"to\" IN (SELECT _trader from fairmint.\"Whitelist_evt_ApproveNewUser\")\n    AND tx_success \n    AND error IS NULL\n    AND value > 0\n), outbound_eth  as(\n    SELECT '\\x'::bytea as contract_address, \"to\" as _trader, value as amt\n    FROM ethereum.traces\n    WHERE \"from\" IN (SELECT _trader from fairmint.\"Whitelist_evt_ApproveNewUser\") \n    AND tx_success \n    AND error IS NULL\n    AND value > 0\n)\nSELECT  _trader, contract_address as token, SUM(amt)\nFROM (SELECT * FROM outbound_erc20 UNION SELECT * FROM inbound_erc20 UNION SELECT * FROM inbound_eth UNION SELECT * FROM outbound_eth) c\nGROUP BY 1, 2;"}
{"prompt": "This SQL query returns the number of unbonds, the day, and the sum of gas limits for each day.", "completion": " WITH unbonds AS (\nSELECT date_trunc('day', tx.block_time) AS day, *\nFROM ethereum.transactions tx\nWHERE tx.\"to\" = '\\x511Bc4556D823Ae99630aE8de28b9B80Df90eA2e'\nAND substring(data,1,4) = '\\x27de9e32')\n\nSELECT COUNT(*), day, sum(gas_limit) \nFROM unbonds\n\nGROUP BY day ORDER BY day\n\n/* SELECT date_trunc('week', tx.block_time) AS date,\n       count(DISTINCT tx.\"from\")\nFROM ethereum.logs\nWHERE \n\nnumerai.\"NumeraireBackend_evt_Staked\" s\n\n\nINNER JOIN ethereum.transactions tx\nON s.tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1; */"}
{"prompt": "The query returns the numeric value of the 'number' field in the 'SoloMargin_call_operate' collection, divided by 1e70. The results are limited to 10.", "completion": " SELECT (accounts->0->> 'number')::numeric /1e70  FROM dydx.\"SoloMargin_call_operate\" LIMIT 10;\n--SELECT distinct jsonb_array_elements(accounts)->>'owner' FROM dydx.\"SoloMargin_call_operate\";"}
{"prompt": "This SQL query calculates the total amount of ETH spent on registering ENS names. It does this by summing the cost field from the NameRegistered event for the ETHRegistrarController_v2 and Registrar_old contracts, and the value field from the HashRegistered event for the Registrar_old contract.", "completion": " SELECT SUM(cost) AS \"ETH spent\"\nFROM \n(\n(SELECT SUM(cost/1e18) AS cost FROM ethereumnameservice.\"%ETHRegistrarController_v2._evt_NameRegistered\")\nUNION ALL\n(SELECT SUM(value/1e18) AS cost FROM ethereumnameservice.\"Registrar_old_evt_HashRegistered\")\n--UNION ALL\n--(SELECT SUM(cost/1e18) AS cost FROM ethereumnameservice.\"BaseRegistrar_evt_NameRegistered\")\n--don't know why there's no value field for this event...\n) AS spent;"}
{"prompt": "This SQL query calculates the net borrows (borrows minus repays) for the Fulcrum ETH iToken contract over a period of time, and displays the cumulative net borrows (the sum of net borrows over time).", "completion": " WITH borrow AS \n(\nSELECT\ndate_trunc('day', block_time) as day,\nsum(\"borrowAmount\"/1e18) as borrows\nFROM fulcrum.\"iToken_evt_Borrow\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nWHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\nGROUP BY 1 \nORDER BY 1 desc\n),\n\nrepay AS \nSELECT\ndate_trunc('day', block_time) as day,\nsum(Amount/1e18) as repays\nFROM fulcrum.\"iToken_evt_Repay\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nWHERE \"contract_address\" = '\\x77f973fcaf871459aa58cd81881ce453759281bc'\nGROUP BY 1 \nORDER BY 1 desc\n)\n\nSELECT \nborrow.day,\nsum(borrows-repays) as net_borrow\nsum(sum(borrows-repays)) over (order by borrow.day) as cumul_net_borrow\nFROM borrow\nLEFT JOIN repay r ON borrow.day = r.day\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "This SQL query returns the total amount of money redeemed from Compound per week, for each token symbol, ordered by the week the redemption occurred.", "completion": " SELECT\ndate_trunc('week', block_time),\ntoken_symbol,\nSUM(\"redeem_amount_usd\")\nFROM dune_user_generated.\"compound_view_redeem\"\nWHERE block_time > now() - interval '8 weeks' \nGROUP BY 1,2 \nORDER BY 1;\n\n-- See data table examples:\n--SELECT * FROM dune_user_generated.\"compound_view_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_borrow\" when format is decided\n--SELECT * FROM dune_user_generated.\"compound_view_repay_borrow\" LIMIT 10\n-- will be named compound_v2.\"view_repay_borrow\" when format is decided"}
{"prompt": "This query returns the total amount of SLP (a cryptocurrency) that has been bought on Uniswap (a decentralized exchange) by a specific address.", "completion": " WITH transfers AS (\n    -- SELECT\n    -- evt_tx_hash AS tx_hash,\n    -- tr.\"from\" AS address,\n    -- -tr.value AS amount\n    --  FROM erc20.\"ERC20_evt_Transfer\" tr\n    --  WHERE contract_address = '\\x37236cd05b34cc79d3715af2383e96dd7443dcf1' -- SLP\n-- UNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\x37236cd05b34cc79d3715af2383e96dd7443dcf1' --SLP\n)\n-- next steps, add transactions!\nSELECT address, sum(amount) as total_slp_redeemed\nFROM transfers\nWHERE address = '\\xf4158e282f2317597e31c028978c7fb7275d6fb4'  -- Uniswap Pool Address\nGROUP BY 1\nORDER BY 2 desc\n-- LIMIT 25\n"}
{"prompt": "This SQL query will select the name, trade time, and average price of all trades made in BNB.", "completion": " select name, trade_time::date, avg(price)\nFROM trades t, tokens tok\nWHERE t.base_asset = tok.symbol\nGROUP BY 1, 2;"}
{"prompt": "This SQL query returns the number of distinct _to values from the dxdao.\"DxController_evt_MintReputation\" table.", "completion": " SELECT COUNT(distinct _to) FROM dxdao.\"DxController_evt_MintReputation\""}
{"prompt": "This query returns a list of borrowers and the total amount of each underlying asset they have borrowed from the Compound protocol. The results are ordered by the total amount borrowed.", "completion": " WITH temp_token_info (address, symbol, decimals, underlying_symbol, underlying_decimals) AS\n    (VALUES\n    ('\\x6c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e', 'cBAT', 8, 'BAT', 18),\n    ('\\xf5dce57282a584d2746faf1593d3121fcac444dc', 'cDAI', 8, 'DAI', 18),\n    ('\\x4ddc2d193948926d02f9b1fe9e1daa0718270ed5', 'cETH', 8, 'ETH', 18),\n    ('\\x158079ee67fce2f58472a96584a73c7ab9ac95c1', 'cREP', 8, 'REP', 18),\n    ('\\x39aa39c021dfbae8fac545936693ac917d5e7563', 'cUSDC', 8, 'USDC', 6),\n    ('\\xb3319f5d18bc0d84dd1b4825dcde5d5f7266d407', 'cZRX', 8, 'ZRX', 18),\n    ('\\xC11b1268C1A384e55C48c2391d8d480264A3A7F4', 'cWBTC', 8, 'WBTC', 8)\n    )\n\n\nSELECT b.borrower, underlying_symbol, SUM((\"borrowAmount\" / 10^(\"underlying_decimals\")))\nFROM compoundv2.\"cErc20_evt_Borrow\" b\nLEFT JOIN temp_token_info t ON t.address::bytea = b.address::bytea\nGROUP BY 1, 2\nORDER BY 3 DESC;"}
{"prompt": "This SQL query returns the USD volume for each token over time.", "completion": " SELECT date_trunc('week', tx.block_time) AS Date,\n       p.symbol AS token,\n       SUM(eth/1e18 * p.average) AS \"USD volume\"\nFROM (\n        (SELECT tx_hash,\n                address,\n                eth_sold AS eth\n         FROM uniswap.\"Exchange_evt_TokenPurchase\")\n      UNION\n        (SELECT tx_hash,\n                address,\n                eth_bought AS eth\n         FROM uniswap.\"Exchange_evt_EthPurchase\")) ether\nINNER JOIN ethereum.transactions tx ON ether.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" p ON date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\nINNER JOIN uniswap.\"Factory_evt_NewExchange\" n ON n.exchange = ether.address\nWHERE tx.block_time > now() - interval '2 months'\n  AND p.asset = n.token\n  AND tx.success = TRUE\nGROUP BY 1,\n         2\nORDER BY 1;"}
{"prompt": "This SQL query returns the sum of all makerAmounts divided by 1e18, as well as the makerToken, for each group of makerTokens.", "completion": " SELECT SUM(\"makerAmount\"/1e18), \"makerToken\" FROM airswap.\"Exchange_evt_Filled\" GROUP BY 2"}
{"prompt": "This SQL query returns the date and time of each trade block, as well as the total number of trades in that block. The query is grouped by hour and ordered by date and time.", "completion": " SELECT date_trunc('hour', block_time) AS Date,\n        COUNT(*) AS \"Total trades\"\nFROM dexag.\"DexTrading_evt_Trade\" trade\nLEFT JOIN ethereum.transactions tx\nON trade.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This query returns the total number of deposits and withdrawals for each day in the past 30 days.", "completion": " WITH deposit AS\n(\nSELECT\ndate_trunc('week', block_time) as week,\ncount(distinct \"minter\") as deposits FROM compound_v2.\"cErc20_evt_Mint\" c\nLEFT JOIN ethereum.\"transactions\" tx on c.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 30\n),\n\nwithdraw AS\n(\nSELECT\ndate_trunc('day', block_time) as day,\ncount(distinct \"redeemer\") as redemptions FROM compound_v2.\"cErc20_evt_Redeem\" a\nLEFT JOIN ethereum.\"transactions\" tx on a.evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 20\n)\n\nSELECT deposit.day, sum(deposits-redemptions)\nFROM deposit\nLEFT JOIN withdraw ON withdraw.day = deposit.day\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 20\n\nSELECT * FROM compound_v2.\"cErc20_evt_Redeem\"\nLIMIT 10\n\nSELECT * FROM prices.\"usd\"\nLIMIT 10"}
{"prompt": "This query returns the top 100 addresses by nonce value.", "completion": " SELECT \"from\", max(nonce)\nFROM ethereum.transactions\nGROUP BY 1 \nORDER BY 2 DESC\nLIMIT 100;"}
{"prompt": "This SQL query returns the total amount of ETH deposited and withdrawn from the account '5e032243d507c743b061ef021e2ec7fcc6d3ab89' on a weekly basis.", "completion": " WITH ina AS\n  (SELECT sum(value/1e18) AS total_eth_in,\n          date_trunc('week', block_time) AS \"ym\"\n   FROM ethereum.transactions\n   WHERE \"to\"='\\x5e032243d507c743b061ef021e2ec7fcc6d3ab89'\n   GROUP BY \"ym\"\n   ORDER BY \"ym\" ASC),\n     outa AS\n  (SELECT sum(value/1e18) AS total_eth_out,\n          date_trunc('week', block_time) AS \"ym\"\n   FROM ethereum.transactions\n   WHERE \"from\"='\\x5e032243d507c743b061ef021e2ec7fcc6d3ab89'\n   GROUP BY \"ym\"\n   ORDER BY \"ym\" ASC)\nSELECT ina.ym,\n       total_eth_in,\n       total_eth_out\nFROM ina\nLEFT JOIN outa ON ina.ym = outa.ym\nORDER BY 1"}
{"prompt": "This SQL query returns the Date, volume for each day in the past 7 days for the given asset (HBTC).", "completion": " SELECT date_trunc('days', tx.block_time) AS Date,\n      SUM(amount/1e6*p.price) AS volume\nFROM (\n     select call_tx_hash,amount,asset_address from (\n\t\tselect \n\t\t  cast(subactions->>'actionType' as integer) as action_type,\n\t\t  substring((subactions->'encodedParams')::text, 28, 40) as asset_address,\n\t\t  hex2numeric(substring((subactions->'encodedParams')::text, 68, 64)) as amount,\n\t\t  call_tx_hash\n\t\t from (select  jsonb_array_elements(actions) as subactions, call_tx_hash from hydroprotocol.\"Margin_call_batch\") a ) b where b.action_type = 5 and asset_address = '0316eb71485b0ab14103307bf65a021042c6d380'\n    ) deposits\nINNER JOIN\n     (SELECT hash,\n             block_time\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '7 days'\n        AND block_time < date_trunc('day', NOW())) tx ON deposits.call_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'BTC'\nGROUP BY 1\nORDER by 1"}
{"prompt": "This query calculates the reputation that has been earned by each token. It does this by looking at the amount of each token that has been locked, the length of the lock, and the reputation score for each token.", "completion": " WITH symbols (address, symbol) AS (VALUES \n    ('\\x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6'::bytea, 'RDN'),\n    ('\\x744d70fdbe2ba4cf95131626614a1763df805b9e'::bytea, 'SNT'),\n    ('\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'::bytea, 'DAI'),\n    ('\\x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'::bytea, 'MKR'),\n    ('\\xd26114cd6ee289accf82350c8d8487fedb8a0c07'::bytea, 'OMG'),\n    ('\\x6810e776880c02933d47db1b9fc05908e5386b96'::bytea, 'GNO'),\n    ('\\xdd974d5c2e2928dea5f71b9825b8b646686bd200'::bytea, 'KNC'),\n    ('\\x543ff227f64aa17ea132bf9886cab5db55dcaddf'::bytea, 'GEN'),\n    ('\\x985dd3d42de1e256d09e1c10f112bccb8015ad41'::bytea, 'OCEAN'),\n    ('\\xbbbbca6a901c926f240b89eacb641d8aec7aeafd'::bytea, 'LRC'),\n    ('\\x8f8221afbb33998d8584a2b05749ba73c37a938a'::bytea, 'REQ'),\n    ('\\x514910771af9ca656af840dff83e8264ecf986ca'::bytea, 'LINK'),\n    ('\\x0F5D2fB29fb7d3CFeE444a200298f468908cC942'::bytea, 'MANA'),\n    ('\\x960b236A07cf122663c4303350609A66A7B288C0'::bytea, 'ANT'),\n    ('\\xE41d2489571d322189246DaFA5ebDe1F4699F498'::bytea, 'ZRX'),\n    ('\\x0D8775F648430679A709E98d2b0Cb6250d2887EF'::bytea, 'BAT'),\n    ('\\x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c'::bytea, 'BNT')\n    \n    \n),\nperToken as (\n\nSELECT  _token as token,\n        s.symbol,\n       SUM((_amount / 1e18) * (_numerator/_denominator) * _period) * 300000 as tokenScore\nFROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\" l\nINNER JOIN dxdao.\"DxLockWhitelisted4Rep_evt_LockToken\" lt ON l.\"_lockingId\" = lt.\"_lockingId\"\nLEFT JOIN symbols s ON lt._token = s.address \nGROUP BY 1,2),\ntotalScore as (\nSELECT  \n       SUM((_amount / 1e18) * (_numerator/_denominator) * _period) * 300000 as totalScore\nFROM dxdao.\"DxLockWhitelisted4Rep_evt_Lock\" l\nINNER JOIN dxdao.\"DxLockWhitelisted4Rep_evt_LockToken\" lt ON l.\"_lockingId\" = lt.\"_lockingId\"\nLEFT JOIN symbols s ON lt._token = s.address \n)\n\nSELECT symbol, (tokenscore / totalscore) * 300000 as Reputation FROM perToken, totalScore\nGROUP BY symbol, tokenscore, totalscore\n\n\n"}
{"prompt": "This SQL query returns the total number of transactions, the day on which they occurred, and the total gas limit for all transactions that occurred on that day, for a specific Ethereum address.", "completion": " WITH bonds AS (\nSELECT date_trunc('day', tx.block_time) AS day, *\nFROM ethereum.transactions tx\nWHERE tx.\"to\" = '\\x511Bc4556D823Ae99630aE8de28b9B80Df90eA2e'\nAND substring(data,1,4) = '\\xb78d27dc')\n\nSELECT COUNT(*), day, sum(gas_limit) \nFROM bonds\n\nGROUP BY day ORDER BY day"}
{"prompt": "This query returns the total ETH stored in Argent contracts, accumulated weekly over time.", "completion": " WITH wallets AS (\n    select substring(topic2 from 13 for 20) as \"address\", block_time as creation_time\n\tfrom ethereum.logs el\n\twhere (\n\t    topic1 = '\\x5b03bfed1c14a02bdeceb5fa582eb1a5765fc0bc64ca0e6af4c20afc9487f081' -- WalletCreated event\n\t\tand contract_address = '\\x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020'  -- Argent Factory\n\t) OR (\n\t\ttopic1 = '\\xca0b7dde26052d34217ef1a0cee48085a07ca32da0a918609937a307d496bbf5' -- WalletCreated event with Guardian\n\t\tand contract_address = '\\x40C84310Ef15B0c0E5c69d25138e0E16e8000fE9'  -- Argent Factory new\n\t)\n),\nperweek AS (\nSELECT \"week\", Sum(amount) as amount\nFROM (\n    SELECT date_trunc('week', \"block_time\") AS \"week\", \"from\" AS address, -value AS amount\n     FROM ethereum.traces et\n     join wallets w\n        on et.\"from\" = w.address\n     AND success = TRUE\n     AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\nUNION ALL\n    SELECT date_trunc('week', \"block_time\") AS \"week\", \"to\" AS address, value AS amount\n     FROM ethereum.traces et\n     join wallets w\n        on et.\"to\" = w.address\n     AND success = TRUE\n     AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n) t\nGROUP BY 1\n\n)\nSELECT \"week\",  sum(amount/1e18) over (order by \"week\" asc rows between unbounded preceding and current row) as eth_balance FROM perweek"}
{"prompt": "This SQL query calculates the total ETH stored in Gnosis Safe contracts. It does this by looking at all the successful transactions involving Gnosis Safe contracts, and then summing up the ETH values for each address.", "completion": " with safes as (\n    select\n    \tet.from as address,\n    \tet.block_time as creation_time\n    from ethereum.traces et \n    where et.tx_success = True\n        AND substring(et.\"input\" for 4) in ('\\x0ec78d9e', '\\xa97ab18a', '\\xb63e800d') -- setup methods of v0.1.0, v1.0.0, v1.1.0 (=v1.1.1)\n        AND et.call_type = 'delegatecall' -- the delegate call to the master copy is the Safe address\n        AND et.to in ('\\x8942595A2dC5181Df0465AF0D7be08c8f23C93af', '\\xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A', '\\xaE32496491b53841efb51829d6f886387708F99B', '\\x34CfAC646f301356fAa8B21e94227e3583Fe3F5F') -- mastercopy address v0.1.0, v1.0.0, v1.1.0, v1.1.1\n),\nperaddress as (\n    SELECT address, sum(amount) / 1e18 as amount\n    FROM (\n        SELECT \"from\" AS address, -value AS amount\n         FROM ethereum.traces\n         WHERE \"from\" IN (SELECT address FROM safes)\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    UNION ALL\n        SELECT \"to\" AS address, value AS amount\n         FROM ethereum.traces\n         WHERE \"to\" IN (SELECT address FROM safes )\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    ) t\n    group by 1\n)\nselect sum(amount)\nfrom peraddress"}
{"prompt": "This SQL query returns the block time of the first auction start scheduled event that has a corresponding auction cleared event.", "completion": " select tx.block_time\nfrom gnosis.\u201cDutchExchange_evt_AuctionStartScheduled\u201d as start\njoin gnosis.\u201cDutchExchange_evt_AuctionCleared\u201d as cleared\non \u201cstart\u201d.\u201csellToken\u201d = \u201ccleared\u201d.\u201csellToken\u201d AND \u201cstart\u201d.\u201cbuyToken\u201d = \u201ccleared\u201d.\u201cbuyToken\u201d AND \u201cstart\u201d.\u201cauctionIndex\u201d = \u201ccleared\u201d.\u201cauctionIndex\u201d\njoin ethereum.transactions as tx\non \u201ctx\u201d.\u201chash\u201d = cleared.\u201ctx_hash\u201d\n\nLIMIT 1;"}
{"prompt": "This query selects the week and sum of new stake USD, as well as the count of distinct stakers, from the Numerai view stakeadded table.", "completion": " SELECT date_trunc('week', block_time) AS week,\n       SUM(\"newStakeUSD\"),\n       COUNT(DISTINCT staker)\nFROM dune_user_generated.\"numerai_view_stakeadded\"\nGROUP BY 1"}
{"prompt": "This query returns the address of each safe created by the factory (identified by 'call_tx_hash') that was not triggered by the relay service ('et2.from <> '\\\\x07f455f30e862e13e3e3d960762cb11c4f744d52'').", "completion": " select et.address as safe_addresses\nfrom gnosis_safe.\"Safev1.0.0_call_setup\" gs\njoin ethereum.traces et \non gs.call_tx_hash = et.tx_hash \njoin ethereum.traces et2 \non et.tx_hash = et2.tx_hash \nwhere et.tx_success = True -- only successful txs\nand et.type = 'create'  -- only create calls\nand et.from = '\\x12302fe9c02ff50939baaaaf415fc226c078613c'  -- from the factory\nand et2.from <> '\\x07f455f30e862e13e3e3d960762cb11c4f744d52' -- factory not triggered from the relay service\nand et2.to = '\\x12302fe9c02ff50939baaaaf415fc226c078613c'"}
{"prompt": "This SQL query will select all transactions from the ethereum database where the gas used is less than or equal to 12000, and order the results by gas used.", "completion": " SELECT *\nFROM ethereum.\"transactions\"\nWHERE gas_used <= 12000\nORDER BY gas_used"}
{"prompt": "This SQL query returns the percentage of committed votes that are then revealed. It does this by joining the \"Voting_evt_VoteCommitted\" and \"Voting_evt_VoteRevealed\" tables on the voter column.", "completion": " /* % of committed votes that are then revealed */\n/* SELECT C.voter, R.price/1e18 as priceVote */\n/*SELECT * \nFROM umaproject.\"Voting_evt_VoteCommitted\" \nFROM umaproject.\"Voting_evt_RewardsRetrieved\" \nFROM umaproject.\"Voting_evt_VoteCommitted\" as C\nFULL JOIN umaproject.\"Voting_evt_VoteRevealed\" as R ON R.voter = C.voter */\n\nSELECT \n    price/1e18 as resolved, \n    CONCAT(identifier,time,\"resolutionRoundId\") as voteid, \n    evt_tx_hash\nFROM umaproject.\"Voting_evt_PriceResolved\""}
{"prompt": "The following SQL query selects the buyer, seller, base_asset, quote_asset, quantity, and price from the trades table where the trade_time is on the given date and the quote_asset is BNB.", "completion": " SELECT buyer,\n       seller,\n       base_asset,\n       quote_asset,\n       quantity,\n       price\nFROM trades\nWHERE date_trunc('day', trade_time) = '2019-08-24'\n  AND quote_asset='BNB';"}
{"prompt": "This query returns the following information for all trades made on the Cow Protocol within the past day:\n\n- The block time of the trade\n- The trader (represented as a link to their Etherscan address)\n- The token sold\n- The token bought\n- The number of units sold\n- The number of units bought\n- The trade value in USD\n- The transaction hash (represented as a link to the Etherscan transaction page)\n- The order UID (represented as a link to the Cow Protocol explorer page)\n- Any app data associated with the trade", "completion": " SELECT \n    block_time,\n    CONCAT('<a href=\"https://etherscan.io/address/', CONCAT('0x', ENCODE(trader, 'hex')), '\" target=\"_blank\">', CONCAT('0x', ENCODE(trader, 'hex')),  '</a>') as trader,\n    sell_token, \n    buy_token,\n    units_sold,\n    units_bought,\n    trade_value_usd,\n    1 n_trades,\n    fee,\n    fee_usd,\n    CONCAT('<a href=\"https://etherscan.io/tx/', CONCAT('0x', ENCODE(tx_hash, 'hex')), '\" target=\"_blank\">', CONCAT('0x', ENCODE(tx_hash, 'hex')),  '</a>') as transaction,\n    CONCAT('<a href=\"https://explorer.cow.fi/orders/', CONCAT('0x', ENCODE(order_uid, 'hex')), '\" target=\"_blank\">', CONCAT('0x', ENCODE(order_uid, 'hex')),  '</a>') as order_uid,\n    app_data\nFROM gnosis_protocol_v2.trades\nWHERE block_time > now() - interval '1 days'\nand trade_value_usd <= {{MaxTradeValueUSD}}\nORDER BY block_time DESC\n"}
{"prompt": "This SQL query returns all data from the dune_user_generated.gip29_safers_created table.", "completion": " SELECT\n    *\nFROM dune_user_generated.gip29_safers_created"}
{"prompt": "The query returns the sum of USD amounts from all 1inch trades that have been made in the past 7 days.", "completion": " SELECT SUM(usd_amount) as volume FROM dex.trades\nWHERE project = '1inch' AND DATE_PART('day', now() - block_time::timestamptz) < 7\n"}
{"prompt": "The following SQL query retrieves all data from the Linkdrop Factory call claim table.", "completion": " SELECT * FROM linkdrop.\"LinkdropFactory_call_claim\";"}
{"prompt": "This query returns the sum of all withdrawals made on the dYdX platform, grouped by asset type, for each minute over the past year.", "completion": " with data as (\n    SELECT eth.block_time AS ttime,\n       eth.hash AS \"txHash\",\n       eth.from AS \"depositerAddress\",\n        CASE dep.\"market\"::integer \n            WHEN 0 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 1 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n            WHEN 2 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 6 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 6, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e6)::decimal\n                END\n                            WHEN 3 THEN\n                CASE\n                    WHEN char_length((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text) < 18 THEN\n                        ('0.' || LPAD((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text, 18, '0'))::decimal\n                    ELSE\n                        ((dep.\"update\"::json#>'{\"deltaWei\",\"value\"}')::json::text::decimal / 1e18)::decimal\n                END\n        END AS \"withdrawAmount\",\n       CASE dep.\"market\"::integer \n       WHEN 0 THEN\n        'ETH'::text\n       WHEN 1 THEN\n        'SAI'::text\n       WHEN 2 THEN\n        'USDC'::text\n         WHEN 3 THEN\n        'DAI'::text\n       END AS \"Asset\"\nFROM dydx.\"SoloMargin_evt_LogWithdraw\" dep\nJOIN ethereum.transactions eth ON eth.hash = dep.evt_tx_hash\nWHERE date_trunc('minute', eth.block_time) >= date_trunc('year', now()  - interval '365 days' )\n-- add ~  - interval '1 day'  ~ here to shift by any days/weeks or months if desired \nORDER BY eth.block_time DESC)\n\nSELECT\n  data.ttime,\n  sum(\"withdrawAmount\") over (partition by \"Asset\" order by data.ttime) AS \"sum\",\n  \"Asset\"\nfrom data"}
{"prompt": "This query calculates the USD value of all ETH stored in Monolith contracts. It does this by first finding all wallets associated with Monolith contracts, then summing up the total ETH value for each wallet. Finally, it multiplies the total ETH value by the current ETH/USD price to get the total USD value.", "completion": " WITH wallets AS (\n\tSELECT \n\t\tblock_time as creation_time,\n\t\tblock_number as creation_block_number,\n\t\taddress\n\tfrom ethereum.traces \n\twhere \"from\" in ('\\x95BEBe7bfc6aCc186C13D055D0Aacc2DE5f81502','\\xb24d47364163f909e64cf2cf7788d22c51cea851', '\\x85bb8a852c29d8f100cb97ecdf4589086d1be2dd') -- Monolith deployers\n\t    and type = 'create'\n),\nperaddress as (\n    SELECT address, sum(amount) / 1e18 as amount\n    FROM (\n        SELECT \"from\" AS address, -value AS amount\n         FROM ethereum.traces\n         WHERE \"from\" IN (SELECT address FROM wallets)\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    UNION ALL\n        SELECT \"to\" AS address, value AS amount\n         FROM ethereum.traces\n         WHERE \"to\" IN (SELECT address FROM wallets )\n         AND tx_success = TRUE\n         AND (call_type NOT IN ('delegatecall', 'callcode', 'staticcall') OR call_type IS null)\n         and error is null  -- to make the db use an index\n    ) t\n    group by 1\n)\nselect sum(amount) * (SELECT price FROM prices.usd WHERE symbol = 'ETH' ORDER BY minute desc LIMIT 1) as usd_value\nfrom peraddress"}
{"prompt": "This query returns a list of all Authereum contracts sorted by the number of transactions they have processed.", "completion": " WITH wallets AS\n  (SELECT block_time AS creation_time,\n          block_number AS creation_block_number,\n          address\n   FROM ethereum.traces\n   WHERE \"from\" IN ('\\x69c0047531fd1cc24daa9eccd221cb66b53c63f8',\n                    '\\x5ffe9ab0a508d8640a46bb892499803bc7bec3ea',\n                    '\\x0d54d0f1c1f5fe7a525713b85f36de8fb6014046')\n     AND TYPE = 'create' ),\n     peraddress AS\n  (SELECT et.\"from\" AS address,\n          count(DISTINCT et.tx_hash) AS transactions\n   FROM ethereum.traces et\n   JOIN wallets ON wallets.address = et.\"from\"\n   WHERE et.\"to\" IN ('\\x237EDCDd43349227ef511581Cc834962ECf23076',\n                     '\\x20af9e54a3670ef6a601bca1f1ec22b1f93cbe23',\n                     '\\x2e1723d1dfa2947f0d08d5c5d214b71def4f951f',\n                     '\\x79fee076b1bcd4054dff0b4364c26899492198dc',\n                     '\\x211deb5c0a28a213fcf5976ac22c70ff96b9004c',\n                     '\\x185c46c8d3ef5155f3678e69c827db7a2116a6cd',\n                     '\\xd8cab604bdd8cbb7c3eb0c26f7dc3abffb005a92',\n                     '\\xae1710e83211decb356f031a9346a24ef55055e0')\n     AND call_type = 'delegatecall'\n     AND tx_success = TRUE\n     AND error IS NULL\n     AND substring(\"input\"\n                   FOR 4) IN ('\\x26aa4655',\n                              '\\xd5553b88')\n   GROUP BY 1)\nSELECT concat('https://etherscan.io/address/0',right(text(address),41)) AS address,\n       transactions\nFROM peraddress\nORDER BY transactions DESC"}
{"prompt": "The SQL query below returns the number of safes created each day, grouped by day, and ordered by day in descending order. The query is limited to 1000 results.", "completion": " SELECT block_time::date as day, count(*) as \"Safes created\"\nFROM gnosis_safe.\"Safev1.0.0_call_setup\" safe\nINNER JOIN ethereum.transactions tx ON safe.call_tx_hash = tx.hash\ngroup by day\norder by day desc\nLIMIT 1000\n"}
{"prompt": "This SQL query retrieves all transactions with data equal to '\\x5b620186a05a131560135760016020526000565b600080601f600039601f565b6000f3' and block_number less than 5000000.", "completion": " -- some dao thing\nselect * from ethereum.transactions where data = '\\x5b620186a05a131560135760016020526000565b600080601f600039601f565b6000f3' and block_number < 5000000"}
{"prompt": "The SQL query shown below returns the date and sum of amount for each row in the table, ordered by date in ascending order. The sum of amount is calculated for each row, using the previous row's sum of amount as a starting point.", "completion": " SELECT date, sum(amount) OVER (\n                               ORDER BY date ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS rewards_usd\nFROM\n  (SELECT date, sum(amount) AS amount\n   FROM\n     (SELECT date_trunc('day', evt_block_time) AS date,\n             value / 1e18 * 1.05 AS amount\n      FROM erc20.\"ERC20_evt_Transfer\"\n      WHERE contract_address = '\\xdf5e0e81dff6faf3a7e52ba697820c5e32d806a8'\n        AND \"from\" = '\\x93a62da5a14c80f265dabc077fcee437b1a0efde'\n        AND \"to\" = '\\xBa37B002AbaFDd8E89a1995dA52740bbC013D992') a\n   GROUP BY 1\n   ORDER BY 1) b"}
{"prompt": "This query returns the total amount of Dai bought on Uniswap per hour for the past 24 hours.", "completion": " SELECT date_trunc('hour', block_time) AS hour, \n        SUM(token_a_amount) AS dai_bought\nFROM dex.\"trades\"\nWHERE block_time > now() - interval '24 hours'\nAND token_a_symbol = 'DAI'\nAND project = 'Uniswap'\nGROUP BY 1;"}
{"prompt": "This SQL query returns the total amount of iSai received by each address, ordered by the amount received.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address = '\\x14094949152eddbfcd073717200da82fed8dc960' -- iSAI\n-- UNION ALL\n    -- SELECT\n    -- evt_tx_hash AS tx_hash,\n    -- tr.\"to\" AS address,\n    -- tr.value AS amount\n    --  FROM erc20.\"ERC20_evt_Transfer\" tr \n    --  WHERE contract_address = '\\x14094949152eddbfcd073717200da82fed8dc960' -- iSAI\n)\n\nSELECT address, sum(amount)/1e18 as total_idai_received\nFROM transfers\n-- WHERE address = '\\x0000000000000000000000000000000000000000'\nGROUP BY 1\nORDER BY 2 desc\n-- LIMIT 25\n"}
{"prompt": "This query returns the number of unique solution providers who have submitted a solution to the BatchExchange protocol.", "completion": " SELECT \nCOUNT (DISTINCT \"submitter\")\nFROM gnosis_protocol.\"BatchExchange_evt_SolutionSubmission\" "}
{"prompt": "This query returns the average price per day for a given token pair, expressed in terms of the base token.", "completion": " SELECT\n    sell_token.\"symbol\" as \"sellToken\",\n    buy_token.\"symbol\" as \"buyToken\",\n    date(transactions.block_time) as DAY,\n    SUM(\"executedBuyAmount\") / SUM(\"executedSellAmount\") / 10^(buy_token.\"decimals\" - sell_token.\"decimals\") as \"price\"\nFROM gnosis_protocol.\"BatchExchange_evt_Trade\" trades\nJOIN gnosis_protocol.\"view_tokens\" buy_token\n    ON trades.\"buyToken\" = buy_token.\"token_id\"\nJOIN gnosis_protocol.\"view_tokens\" sell_token\n    ON trades.\"sellToken\" = sell_token.\"token_id\"\nJOIN ethereum.\"transactions\" transactions\n    ON transactions.hash = trades.evt_tx_hash\n    AND transactions.success = true\nGROUP BY\n    sell_token.\"symbol\",\n    buy_token.\"symbol\",\n    buy_token.\"decimals\",\n    sell_token.\"decimals\",\n    date(transactions.block_time)\nORDER BY \n    date(transactions.block_time) desc;"}
{"prompt": "This SQL query returns the number of wrappedbtc transactions per day, for the past 365 days.", "completion": " SELECT \ndate_trunc('day', block_time) as day,\ncount(\"evt_tx_hash\") as tx_count FROM wrappedbtc.\"WBTC_evt_Transfer\"\nLEFT JOIN ethereum.\"transactions\" tx ON evt_tx_hash = tx.hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 365"}
{"prompt": "This SQL query returns the evt_block_time and sum of the amount for all trades that have occurred up to the current row.", "completion": " SELECT evt_block_time,\n       sum(amount) OVER (\n                         ORDER BY evt_block_time ASC ROWS BETWEEN unbounded preceding AND CURRENT ROW) AS volume\nFROM\n  (SELECT evt_block_time,\n          CASE\n              WHEN currency = 0\n                   AND symbol = 'ETH' THEN value / 1e18 * price\n              WHEN currency = 1 THEN value / 1e18\n              WHEN currency = 2 THEN value / 1e6\n              WHEN currency = 3\n                   AND symbol = 'BTC' THEN value / 1e8 * price\n          END AS amount\n   FROM notional.\"Escrow_evt_Deposit\"\n   INNER JOIN prices.\"layer1_usd\" ON date_trunc('minute', evt_block_time) = MINUTE\n   AND symbol IN ('ETH',\n                  'BTC')\n   UNION SELECT block_time,\n                bytea2numeric(substring(DATA\n                                          FROM 65\n                                          FOR 32)) / 1e18 AS amount\n   FROM ethereum.\"logs\"\n   WHERE contract_address = '\\xfabcdd7c1c3f7b892de64b2b52c4b786c4436dba'\n     AND topic1 = '\\x12e6c9cd137c23399aa74708a7be8503d2cce74bfc2d12d277c1eed9d3621496') a"}
{"prompt": "The following SQL query returns the total amount of ETH sent from the Upbit 2 wallet ('\\xba826fec90cefdf6706858e5fbafcb27a290fbe0') in each week, as well as the total number of transactions made from that wallet during that same time period. The data is ordered by week, ascending.", "completion": " SELECT sum(value/1e18) AS total_eth,\n       date_trunc('week', block_time) AS \"ym\",\n       count(*) as total_tx_out\nFROM ethereum.transactions\nWHERE \"from\" = '\\xba826fec90cefdf6706858e5fbafcb27a290fbe0' /* Upbit 2 */\nGROUP BY \"ym\"\nORDER BY \"ym\" ASC"}
{"prompt": "This query returns the duration, auction index, buy token, and sell token for auctions that took longer than six hours to complete, ordered by auction index and then by buy and sell token.", "completion": " select \"block_time\" - to_timestamp(\"auctionStart\") as duration, start.\"auctionIndex\" as auctionIndex, start.\"buyToken\" as buyToken, start.\"sellToken\" as sellToken\nfrom gnosis.\"DutchExchange_evt_AuctionStartScheduled\" as start\njoin gnosis.\"DutchExchange_evt_AuctionCleared\" as cleared\non (\"start\".\"sellToken\" = \"cleared\".\"sellToken\" AND \"start\".\"buyToken\" = \"cleared\".\"buyToken\") OR (\"start\".\"buyToken\" = \"cleared\".\"sellToken\" AND \"start\".\"sellToken\" = \"cleared\".\"buyToken\") AND \"start\".\"auctionIndex\" = \"cleared\".\"auctionIndex\" \njoin ethereum.transactions as tx\non tx.hash = cleared.\"tx_hash\"\nWHERE \"block_time\" - to_timestamp(\"auctionStart\") > interval '6 hours'\nORDER BY (start.\"auctionIndex\", start.\"buyToken\", start.\"sellToken\")\nLIMIT 10;"}
{"prompt": "This query selects the address and the earliest date of all the trades made by each user.", "completion": " SELECT address, MIN(date) FROM (SELECT \"makerAddress\" AS address,\n          tx_hash, date_trunc('day', tx.block_time) as date\n   FROM zeroex.\"Exchange21_evt_Fill\" makers\n INNER JOIN ethereum.transactions tx ON makers.tx_hash = tx.hash\n   UNION ALL\n   \n   SELECT \"takerAddress\" AS address,\n                    tx_hash, date_trunc('day', tx.block_time) as date\n   FROM zeroex.\"Exchange21_evt_Fill\" takers\nINNER JOIN ethereum.transactions tx ON takers.tx_hash = tx.hash) AS trades\nGROUP BY address"}
{"prompt": "This query returns the total value of all ERC20 token transfers between two specific addresses, aggregated by token symbol.", "completion": " WITH txns as (SELECT \ncontract_address,\nevt_tx_hash,\nvalue/1e18 as value \nFROM erc20.\"ERC20_evt_Transfer\" e\nWHERE\n\ne.from = '\\x8888888883585b9a8202db34d8b09d7252bfc61c'\nand\ne.to = '\\x701dd73aaae8dca5c1b522a16591927e56dbf58c'\n-- and \n-- e.contract_address = 'x6b175474e89094c44da98b954eedeac495271d0f'\n\nUNION\n(SELECT\ncontract_address,\nevt_tx_hash,\n- value/1e18 as value\nFROM erc20.\"ERC20_evt_Transfer\" e\nWHERE\ne.from = '\\x701dd73aaae8dca5c1b522a16591927e56dbf58c'\nand \ne.to = '\\x8888888883585b9a8202db34d8b09d7252bfc61c'\n-- and\n-- e.contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n)\n)\n\nSELECT\nerc.symbol,\nSUM(txns.value) as total_winnings\nFROM txns\nJOIN erc20.tokens erc on (erc.contract_address = txns.contract_address)\nGROUP by 1\n\n\n"}
{"prompt": "This SQL query shows the total Dai transfer volume for each day, as well as the total Dai transfer volume for all time. The query is ordered by day, with the most recent day appearing first.", "completion": " SELECT \ndate_trunc('day', evt_block_time) as day,\nsum(\"wad\"/1e18) as transfer_volume,\nsum(sum(\"wad\"/1e18)) over (order by date_trunc('day', evt_block_time)) as all_time_transfer_volume\nFROM makermcd.\"DAI_evt_Transfer\" \nGROUP BY 1\nORDER BY 1 desc\n"}
{"prompt": "This SQL query returns a count of all transactions from the past year where the gas price was set to 0. This is likely due to the private key for this address being leaked, as it holds 75k ICON worth around $20k.", "completion": " /**\n * The private key to a8015df1f65e1f53d491dc1ed35013031ad25034 has been leaked\n * and it holds 75k ICON worth around $20k. This is a count of the number of \n * transactions in the past year with gasprice=0\n */\nSELECT *\nFROM ethereum.transactions\nWHERE block_time >= now()::date - interval '1 year'\n  AND \"from\"='\\xa8015df1f65e1f53d491dc1ed35013031ad25034'\n  and gas_price = 0\n"}
{"prompt": "In this query, we are selecting the sum of the amount of tokens borrowed from the compound v1 smart contract, specifically for the DAI asset. In order to get the total amount of DAI borrowed, we need to divide the amount by 1e18.", "completion": " SELECT SUM(amount / 1e18) --Here we get the amount of tokens borrowed (most amounts needs to be divided by 1e18)\nFROM compoundv1.\"MoneyMarket_evt_BorrowTaken\" --Browse the decoded smart contract data in the window on your left\nWHERE asset = '\\x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359' --Filtering for the DAI address. Note that 0 is replaced with \\"}
{"prompt": "This SQL query returns the USD volume for each token sold or bought on Uniswap over the past two months, ordered by week.", "completion": " SELECT date_trunc('week', tx.block_time) AS Date,\n       p.symbol AS token,\n       SUM(tokens/1e18 * p.average) AS \"USD volume\"\nFROM (\n        (SELECT tx_hash,\n                address,\n                tokens_bought AS tokens\n         FROM uniswap.\"Exchange_evt_TokenPurchase\")\n      UNION ALL\n        (SELECT tx_hash,\n                address,\n                tokens_sold AS tokens\n         FROM uniswap.\"Exchange_evt_EthPurchase\")) tokens\nINNER JOIN ethereum.transactions tx ON tokens.tx_hash = tx.hash\nINNER JOIN coincap.\"tokens/usd\" p ON date_trunc('minute', p.time) = date_trunc('minute', tx.block_time)\nINNER JOIN uniswap.\"Factory_evt_NewExchange\" n on n.exchange = tokens.address\nWHERE tx.block_time > now() - interval '2 months'\n  AND p.asset = n.token\n  AND tx.success = TRUE\nGROUP BY 1,\n         2\nORDER BY 1;"}
{"prompt": "This SQL query returns the average price of the WETH token over the past 7 days, based on data from the OasisDex and CoinCap exchanges.", "completion": " SELECT date_trunc('day', tx.block_time) AS date,\n       AVG(pay_amt / buy_amt) AS price,\n       AVG(cex.average) AS cexPrice \nFROM oasisdex.\"eth2dai_evt_LogTrade\" trade\nLEFT JOIN ethereum.transactions tx ON tx.hash = trade.tx_hash\nLEFT JOIN coincap.\"tokens/usd\" cex ON date_trunc('minute', tx.block_time) = date_trunc('minute', cex.time)\nWHERE pay_gem = '\\x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'\n  AND block_time::date > now() - interval '7 days'\n  AND cex.symbol = 'WETH'\nGROUP BY 1"}
{"prompt": "This query calculates the total amount of SAI that is locked in Fulcrum.", "completion": " select\n(\n    select SUM(\"assetAmount\" / 1e18)\n    from fulcrum.\"iToken_evt_Mint\"\n    where encode(contract_address, 'hex') = '14094949152eddbfcd073717200da82fed8dc960'\n)\n-\n(\n    select SUM(\"assetAmount\" / 1e18)\n    from fulcrum.\"iToken_evt_Burn\"\n    where encode(contract_address, 'hex') = '14094949152eddbfcd073717200da82fed8dc960'\n) as \"fulcrum_locked\""}
{"prompt": "This SQL query returns the id, artist, collector, and price in USD of the most expensive artworks sold on the SuperRare market. The data is sourced from the SuperRareMarketAuction_evt_Sold and SuperRare_evt_Sold events, and the prices are pulled from the prices.layer1_usd_eth table.", "completion": " SELECT \"_tokenId\" AS id,\n       \"_seller\" AS artist,\n       \"_buyer\" AS collector,\n       round((\"_amount\" / 1e18 * p.price)::numeric, 2) AS price_usd\nFROM\n  (SELECT evt_block_time,\n          \"_tokenId\",\n          \"_seller\",\n          \"_buyer\",\n          \"_amount\"\n   FROM superrare.\"SuperRareMarketAuction_evt_Sold\"\n   UNION ALL SELECT evt_block_time,\n                    \"_tokenId\",\n                    \"_seller\",\n                    \"_buyer\",\n                    \"_amount\"\n   FROM superrare.\"SuperRare_evt_Sold\") a\nINNER JOIN prices.layer1_usd_eth p ON date_trunc('minute', a.evt_block_time) = p.minute\nORDER BY 4 DESC"}
{"prompt": "This SQL query returns the sender, receiver, and value of all transfers of the ERC20 token CNSL, ordered by the value of the transfer in descending order. Only the top {{Limit}} transfers are returned.", "completion": " SELECT sender, receiver, value/1e18 as CNSL_amount\n-- , tx_hash\nFROM erc20.\"Transfer\"\nWHERE\ncontract_address = '\\xea0bea4d852687c45fdc57f6b06a8a92302baabc'\nORDER by CNSL_amount desc\nLIMIT {{Limit}}\n"}
{"prompt": "This SQL query selects the date and sum of \"cnt\" over (order by \"date\") from the table \"ERC1155_evt_TransferSingle\" where contract_address='x82C289CD41a793f1AAe5b2cA9FC63C219Ea8ed81', evt_block_time not between to_timestamp('2022-06-02 00:01', 'yyyy-mm-dd hh24:mi') and to_timestamp('2022-06-03 00:00', 'yyyy-mm-dd hh24:mi'), \"from\"='x0000000000000000000000000000000000000000', and \"to\" <> 'x0000000000000000000000000000000000000000'.", "completion": " select \"date\" as \"\uc77c\uc790\", \r\n       sum(\"cnt\") over(order by \"date\") as \"\uac74\uc218\"\r\nfrom\r\n(\r\nselect date_trunc('day', evt_block_time) as \"date\", \r\n       count(\"value\") as \"cnt\"\r\n--22.07.11. \ubbfc\ud305\uc758 \uacbd\uc6b0\ub9cc \ub098\uc624\ub294 \ud14c\uc774\ube14 \ud655\uc778\r\nfrom erc1155.\"ERC1155_evt_TransferSingle\"\r\nwhere  1=1\r\n   --Desperado: Crystal\r\n   and contract_address='\\x82C289CD41a793f1AAe5b2cA9FC63C219Ea8ed81'\r\n   --\ubbfc\ud305 \uc2e4\uc218\uc774\uae30 \ub54c\ubb38\uc5d0 \uc81c\uc678\r\n   and evt_block_time not between to_timestamp('2022-06-02 00:01', 'yyyy-mm-dd hh24:mi') and  to_timestamp('2022-06-03 00:00', 'yyyy-mm-dd hh24:mi')\r\n   --\ubbfc\ud305\r\n   and \"from\"='\\x0000000000000000000000000000000000000000'\r\n   --burn \uc81c\uc678\r\n   and \"to\" <> '\\x0000000000000000000000000000000000000000'\r\ngroup by 1\r\n) t;"}
{"prompt": "The following SQL query returns the number of trades for the BUSD-BD1 asset on Binance for each week, truncated to the nearest week.", "completion": " SELECT date_trunc('week', trades.trade_time), count(*) \nFROM trades  where trades.quote_asset='BUSD-BD1' \nGROUP BY 1\nORDER BY 1 ;"}
{"prompt": "This SQL query returns the total balance of each wallet for the ANT token. The query first filters for all 'Transfer' events for the ANT token, then groups the data by wallet and sums the total balance for each wallet.", "completion": " WITH transfers AS (\n    SELECT                                                                           \n        substring(topic2 from 13) AS sender,                                         \n        substring(topic3 from 13) AS receiver,                                       \n        bytea2numeric(data)/1e18 AS value\n    FROM ethereum.logs l \n    WHERE topic1='\\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' -- Filter by Transfer events\n    AND contract_address = '\\x960b236A07cf122663c4303350609A66A7B288C0' -- ANT address. Fork and change this line to use for other token\n    AND topic2 IS NOT NULL                                                           \n    AND topic3 IS NOT NULL                                                           \n)\nSELECT wallet, SUM(amt) as balance\nFROM (\n    SELECT sender as wallet, -SUM(value) as amt FROM transfers GROUP BY sender\n    UNION\n    SELECT receiver as wallet, SUM(value) as amt FROM transfers GROUP BY receiver    \n) a\nGROUP BY wallet\nORDER BY balance desc\n;"}
{"prompt": "This query is for a table called \"VAT_call_move\" which has a list of transactions involving a specific account ('\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'). It's calculating the net DSR (a16z) earnings for that account over time, starting from 1/8/20 and ending on 1/26/20.", "completion": " WITH inbound AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(rad/1e45) as inb FROM makermcd.\"VAT_call_move\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nwhere dst = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\nGROUP BY 1\nORDER BY 1 desc\n),\n\noutbound AS\n(\nSELECT \ndate_trunc('day', block_time) as day,\nsum(-rad/1e45) as outb FROM makermcd.\"VAT_call_move\"\nLEFT JOIN ethereum.\"transactions\" tx ON call_tx_hash = tx.hash\nWHERE src = '\\x197e90f9fad81970ba7976f33cbd77088e5d7cf7'\nAND call_success\nGROUP BY 1\nORDER BY 1 desc\n)\n\nSELECT \ninbound.day,\nsum(inb + outb)*0.00016438356 as net_DSR,\nsum(sum(inb + outb)*0.00016438356) over (order by inbound.day) as cumulative_net_DSR\nFROM inbound\nLEFT JOIN outbound ON inbound.day = outbound.day\nWHERE inbound.day > '1/8/20'\nand inbound.day < '1/26/20'\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 50"}
{"prompt": "This SQL query returns the day, name, and sum of the total for each partition by name and order by day and name.", "completion": " select day, name, sum(total) over (partition by name order by day,name asc rows between unbounded preceding and current row) from \n(SELECT date_trunc('day', block_time) AS day,\n       (case\n       when encode(contract_address, 'hex') = '36324b8168f960a12a8fd01406c9c78143d41380' then 'ySUSD'\n       when encode(contract_address, 'hex') = 'a2609b2b43ac0f5ebe27deb944d2a399c201e3da' then 'yUSDC'\n       when encode(contract_address, 'hex') = '9d25057e62939d3408406975ad75ffe834da4cdd' then 'yDAI'\n       when encode(contract_address, 'hex') = 'a1787206d5b1be0f432c4c4f96dc4d1257a1dd14' then 'yUSDT'\n       when encode(contract_address, 'hex') = '04ef8121ad039ff41d10029c91ea1694432514e9' then 'yBTC'\n       end) as name,\n       sum(_amount/(case \n       when encode(contract_address, 'hex') = 'a2609b2b43ac0f5ebe27deb944d2a399c201e3da' then 1e6\n       when encode(contract_address, 'hex') = 'a1787206d5b1be0f432c4c4f96dc4d1257a1dd14' then 1e6\n       when encode(contract_address, 'hex') = '04ef8121ad039ff41d10029c91ea1694432514e9' then 1e8\n       else 1e18 end)) as total\nFROM iearn_v1.\"yToken_call_invest\" yci\nLEFT JOIN ethereum.\"transactions\" tx ON yci.call_tx_hash = tx.hash\nGROUP BY 1,2) a"}
{"prompt": "This SQL query returns the total ETH volume traded for RDN on the DutchX exchange for each day. The ETH volume is calculated by taking the total RDN sold in each auction, dividing it by 1e18 (the RDN token contract's decimals), then multiplying it by the average USD price of ETH for that day (from the coincap.io API), and finally dividing it by the average USD price of RDN for that day (from the coincap.io API).", "completion": " SELECT\n\n    date_trunc('day', block_time) as date,\n    sum((\"sellVolume\" / 1e18 * rdn.average) / eth.average) as ethvolume \n    \nFROM gnosis.\"DutchExchange_evt_AuctionCleared\" c, ethereum.transactions tx, coincap.\"tokens/usd\" eth, coincap.\"tokens/usd\" rdn \n\nWHERE \"sellToken\" = '\\x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6' --rdn\nAND \"buyToken\" =  '\\xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' --weth\nAND c.tx_hash = tx.hash\nAND date_trunc('minute', eth.time) = date_trunc('minute', tx.block_time)\nAND date_trunc('minute', rdn.time) = date_trunc('minute', tx.block_time)\nAND eth.symbol = 'WETH'\nAND rdn.symbol = 'RDN'\nAND tx.success = true\n\nGROUP BY 1;"}
{"prompt": "Get all of the data from the \"usd\" table in the prices database where the symbol is equal to \"WETH\", ordered by minute in descending order, and limited to 100 results.", "completion": " SELECT * FROM prices.\"usd\"\nWHERE symbol = 'WETH'\nORDER BY minute desc\nLIMIT 100"}
{"prompt": "The following SQL query will select the market, number of complete sets sold, and the description of the market from the Augur table. It will then group by the market and order by the market. Finally, it will limit the results to 10.", "completion": " SELECT market, \"numCompleteSets\"/1e15 as sets_sold \nFROM augur.\"Augur_evt_CompleteSetsSold\"\nLIMIT 10 \n\nSELECT * FROM augur.\"Augur_evt_CompleteSetsSold\" s\nLEFT JOIN augur.\"Augur_call_logMarketCreated\" _description on s.market = market \nGROUP BY 1\nORDER BY 1\nLIMIT 10 \n\nSELECT\ncount(distinct \"_marketCreator\")\nFROM augur.\"Augur_call_logMarketCreated\"\nLIMIT 10\n\nSELECT \ncount(distinct \"market\")\nFROM augur.\"Augur_evt_CompleteSetsSold\"\nLIMIT 10\n\nSELECT * FROM \naugur.\"Augur_evt_CompleteSetsSold\"\nLIMIT 10 \n\nSELECT \ndate_trunc(\"week\", block_time) week,\nsum(numCompleteSets)  \nFROM augur.\"Augur_evt_CompleteSetsSold\" s\nLEFT JOIN ethereum.\"transactions\" tx ON s.evt_tx_hash = tx_hash\nGROUP BY 1\nORDER BY 1 desc\nLIMIT 10"}
{"prompt": "The following SQL query returns the number of blocks of each type (trade, deposit, withdraw, transfer) that have occurred on the Loopring DEX over the past 28 days.", "completion": " SELECT date_trunc('day', tx.block_time), CASE \"blockType\" WHEN 0 THEN 'trade' WHEN 1 THEN 'deposit' WHEN 2 THEN 'withdraw' WHEN 3 THEN 'withdraw' WHEN 5 THEN 'transfer' END as block_type, COUNT(*) as \"Number of blocks/Block type\"\nFROM loopring.\"DEXBetaV1_call_commitBlock\" b\nINNER JOIN ethereum.transactions tx ON tx.hash = b.call_tx_hash\nWHERE tx.block_time > now() - interval '28 days'\nGROUP BY 1, \"blockType\""}
{"prompt": "This SQL query returns the number of new Uniswap liquidity pools created each week, along with the date that those pools were created.", "completion": " SELECT date_trunc('week', tx.block_time),\nCOUNT ( \"call_success\")  as \"Weekly New Uniswap Liquidity Pools\"\nFROM uniswap.\"Factory_call_createExchange\" u\nLEFT JOIN ethereum.transactions tx ON tx.hash = u.call_tx_hash\nWHERE \"call_success\" = TRUE\nGROUP BY 1\nORDER BY 1 ;\n\n\n"}
{"prompt": "The SQL query below returns the sum of all the wad values divided by 1e18 from the makermcd.\"DAI_call_mint\" table where the call_success value is equal to 'true'.", "completion": " SELECT sum(wad/1e18) FROM makermcd.\"DAI_call_mint\" \nWHERE call_success = 'true'"}
{"prompt": "This SQL query calculates the number of unique Kyber traders who traded in each of the past 6 weeks, as well as the number of traders who traded in the previous week and the retention rate (the number of traders who traded in the previous week divided by the number of traders in the current week).", "completion": " WITH weekly AS\n  (SELECT date_trunc('week', tx.block_time)::date AS week,\n          \"trader\" AS sender\n   FROM kyber.\"Network_evt_KyberTrade\" f\n   LEFT JOIN ethereum.transactions tx ON f.tx_hash = tx.hash\n    WHERE date_trunc('week', tx.block_time) > now() - interval '6 week'\n   ORDER BY week)\nSELECT weekly.week,\n       count(DISTINCT weekly.sender) AS active_users,\n       count(DISTINCT future_sent.sender) AS retained_users,\n       count(DISTINCT future_sent.sender) / count(DISTINCT weekly.sender) AS retention\nFROM weekly\nLEFT JOIN weekly AS future_sent ON weekly.sender = future_sent.sender\nAND weekly.week = future_sent.week - 1\nGROUP BY 1\nORDER BY week ASC"}
{"prompt": "Get all records from the zeroex_v3.\"Exchange_evt_Fill\" table, limited to 10.", "completion": " SELECT * FROM zeroex_v3.\"Exchange_evt_Fill\"\nLIMIT 10"}
{"prompt": "This SQL query returns the number of token transfer transactions out by address for the Argent wallet creator.", "completion": " WITH addresses AS (\n    SELECT DISTINCT substring(tr.input from 17 for 20) as addr\n     FROM ethereum.transactions tx\n     LEFT JOIN ethereum.traces tr ON tx.\"hash\" = tr.tx_hash\n     WHERE tx.\"to\" = '\\x851cc731ce1613ae4fd8ec7f61f4b350f9ce1020' -- Argent wallet creator\n\n       AND substring(tx.\"data\"::bytea\n                     FROM 0\n                     FOR 5) = '\\xaff18575' -- createWallet() method\n\n       AND substring(tr.\"input\"::bytea\n                     FROM 0\n                     FOR 5) = '\\x19ab453c' -- init() method\n)\n\nSELECT distinct count(tx_hash) as total_tx_out, \"from\"\nFROM ethereum.traces\nWHERE \"from\" IN (select addr from addresses)\n and block_number >= 7193539\n and substring(input::bytea from 0 for 5) = '\\xa9059cbb' -- transfer() event. Need to double check this logic\n group by \"from\"\n order by total_tx_out desc"}
{"prompt": "This SQL query returns the total fundings for each ERC20 token.", "completion": " WITH txns as (SELECT \ncontract_address,\nevt_tx_hash,\nvalue/1e18 as value \nFROM erc20.\"ERC20_evt_Transfer\" e\nWHERE\n\n-- e.from != '\\x8888888883585b9a8202db34d8b09d7252bfc61c'\n-- and\ne.from = '\\x0000000000000000000000000000000000000000'\nand\ne.to = '\\x701dd73aaae8dca5c1b522a16591927e56dbf58c'\n\n\n-- and \n-- e.contract_address = 'x6b175474e89094c44da98b954eedeac495271d0f'\n\n-- UNION\n-- (SELECT\n-- contract_address,\n-- evt_tx_hash,\n-- - value/1e18 as value\n-- FROM erc20.\"ERC20_evt_Transfer\" e\n-- WHERE\n-- e.from = '\\x701dd73aaae8dca5c1b522a16591927e56dbf58c'\n-- and \n-- e.to = '\\x8888888883585b9a8202db34d8b09d7252bfc61c'\n-- and\n-- e.contract_address = '\\x6b175474e89094c44da98b954eedeac495271d0f'\n-- )\n)\n\nSELECT\nerc.symbol,\nSUM(txns.value) as total_fundings\nFROM txns\nJOIN erc20.tokens erc on (erc.contract_address = txns.contract_address)\nGROUP by 1\n\n\n"}
{"prompt": "This query returns the number of new and old users on the 1inch platform for each day, as well as the price of ETH for each day.", "completion": " SELECT\n    ssq.time, \n    new_users as new,\n    (unique_users - new_users) as old\n    -- (SELECT price from prices.layer1_usd WHERE symbol = 'ETH' and minute = ssq.time LIMIT 1) as eth_price\nFROM (\n    SELECT\n        sq.time, \n        count(*) as new_users\n    FROM (\n        SELECT\n            tx_from as user,\n            MIN(date_trunc('day', oi.block_time)) as time\n        FROM dex.trades oi WHERE project = '1inch'\n        GROUP BY 1\n        ORDER BY 1\n    ) sq\n    GROUP BY 1\n) ssq\nLEFT JOIN (\n    SELECT\n        date_trunc('day', oi.block_time) AS time,\n        COUNT(DISTINCT tx_from) as unique_users\n    FROM dex.trades oi WHERE project = '1inch'\n    GROUP BY 1\n    ORDER BY 1\n) t2 ON t2.time = ssq.time\nORDER BY 1 DESC\n"}
{"prompt": "This SQL query returns the number of trades that have been made on the DDEX(legacy) exchange in the past 7 days.", "completion": " SELECT date_trunc('days', tx.block_time) AS Date,\n       count(1) AS trade\nFROM (\n     select evt_tx_hash, (result->>'quoteTokenFilledAmount')::numeric as eth from hydroprotocol.\"HybridExchange_evt_Match\"\n     ) trade\n\nINNER JOIN\n     (SELECT hash,\n             block_time\n      FROM ethereum.transactions tx\n      WHERE tx.block_time > now() - interval '7 days'\n        AND block_time < date_trunc('day', NOW())) tx ON trade.evt_tx_hash = tx.hash\n\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "The query returns the number of sandwiches swaps that have occurred.", "completion": " SELECT\n  COUNT(*) AS `# Sandwiches Swaps`\nFROM\n  flashbots.sandwiched_swaps"}
{"prompt": "This SQL query returns the total amount of USD spent on Ethereum Name Service (ENS) per week. The data is obtained by left joining the \"Registrar_old_evt_HashRegistered\" table with the \"transactions\" table on the \"hash\" column. The \"value\" column from the \"Registrar_old_evt_HashRegistered\" table is then summed and multiplied by the price of ETH from the \"prices\" table. The data is grouped by week and ordered by date.", "completion": " SELECT \ndate_trunc('week', tx.block_time),\nSUM(r.value/1e18)*(SELECT p.price FROM prices.\"usd\" p\n                        WHERE p.symbol = 'ETH'\n                        ORDER BY minute DESC\n                        LIMIT 1) AS usd\nFROM ethereumnameservice.\"Registrar_old_evt_HashRegistered\" r\nLEFT JOIN ethereum.transactions tx\nON tx.hash = r.evt_tx_hash\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns the total amount of SAI that has been migrated to DAI, grouped by hour.", "completion": " --call_swapSaiToDai-call_swapDaiToSai, without call_migrate!!!\n\nSELECT date_trunc('hour', block_time) AS TIME,\n       sum(c.migrated),\n       SUM (SUM(c.migrated)) OVER (ORDER BY date_trunc('hour', block_time)) as TOTAL\n\nFROM\n  (SELECT block_time,\n          wad/1e18 AS migrated\n   FROM makermcd.\"ScdMcdMigration_call_swapSaiToDai\" a\n   LEFT JOIN ethereum.transactions tx ON tx.hash = a.call_tx_hash\n   WHERE call_success = TRUE\n   UNION ALL SELECT block_time, -wad/1e18 AS migrated\n   FROM makermcd.\"ScdMcdMigration_call_swapDaiToSai\" b\n   LEFT JOIN ethereum.transactions tx ON tx.hash = b.call_tx_hash\n   WHERE call_success = TRUE) c\nGROUP BY time\nORDER BY time DESC"}
{"prompt": "This SQL query returns the number of times each method was called on a particular contract, where the contract address is '0x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c', and the block number is greater than or equal to 8235058.", "completion": " select substring(data,1,4) as method_id, sum(1) as times_called\nfrom ethereum.transactions tx\ninner join ethereum.receipts r\non tx.hash = r.tx_hash\nwhere tx.\"to\" = '\\x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c'\nand tx.block_number >= 8235058\ngroup by method_id\norder by times_called desc\n\n/**\n * Run for specific method_id\n \nselect substring(data,1,4) as method_id, *\nfrom ethereum.transactions tx\ninner join ethereum.receipts r\non tx.hash = r.tx_hash\nwhere tx.\"to\" = '\\x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c'\nand tx.block_number >= 8235058\nand substring(data,1,4) = '\\xb1954e95'\n\n*/"}
{"prompt": "This query returns the top 10 ERC20 transfers for the BAT token. It includes the sender, receiver, and value of the transfer.", "completion": " SELECT topic2 AS sender, topic3 AS receiver, bytea2numeric(data)/1e18 AS value\nFROM ethereum.logs\nWHERE topic1='\\xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' -- Transfer\nAND contract_address = '\\x0d8775f648430679a709e98d2b0cb6250d2887ef' -- BAT\nLIMIT 10"}
{"prompt": "This query returns the total fees collected by Uniswap in USD for a specific pool over a period of time. The period is specified by the user, and the pool can be either the CNCC pool or any other Uniswap pool.", "completion": " select \n    Date,\n    pool_address,\n    CASE \n        WHEN pool_address LIKE '\\x0fc809dd1475cd6056b6d36a832cb53bcb2e8786'  THEN 'CNCC'\n        ELSE pool\n    END AS pool,\n    fees,\n    Total\nFROM (\nSELECT\n    date_trunc('day', tx.block_time) AS Date,\n    ether.contract_address as pool_address,\n    \n    (SELECT symbol FROM erc20.tokens WHERE contract_address =\n        (SELECT token FROM uniswap.\"Factory_evt_NewExchange\"  WHERE exchange = ether.contract_address LIMIT 1) \n    LIMIT 1) as pool,\n    SUM(eth*p.price)*0.003/1e18 AS fees,\n    SUM(SUM(eth*p.price)*0.003/1e18) OVER (PARTITION BY ether.contract_address ORDER BY date_trunc('day', tx.block_time)) AS TOTAL\nFROM (\n    SELECT evt_tx_hash, eth_sold AS eth, contract_address FROM uniswap.\"Exchange_evt_TokenPurchase\" UNION ALL\n    SELECT evt_tx_hash, eth_bought AS eth, contract_address FROM uniswap.\"Exchange_evt_EthPurchase\"\n) ether\nINNER JOIN (\n    SELECT hash, block_time FROM ethereum.transactions tx\n    WHERE tx.block_time > now() - interval '{{ days }} days'\n      AND block_time < date_trunc('day', NOW())\n) tx ON ether.evt_tx_hash = tx.hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', tx.block_time) WHERE p.symbol = 'ETH'\nGROUP BY 1, 2\nORDER BY 1 DESC, 5 DESC) a\nWHERE '{{pool}}' ='1' IS  OR pool_address= '{{pool}}'\n"}
{"prompt": "This SQL query returns the biggest buyers in GNO-WETH auctions. It groups the buyers by their user id and sum of amount purchased.", "completion": " \nselect \"user\", sum(amount)*pow(10, -18) s, \"sellToken\"\nfrom gnosis.\"DutchExchange_evt_NewBuyOrder\"\nwhere \"auctionIndex\" in (243, 247)\nand \"sellToken\" = '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' -- WETH\nand \"buyToken\" = '\\x6810e776880c02933d47db1b9fc05908e5386b96' -- GNO\ngroup by (\"user\", \"sellToken\")\norder by s desc\n\n-- -- Sum of here is 5,434.99 GNO\n-- select sum(amount)*pow(10, -18) s, \"sellToken\"\n-- from gnosis.\"DutchExchange_evt_NewBuyOrder\"\n-- where \"auctionIndex\" in (243, 247)\n-- and \"sellToken\" = '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' -- WETH\n-- and \"buyToken\" = '\\x6810e776880c02933d47db1b9fc05908e5386b96' -- GNO\n-- group by \"sellToken\"\n-- order by s desc;\n\n\n-- select \"user\", sum(amount)*pow(10, -18) s, \"sellToken\"\n-- from gnosis.\"DutchExchange_evt_NewBuyOrder\"\n-- where \"auctionIndex\" in (244)\n-- and \"buyToken\" = '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' -- WETH\n-- and \"sellToken\" = '\\x6810e776880c02933d47db1b9fc05908e5386b96' -- GNO\n-- group by (\"user\", \"sellToken\")\n-- order by s desc;\n\n-- -- Sum of here is 162.71 ETH\n-- select sum(amount)*pow(10, -18) s, \"sellToken\"\n-- from gnosis.\"DutchExchange_evt_NewBuyOrder\"\n-- where \"auctionIndex\" in (244)\n-- and \"buyToken\" = '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' -- WETH\n-- and \"sellToken\" = '\\x6810e776880c02933d47db1b9fc05908e5386b96' -- GNO\n-- group by \"sellToken\"\n-- order by s desc;\n"}
{"prompt": "This SQL query returns the top 10 holders of rDai, a cryptocurrency, in terms of gno_balance.", "completion": " WITH transfers AS (\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"from\" AS address,\n    -tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr\n     WHERE contract_address = '\\x261b45D85cCFeAbb11F022eBa346ee8D1cd488c0' -- rDai\nUNION ALL\n    SELECT\n    evt_tx_hash AS tx_hash,\n    tr.\"to\" AS address,\n    tr.value AS amount\n     FROM erc20.\"ERC20_evt_Transfer\" tr \n     WHERE contract_address = '\\x261b45D85cCFeAbb11F022eBa346ee8D1cd488c0' --rDai\n)\n\nSELECT address, sum(amount/1e18) as gno_balance\nFROM transfers\nGROUP BY 1\nORDER BY 2 desc\nLIMIT 10\n"}
{"prompt": "This SQL query returns a list of 500 transactions that called a specific method, identified by the \"method_id\" variable, from the Ethereum blockchain. The transactions are ordered by block number, with the most recent transactions appearing first.", "completion": " select substring(data,1,4) as method_id, tx.hash, tx.block_number\nfrom ethereum.transactions tx\ninner join ethereum.receipts r\non tx.hash = r.tx_hash\nwhere tx.\"to\" = '\\x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c'\nand tx.block_number >= 8235058\nand substring(data,1,4) = {{ method_id }}\norder by block_number desc\nlimit 500"}
{"prompt": "This SQL query returns the volume of DIP (Etherisc) exchanged for ETH per year on Idex, using data from the ethereum.transactions table and the prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 table.", "completion": " SELECT date_trunc('year', tx.block_time) as Date, SUM((eth)) as \"DIP volume\"\nFROM ((SELECT call_tx_hash, \"tradeValues\"[1]/1e18 AS eth FROM idex.\"IDEX1_call_trade\"\n        WHERE \"tradeAddresses\"[1] = '\\xc719d010b63e5bbf2c0551872cd5316ed26acd83')\n        UNION\n        (SELECT call_tx_hash, \"tradeValues\"[2]/1e18 AS eth FROM idex.\"IDEX1_call_trade\"\n        WHERE \"tradeAddresses\"[2] = '\\xc719d010b63e5bbf2c0551872cd5316ed26acd83')) total\n\n    INNER JOIN (SELECT hash, block_time FROM ethereum.transactions tx\n                WHERE tx.block_time > now() - interval '24 months'\n                AND block_time < date_trunc('week', NOW())) tx\n    ON total.call_tx_hash = tx.hash\nINNER JOIN prices.usd_c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 p ON p.minute = date_trunc('minute', tx.block_time)\nWHERE p.symbol = 'WETH'\nGROUP BY 1\nORDER BY 1;"}
{"prompt": "This SQL query returns the total revenue and fees collected by the Compound v2 liquidator for each day. The revenue is calculated by taking a percentage of the tokens seized from borrowers, multiplied by the price of cEther in USD. The fees are calculated by taking the gas used to execute the liquidations, multiplied by the gas price and the price of cEther in USD.", "completion": " SELECT\n    date_trunc('day', block_time) as day\n    , sum(\"seizeTokens\"/1e13 * p.price * 0.05) as keeper_revenue_usd\n    , sum(r.gas_used * tx.gas_price * p.price)\nFROM compound_v2.\"cEther_evt_LiquidateBorrow\" m\nLEFT JOIN ethereum.\"transactions\" tx ON m.evt_tx_hash = tx.hash\nLEFT JOIN ethereum.\"receipts\" r ON m.evt_tx_hash = r.tx_hash\nINNER JOIN prices.usd p ON p.minute = date_trunc('minute', block_time)\nGROUP BY 1\nORDER BY 1 desc"}
{"prompt": "This query calculates the total amount of money spent on SuperRare auctions in USD, broken down by day.", "completion": " WITH sales AS\n  (SELECT _amount,\n          date_trunc('minute', evt_block_time) dt\n   FROM superrare.\"SuperRareMarketAuction_evt_Sold\"\n   UNION ALL SELECT _amount,\n                    date_trunc('minute', evt_block_time) dt\n   FROM superrare.\"SuperRare_evt_Sold\"),\n     sales_usd AS\n  (SELECT (_amount / 10^18) * p.price price_usd,\n          dt\n   FROM sales\n   INNER JOIN prices.usd p ON p.minute = dt\n   AND p.contract_address = '\\xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2')\nSELECT sum(price_usd) as amount_usd,\n       date_trunc('day', dt)\nFROM sales_usd\nGROUP BY 2\nORDER BY 2 DESC;"}
